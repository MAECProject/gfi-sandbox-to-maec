#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Jun 15 15:37:45 2012 by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class analysis(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sha1=None, analysis_id=None, application_type=None, commandline=None, sample_id=None, filename=None, version=None, time=None, custom_hash=None, sample_comment=None, md5=None, calltree=None, processes=None, running_processes=None):
        self.sha1 = _cast(None, sha1)
        self.analysis_id = _cast(int, analysis_id)
        self.application_type = _cast(None, application_type)
        self.commandline = _cast(None, commandline)
        self.sample_id = _cast(int, sample_id)
        self.filename = _cast(None, filename)
        self.version = _cast(None, version)
        self.time = _cast(None, time)
        self.custom_hash = _cast(None, custom_hash)
        self.sample_comment = _cast(None, sample_comment)
        self.md5 = _cast(None, md5)
        self.calltree = calltree
        self.processes = processes
        self.running_processes = running_processes
    def factory(*args_, **kwargs_):
        if analysis.subclass:
            return analysis.subclass(*args_, **kwargs_)
        else:
            return analysis(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_calltree(self): return self.calltree
    def set_calltree(self, calltree): self.calltree = calltree
    def get_processes(self): return self.processes
    def set_processes(self, processes): self.processes = processes
    def get_running_processes(self): return self.running_processes
    def set_running_processes(self, running_processes): self.running_processes = running_processes
    def get_sha1(self): return self.sha1
    def set_sha1(self, sha1): self.sha1 = sha1
    def get_analysis_id(self): return self.analysis_id
    def set_analysis_id(self, analysis_id): self.analysis_id = analysis_id
    def get_application_type(self): return self.application_type
    def set_application_type(self, application_type): self.application_type = application_type
    def get_commandline(self): return self.commandline
    def set_commandline(self, commandline): self.commandline = commandline
    def get_sample_id(self): return self.sample_id
    def set_sample_id(self, sample_id): self.sample_id = sample_id
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_custom_hash(self): return self.custom_hash
    def set_custom_hash(self, custom_hash): self.custom_hash = custom_hash
    def get_sample_comment(self): return self.sample_comment
    def set_sample_comment(self, sample_comment): self.sample_comment = sample_comment
    def get_md5(self): return self.md5
    def set_md5(self, md5): self.md5 = md5
    def export(self, outfile, level, namespace_='', name_='analysis', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='analysis')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='analysis'):
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            outfile.write(' sha1=%s' % (self.gds_format_string(quote_attrib(self.sha1).encode(ExternalEncoding), input_name='sha1'), ))
        if self.analysis_id is not None and 'analysis_id' not in already_processed:
            already_processed.append('analysis_id')
            outfile.write(' analysis_id="%s"' % self.gds_format_integer(self.analysis_id, input_name='analysis_id'))
        if self.application_type is not None and 'application_type' not in already_processed:
            already_processed.append('application_type')
            outfile.write(' application_type=%s' % (self.gds_format_string(quote_attrib(self.application_type).encode(ExternalEncoding), input_name='application_type'), ))
        if self.commandline is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            outfile.write(' commandline=%s' % (self.gds_format_string(quote_attrib(self.commandline).encode(ExternalEncoding), input_name='commandline'), ))
        if self.sample_id is not None and 'sample_id' not in already_processed:
            already_processed.append('sample_id')
            outfile.write(' sample_id="%s"' % self.gds_format_integer(self.sample_id, input_name='sample_id'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            outfile.write(' time=%s' % (self.gds_format_string(quote_attrib(self.time).encode(ExternalEncoding), input_name='time'), ))
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            outfile.write(' custom_hash=%s' % (self.gds_format_string(quote_attrib(self.custom_hash).encode(ExternalEncoding), input_name='custom_hash'), ))
        if self.sample_comment is not None and 'sample_comment' not in already_processed:
            already_processed.append('sample_comment')
            outfile.write(' sample_comment=%s' % (self.gds_format_string(quote_attrib(self.sample_comment).encode(ExternalEncoding), input_name='sample_comment'), ))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            outfile.write(' md5=%s' % (self.gds_format_string(quote_attrib(self.md5).encode(ExternalEncoding), input_name='md5'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='analysis', fromsubclass_=False):
        if self.calltree is not None:
            self.calltree.export(outfile, level, namespace_, name_='calltree', )
        if self.processes is not None:
            self.processes.export(outfile, level, namespace_, name_='processes', )
        if self.running_processes is not None:
            self.running_processes.export(outfile, level, namespace_, name_='running_processes', )
    def hasContent_(self):
        if (
            self.calltree is not None or
            self.processes is not None or
            self.running_processes is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='analysis'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            showIndent(outfile, level)
            outfile.write('sha1 = "%s",\n' % (self.sha1,))
        if self.analysis_id is not None and 'analysis_id' not in already_processed:
            already_processed.append('analysis_id')
            showIndent(outfile, level)
            outfile.write('analysis_id = %d,\n' % (self.analysis_id,))
        if self.application_type is not None and 'application_type' not in already_processed:
            already_processed.append('application_type')
            showIndent(outfile, level)
            outfile.write('application_type = "%s",\n' % (self.application_type,))
        if self.commandline is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            showIndent(outfile, level)
            outfile.write('commandline = "%s",\n' % (self.commandline,))
        if self.sample_id is not None and 'sample_id' not in already_processed:
            already_processed.append('sample_id')
            showIndent(outfile, level)
            outfile.write('sample_id = %d,\n' % (self.sample_id,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            showIndent(outfile, level)
            outfile.write('version = "%s",\n' % (self.version,))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            showIndent(outfile, level)
            outfile.write('time = "%s",\n' % (self.time,))
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            showIndent(outfile, level)
            outfile.write('custom_hash = "%s",\n' % (self.custom_hash,))
        if self.sample_comment is not None and 'sample_comment' not in already_processed:
            already_processed.append('sample_comment')
            showIndent(outfile, level)
            outfile.write('sample_comment = "%s",\n' % (self.sample_comment,))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            showIndent(outfile, level)
            outfile.write('md5 = "%s",\n' % (self.md5,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.calltree is not None:
            showIndent(outfile, level)
            outfile.write('calltree=model_.calltree(\n')
            self.calltree.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.processes is not None:
            showIndent(outfile, level)
            outfile.write('processes=model_.processes(\n')
            self.processes.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.running_processes is not None:
            showIndent(outfile, level)
            outfile.write('running_processes=model_.running_processes(\n')
            self.running_processes.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('sha1', node)
        if value is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            self.sha1 = value
        value = find_attr_value_('analysis_id', node)
        if value is not None and 'analysis_id' not in already_processed:
            already_processed.append('analysis_id')
            try:
                self.analysis_id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('application_type', node)
        if value is not None and 'application_type' not in already_processed:
            already_processed.append('application_type')
            self.application_type = value
        value = find_attr_value_('commandline', node)
        if value is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            self.commandline = value
        value = find_attr_value_('sample_id', node)
        if value is not None and 'sample_id' not in already_processed:
            already_processed.append('sample_id')
            try:
                self.sample_id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.append('version')
            self.version = value
        value = find_attr_value_('time', node)
        if value is not None and 'time' not in already_processed:
            already_processed.append('time')
            self.time = value
        value = find_attr_value_('custom_hash', node)
        if value is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            self.custom_hash = value
        value = find_attr_value_('sample_comment', node)
        if value is not None and 'sample_comment' not in already_processed:
            already_processed.append('sample_comment')
            self.sample_comment = value
        value = find_attr_value_('md5', node)
        if value is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            self.md5 = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'calltree':
            obj_ = calltree.factory()
            obj_.build(child_)
            self.set_calltree(obj_)
        elif nodeName_ == 'processes':
            obj_ = processes.factory()
            obj_.build(child_)
            self.set_processes(obj_)
        elif nodeName_ == 'running_processes':
            obj_ = running_processes.factory()
            obj_.build(child_)
            self.set_running_processes(obj_)
# end class analysis


class calltree(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, process_call=None):
        if process_call is None:
            self.process_call = []
        else:
            self.process_call = process_call
    def factory(*args_, **kwargs_):
        if calltree.subclass:
            return calltree.subclass(*args_, **kwargs_)
        else:
            return calltree(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_process_call(self): return self.process_call
    def set_process_call(self, process_call): self.process_call = process_call
    def add_process_call(self, value): self.process_call.append(value)
    def insert_process_call(self, index, value): self.process_call[index] = value
    def export(self, outfile, level, namespace_='', name_='calltree', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='calltree')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='calltree'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='calltree', fromsubclass_=False):
        for process_call_ in self.process_call:
            process_call_.export(outfile, level, namespace_, name_='process_call')
    def hasContent_(self):
        if (
            self.process_call
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='calltree'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('process_call=[\n')
        level += 1
        for process_call_ in self.process_call:
            showIndent(outfile, level)
            outfile.write('model_.process_call(\n')
            process_call_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'process_call':
            obj_ = process_call.factory()
            obj_.build(child_)
            self.process_call.append(obj_)
# end class calltree


class process_call(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, index=None, monitor_reason=None, pid=None, parent_index=None, filename=None, calltree=None):
        self.index = _cast(None, index)
        self.monitor_reason = _cast(None, monitor_reason)
        self.pid = _cast(int, pid)
        self.parent_index = _cast(None, parent_index)
        self.filename = _cast(None, filename)
        if calltree is None:
            self.calltree = []
        else:
            self.calltree = calltree
    def factory(*args_, **kwargs_):
        if process_call.subclass:
            return process_call.subclass(*args_, **kwargs_)
        else:
            return process_call(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_calltree(self): return self.calltree
    def set_calltree(self, calltree): self.calltree = calltree
    def add_calltree(self, value): self.calltree.append(value)
    def insert_calltree(self, index, value): self.calltree[index] = value
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def validate_type_seqno(self, value):
        # Validate type type_seqno, a restriction on xs:integer.
        pass
    def get_monitor_reason(self): return self.monitor_reason
    def set_monitor_reason(self, monitor_reason): self.monitor_reason = monitor_reason
    def validate_type_monitorreason(self, value):
        # Validate type type_monitorreason, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_parent_index(self): return self.parent_index
    def set_parent_index(self, parent_index): self.parent_index = parent_index
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def export(self, outfile, level, namespace_='', name_='process_call', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='process_call')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='process_call'):
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            outfile.write(' index=%s' % (quote_attrib(self.index), ))
        if self.monitor_reason is not None and 'monitor_reason' not in already_processed:
            already_processed.append('monitor_reason')
            outfile.write(' monitor_reason=%s' % (quote_attrib(self.monitor_reason), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.parent_index is not None and 'parent_index' not in already_processed:
            already_processed.append('parent_index')
            outfile.write(' parent_index=%s' % (quote_attrib(self.parent_index), ))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='process_call', fromsubclass_=False):
        for calltree_ in self.calltree:
            calltree_.export(outfile, level, namespace_, name_='calltree')
    def hasContent_(self):
        if (
            self.calltree
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='process_call'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            showIndent(outfile, level)
            outfile.write('index = %d,\n' % (self.index,))
        if self.monitor_reason is not None and 'monitor_reason' not in already_processed:
            already_processed.append('monitor_reason')
            showIndent(outfile, level)
            outfile.write('monitor_reason = "%s",\n' % (self.monitor_reason,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.parent_index is not None and 'parent_index' not in already_processed:
            already_processed.append('parent_index')
            showIndent(outfile, level)
            outfile.write('parent_index = %d,\n' % (self.parent_index,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('calltree=[\n')
        level += 1
        for calltree_ in self.calltree:
            showIndent(outfile, level)
            outfile.write('model_.calltree(\n')
            calltree_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.append('index')
            try:
                self.index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_type_seqno(self.index)    # validate type type_seqno
        value = find_attr_value_('monitor_reason', node)
        if value is not None and 'monitor_reason' not in already_processed:
            already_processed.append('monitor_reason')
            self.monitor_reason = value
            self.validate_type_monitorreason(self.monitor_reason)    # validate type type_monitorreason
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('parent_index', node)
        if value is not None and 'parent_index' not in already_processed:
            already_processed.append('parent_index')
            try:
                self.parent_index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_type_seqno(self.parent_index)    # validate type type_seqno
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'calltree':
            obj_ = calltree.factory()
            obj_.build(child_)
            self.calltree.append(obj_)
# end class process_call


class running_processes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, running_process=None):
        if running_process is None:
            self.running_process = []
        else:
            self.running_process = running_process
    def factory(*args_, **kwargs_):
        if running_processes.subclass:
            return running_processes.subclass(*args_, **kwargs_)
        else:
            return running_processes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_running_process(self): return self.running_process
    def set_running_process(self, running_process): self.running_process = running_process
    def add_running_process(self, value): self.running_process.append(value)
    def insert_running_process(self, index, value): self.running_process[index] = value
    def export(self, outfile, level, namespace_='', name_='running_processes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='running_processes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='running_processes'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='running_processes', fromsubclass_=False):
        for running_process_ in self.running_process:
            running_process_.export(outfile, level, namespace_, name_='running_process')
    def hasContent_(self):
        if (
            self.running_process
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='running_processes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('running_process=[\n')
        level += 1
        for running_process_ in self.running_process:
            showIndent(outfile, level)
            outfile.write('model_.running_process(\n')
            running_process_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'running_process':
            obj_ = running_process.factory()
            obj_.build(child_)
            self.running_process.append(obj_)
# end class running_processes


class running_process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, commandline=None, pid=None, filename=None):
        self.commandline = _cast(None, commandline)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        pass
    def factory(*args_, **kwargs_):
        if running_process.subclass:
            return running_process.subclass(*args_, **kwargs_)
        else:
            return running_process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_commandline(self): return self.commandline
    def set_commandline(self, commandline): self.commandline = commandline
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def export(self, outfile, level, namespace_='', name_='running_process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='running_process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='running_process'):
        if self.commandline is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            outfile.write(' commandline=%s' % (self.gds_format_string(quote_attrib(self.commandline).encode(ExternalEncoding), input_name='commandline'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='running_process', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='running_process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.commandline is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            showIndent(outfile, level)
            outfile.write('commandline = "%s",\n' % (self.commandline,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('commandline', node)
        if value is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            self.commandline = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class running_process


class processes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, process=None):
        if process is None:
            self.process = []
        else:
            self.process = process
    def factory(*args_, **kwargs_):
        if processes.subclass:
            return processes.subclass(*args_, **kwargs_)
        else:
            return processes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_process(self): return self.process
    def set_process(self, process): self.process = process
    def add_process(self, value): self.process.append(value)
    def insert_process(self, index, value): self.process[index] = value
    def export(self, outfile, level, namespace_='', name_='processes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='processes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='processes'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='processes', fromsubclass_=False):
        for process_ in self.process:
            process_.export(outfile, level, namespace_, name_='process')
    def hasContent_(self):
        if (
            self.process
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='processes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('process=[\n')
        level += 1
        for process_ in self.process:
            showIndent(outfile, level)
            outfile.write('model_.process(\n')
            process_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'process':
            obj_ = process.factory()
            obj_.build(child_)
            self.process.append(obj_)
# end class processes


class process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, index=None, sha1=None, parent_pid=None, custom_hash=None, termination_reason=None, commandline=None, monitor_reason=None, pid=None, parent_index=None, execution_status=None, filesize=None, termination_time=None, filename=None, start_time=None, md5=None, running_time=None, stored_modified_files=None, mapped_modules=None, filesystem_section=None, registry_section=None, process_section=None, virtualmemory_section=None, filemapping_section=None, thread_section=None, window_section=None, sysobject_section=None, system_section=None, service_section=None, user_section=None, share_section=None, module_section=None, networkpacket_section=None, networkoperation_section=None, checkpoint_section=None, com_section=None, error_section=None, connection_section=None, scanner_section=None):
        self.username = _cast(None, username)
        self.index = _cast(None, index)
        self.sha1 = _cast(None, sha1)
        self.parent_pid = _cast(int, parent_pid)
        self.custom_hash = _cast(None, custom_hash)
        self.termination_reason = _cast(None, termination_reason)
        self.commandline = _cast(None, commandline)
        self.monitor_reason = _cast(None, monitor_reason)
        self.pid = _cast(int, pid)
        self.parent_index = _cast(None, parent_index)
        self.execution_status = _cast(None, execution_status)
        self.filesize = _cast(int, filesize)
        self.termination_time = _cast(None, termination_time)
        self.filename = _cast(None, filename)
        self.start_time = _cast(None, start_time)
        self.md5 = _cast(None, md5)
        self.running_time = _cast(None, running_time)
        self.stored_modified_files = stored_modified_files
        self.mapped_modules = mapped_modules
        self.filesystem_section = filesystem_section
        self.registry_section = registry_section
        self.process_section = process_section
        self.virtualmemory_section = virtualmemory_section
        self.filemapping_section = filemapping_section
        self.thread_section = thread_section
        self.window_section = window_section
        self.sysobject_section = sysobject_section
        self.system_section = system_section
        self.service_section = service_section
        self.user_section = user_section
        self.share_section = share_section
        self.module_section = module_section
        self.networkpacket_section = networkpacket_section
        self.networkoperation_section = networkoperation_section
        self.checkpoint_section = checkpoint_section
        self.com_section = com_section
        self.error_section = error_section
        self.connection_section = connection_section
        self.scanner_section = scanner_section
    def factory(*args_, **kwargs_):
        if process.subclass:
            return process.subclass(*args_, **kwargs_)
        else:
            return process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_stored_modified_files(self): return self.stored_modified_files
    def set_stored_modified_files(self, stored_modified_files): self.stored_modified_files = stored_modified_files
    def get_mapped_modules(self): return self.mapped_modules
    def set_mapped_modules(self, mapped_modules): self.mapped_modules = mapped_modules
    def get_filesystem_section(self): return self.filesystem_section
    def set_filesystem_section(self, filesystem_section): self.filesystem_section = filesystem_section
    def get_registry_section(self): return self.registry_section
    def set_registry_section(self, registry_section): self.registry_section = registry_section
    def get_process_section(self): return self.process_section
    def set_process_section(self, process_section): self.process_section = process_section
    def get_virtualmemory_section(self): return self.virtualmemory_section
    def set_virtualmemory_section(self, virtualmemory_section): self.virtualmemory_section = virtualmemory_section
    def get_filemapping_section(self): return self.filemapping_section
    def set_filemapping_section(self, filemapping_section): self.filemapping_section = filemapping_section
    def get_thread_section(self): return self.thread_section
    def set_thread_section(self, thread_section): self.thread_section = thread_section
    def get_window_section(self): return self.window_section
    def set_window_section(self, window_section): self.window_section = window_section
    def get_sysobject_section(self): return self.sysobject_section
    def set_sysobject_section(self, sysobject_section): self.sysobject_section = sysobject_section
    def get_system_section(self): return self.system_section
    def set_system_section(self, system_section): self.system_section = system_section
    def get_service_section(self): return self.service_section
    def set_service_section(self, service_section): self.service_section = service_section
    def get_user_section(self): return self.user_section
    def set_user_section(self, user_section): self.user_section = user_section
    def get_share_section(self): return self.share_section
    def set_share_section(self, share_section): self.share_section = share_section
    def get_module_section(self): return self.module_section
    def set_module_section(self, module_section): self.module_section = module_section
    def get_networkpacket_section(self): return self.networkpacket_section
    def set_networkpacket_section(self, networkpacket_section): self.networkpacket_section = networkpacket_section
    def get_networkoperation_section(self): return self.networkoperation_section
    def set_networkoperation_section(self, networkoperation_section): self.networkoperation_section = networkoperation_section
    def get_checkpoint_section(self): return self.checkpoint_section
    def set_checkpoint_section(self, checkpoint_section): self.checkpoint_section = checkpoint_section
    def get_com_section(self): return self.com_section
    def set_com_section(self, com_section): self.com_section = com_section
    def get_error_section(self): return self.error_section
    def set_error_section(self, error_section): self.error_section = error_section
    def get_connection_section(self): return self.connection_section
    def set_connection_section(self, connection_section): self.connection_section = connection_section
    def get_scanner_section(self): return self.scanner_section
    def set_scanner_section(self, scanner_section): self.scanner_section = scanner_section
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def validate_type_seqno(self, value):
        # Validate type type_seqno, a restriction on xs:integer.
        pass
    def get_sha1(self): return self.sha1
    def set_sha1(self, sha1): self.sha1 = sha1
    def get_parent_pid(self): return self.parent_pid
    def set_parent_pid(self, parent_pid): self.parent_pid = parent_pid
    def get_custom_hash(self): return self.custom_hash
    def set_custom_hash(self, custom_hash): self.custom_hash = custom_hash
    def get_termination_reason(self): return self.termination_reason
    def set_termination_reason(self, termination_reason): self.termination_reason = termination_reason
    def validate_type_terminationreason(self, value):
        # Validate type type_terminationreason, a restriction on xs:string.
        pass
    def get_commandline(self): return self.commandline
    def set_commandline(self, commandline): self.commandline = commandline
    def get_monitor_reason(self): return self.monitor_reason
    def set_monitor_reason(self, monitor_reason): self.monitor_reason = monitor_reason
    def validate_type_monitorreason(self, value):
        # Validate type type_monitorreason, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_parent_index(self): return self.parent_index
    def set_parent_index(self, parent_index): self.parent_index = parent_index
    def get_execution_status(self): return self.execution_status
    def set_execution_status(self, execution_status): self.execution_status = execution_status
    def get_filesize(self): return self.filesize
    def set_filesize(self, filesize): self.filesize = filesize
    def get_termination_time(self): return self.termination_time
    def set_termination_time(self, termination_time): self.termination_time = termination_time
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_start_time(self): return self.start_time
    def set_start_time(self, start_time): self.start_time = start_time
    def get_md5(self): return self.md5
    def set_md5(self, md5): self.md5 = md5
    def get_running_time(self): return self.running_time
    def set_running_time(self, running_time): self.running_time = running_time
    def export(self, outfile, level, namespace_='', name_='process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='process'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            outfile.write(' index=%s' % (quote_attrib(self.index), ))
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            outfile.write(' sha1=%s' % (self.gds_format_string(quote_attrib(self.sha1).encode(ExternalEncoding), input_name='sha1'), ))
        if self.parent_pid is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            outfile.write(' parent_pid="%s"' % self.gds_format_integer(self.parent_pid, input_name='parent_pid'))
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            outfile.write(' custom_hash=%s' % (self.gds_format_string(quote_attrib(self.custom_hash).encode(ExternalEncoding), input_name='custom_hash'), ))
        if self.termination_reason is not None and 'termination_reason' not in already_processed:
            already_processed.append('termination_reason')
            outfile.write(' termination_reason=%s' % (quote_attrib(self.termination_reason), ))
        if self.commandline is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            outfile.write(' commandline=%s' % (self.gds_format_string(quote_attrib(self.commandline).encode(ExternalEncoding), input_name='commandline'), ))
        if self.monitor_reason is not None and 'monitor_reason' not in already_processed:
            already_processed.append('monitor_reason')
            outfile.write(' monitor_reason=%s' % (quote_attrib(self.monitor_reason), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.parent_index is not None and 'parent_index' not in already_processed:
            already_processed.append('parent_index')
            outfile.write(' parent_index=%s' % (quote_attrib(self.parent_index), ))
        if self.execution_status is not None and 'execution_status' not in already_processed:
            already_processed.append('execution_status')
            outfile.write(' execution_status=%s' % (self.gds_format_string(quote_attrib(self.execution_status).encode(ExternalEncoding), input_name='execution_status'), ))
        if self.filesize is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            outfile.write(' filesize="%s"' % self.gds_format_integer(self.filesize, input_name='filesize'))
        if self.termination_time is not None and 'termination_time' not in already_processed:
            already_processed.append('termination_time')
            outfile.write(' termination_time=%s' % (quote_attrib(self.termination_time), ))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.start_time is not None and 'start_time' not in already_processed:
            already_processed.append('start_time')
            outfile.write(' start_time=%s' % (quote_attrib(self.start_time), ))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            outfile.write(' md5=%s' % (self.gds_format_string(quote_attrib(self.md5).encode(ExternalEncoding), input_name='md5'), ))
        if self.running_time is not None and 'running_time' not in already_processed:
            already_processed.append('running_time')
            outfile.write(' running_time=%s' % (quote_attrib(self.running_time), ))
    def exportChildren(self, outfile, level, namespace_='', name_='process', fromsubclass_=False):
        if self.stored_modified_files is not None:
            self.stored_modified_files.export(outfile, level, namespace_, name_='stored_modified_files')
        if self.mapped_modules is not None:
            self.mapped_modules.export(outfile, level, namespace_, name_='mapped_modules')
        if self.filesystem_section is not None:
            self.filesystem_section.export(outfile, level, namespace_, name_='filesystem_section')
        if self.registry_section is not None:
            self.registry_section.export(outfile, level, namespace_, name_='registry_section')
        if self.process_section is not None:
            self.process_section.export(outfile, level, namespace_, name_='process_section')
        if self.virtualmemory_section is not None:
            self.virtualmemory_section.export(outfile, level, namespace_, name_='virtualmemory_section')
        if self.filemapping_section is not None:
            self.filemapping_section.export(outfile, level, namespace_, name_='filemapping_section')
        if self.thread_section is not None:
            self.thread_section.export(outfile, level, namespace_, name_='thread_section')
        if self.window_section is not None:
            self.window_section.export(outfile, level, namespace_, name_='window_section')
        if self.sysobject_section is not None:
            self.sysobject_section.export(outfile, level, namespace_, name_='sysobject_section')
        if self.system_section is not None:
            self.system_section.export(outfile, level, namespace_, name_='system_section')
        if self.service_section is not None:
            self.service_section.export(outfile, level, namespace_, name_='service_section')
        if self.user_section is not None:
            self.user_section.export(outfile, level, namespace_, name_='user_section')
        if self.share_section is not None:
            self.share_section.export(outfile, level, namespace_, name_='share_section')
        if self.module_section is not None:
            self.module_section.export(outfile, level, namespace_, name_='module_section')
        if self.networkpacket_section is not None:
            self.networkpacket_section.export(outfile, level, namespace_, name_='networkpacket_section')
        if self.networkoperation_section is not None:
            self.networkoperation_section.export(outfile, level, namespace_, name_='networkoperation_section')
        if self.checkpoint_section is not None:
            self.checkpoint_section.export(outfile, level, namespace_, name_='checkpoint_section')
        if self.com_section is not None:
            self.com_section.export(outfile, level, namespace_, name_='com_section')
        if self.error_section is not None:
            self.error_section.export(outfile, level, namespace_, name_='error_section')
        if self.connection_section is not None:
            self.connection_section.export(outfile, level, namespace_, name_='connection_section')
        if self.scanner_section is not None:
            self.scanner_section.export(outfile, level, namespace_, name_='scanner_section')
    def hasContent_(self):
        if (
            self.stored_modified_files is not None or
            self.mapped_modules is not None or
            self.filesystem_section is not None or
            self.registry_section is not None or
            self.process_section is not None or
            self.virtualmemory_section is not None or
            self.filemapping_section is not None or
            self.thread_section is not None or
            self.window_section is not None or
            self.sysobject_section is not None or
            self.system_section is not None or
            self.service_section is not None or
            self.user_section is not None or
            self.share_section is not None or
            self.module_section is not None or
            self.networkpacket_section is not None or
            self.networkoperation_section is not None or
            self.checkpoint_section is not None or
            self.com_section is not None or
            self.error_section is not None or
            self.connection_section is not None or
            self.scanner_section is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            showIndent(outfile, level)
            outfile.write('index = %d,\n' % (self.index,))
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            showIndent(outfile, level)
            outfile.write('sha1 = "%s",\n' % (self.sha1,))
        if self.parent_pid is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            showIndent(outfile, level)
            outfile.write('parent_pid = %d,\n' % (self.parent_pid,))
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            showIndent(outfile, level)
            outfile.write('custom_hash = "%s",\n' % (self.custom_hash,))
        if self.termination_reason is not None and 'termination_reason' not in already_processed:
            already_processed.append('termination_reason')
            showIndent(outfile, level)
            outfile.write('termination_reason = "%s",\n' % (self.termination_reason,))
        if self.commandline is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            showIndent(outfile, level)
            outfile.write('commandline = "%s",\n' % (self.commandline,))
        if self.monitor_reason is not None and 'monitor_reason' not in already_processed:
            already_processed.append('monitor_reason')
            showIndent(outfile, level)
            outfile.write('monitor_reason = "%s",\n' % (self.monitor_reason,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.parent_index is not None and 'parent_index' not in already_processed:
            already_processed.append('parent_index')
            showIndent(outfile, level)
            outfile.write('parent_index = %d,\n' % (self.parent_index,))
        if self.execution_status is not None and 'execution_status' not in already_processed:
            already_processed.append('execution_status')
            showIndent(outfile, level)
            outfile.write('execution_status = "%s",\n' % (self.execution_status,))
        if self.filesize is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            showIndent(outfile, level)
            outfile.write('filesize = %d,\n' % (self.filesize,))
        if self.termination_time is not None and 'termination_time' not in already_processed:
            already_processed.append('termination_time')
            showIndent(outfile, level)
            outfile.write('termination_time = "%s",\n' % (self.termination_time,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.start_time is not None and 'start_time' not in already_processed:
            already_processed.append('start_time')
            showIndent(outfile, level)
            outfile.write('start_time = "%s",\n' % (self.start_time,))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            showIndent(outfile, level)
            outfile.write('md5 = "%s",\n' % (self.md5,))
        if self.running_time is not None and 'running_time' not in already_processed:
            already_processed.append('running_time')
            showIndent(outfile, level)
            outfile.write('running_time = "%s",\n' % (self.running_time,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.stored_modified_files is not None:
            showIndent(outfile, level)
            outfile.write('stored_modified_files=model_.stored_modified_files(\n')
            self.stored_modified_files.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.mapped_modules is not None:
            showIndent(outfile, level)
            outfile.write('mapped_modules=model_.mapped_modules(\n')
            self.mapped_modules.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.filesystem_section is not None:
            showIndent(outfile, level)
            outfile.write('filesystem_section=model_.filesystem_section(\n')
            self.filesystem_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.registry_section is not None:
            showIndent(outfile, level)
            outfile.write('registry_section=model_.registry_section(\n')
            self.registry_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.process_section is not None:
            showIndent(outfile, level)
            outfile.write('process_section=model_.process_section(\n')
            self.process_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.virtualmemory_section is not None:
            showIndent(outfile, level)
            outfile.write('virtualmemory_section=model_.virtualmemory_section(\n')
            self.virtualmemory_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.filemapping_section is not None:
            showIndent(outfile, level)
            outfile.write('filemapping_section=model_.filemapping_section(\n')
            self.filemapping_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.thread_section is not None:
            showIndent(outfile, level)
            outfile.write('thread_section=model_.thread_section(\n')
            self.thread_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.window_section is not None:
            showIndent(outfile, level)
            outfile.write('window_section=model_.window_section(\n')
            self.window_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sysobject_section is not None:
            showIndent(outfile, level)
            outfile.write('sysobject_section=model_.sysobject_section(\n')
            self.sysobject_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.system_section is not None:
            showIndent(outfile, level)
            outfile.write('system_section=model_.system_section(\n')
            self.system_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.service_section is not None:
            showIndent(outfile, level)
            outfile.write('service_section=model_.service_section(\n')
            self.service_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.user_section is not None:
            showIndent(outfile, level)
            outfile.write('user_section=model_.user_section(\n')
            self.user_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.share_section is not None:
            showIndent(outfile, level)
            outfile.write('share_section=model_.share_section(\n')
            self.share_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.module_section is not None:
            showIndent(outfile, level)
            outfile.write('module_section=model_.module_section(\n')
            self.module_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.networkpacket_section is not None:
            showIndent(outfile, level)
            outfile.write('networkpacket_section=model_.networkpacket_section(\n')
            self.networkpacket_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.networkoperation_section is not None:
            showIndent(outfile, level)
            outfile.write('networkoperation_section=model_.networkoperation_section(\n')
            self.networkoperation_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.checkpoint_section is not None:
            showIndent(outfile, level)
            outfile.write('checkpoint_section=model_.checkpoint_section(\n')
            self.checkpoint_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.com_section is not None:
            showIndent(outfile, level)
            outfile.write('com_section=model_.com_section(\n')
            self.com_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.error_section is not None:
            showIndent(outfile, level)
            outfile.write('error_section=model_.error_section(\n')
            self.error_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.connection_section is not None:
            showIndent(outfile, level)
            outfile.write('connection_section=model_.connection_section(\n')
            self.connection_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.scanner_section is not None:
            showIndent(outfile, level)
            outfile.write('scanner_section=model_.scanner_section(\n')
            self.scanner_section.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.append('index')
            try:
                self.index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_type_seqno(self.index)    # validate type type_seqno
        value = find_attr_value_('sha1', node)
        if value is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            self.sha1 = value
        value = find_attr_value_('parent_pid', node)
        if value is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            try:
                self.parent_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('custom_hash', node)
        if value is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            self.custom_hash = value
        value = find_attr_value_('termination_reason', node)
        if value is not None and 'termination_reason' not in already_processed:
            already_processed.append('termination_reason')
            self.termination_reason = value
            self.validate_type_terminationreason(self.termination_reason)    # validate type type_terminationreason
        value = find_attr_value_('commandline', node)
        if value is not None and 'commandline' not in already_processed:
            already_processed.append('commandline')
            self.commandline = value
        value = find_attr_value_('monitor_reason', node)
        if value is not None and 'monitor_reason' not in already_processed:
            already_processed.append('monitor_reason')
            self.monitor_reason = value
            self.validate_type_monitorreason(self.monitor_reason)    # validate type type_monitorreason
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('parent_index', node)
        if value is not None and 'parent_index' not in already_processed:
            already_processed.append('parent_index')
            try:
                self.parent_index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_type_seqno(self.parent_index)    # validate type type_seqno
        value = find_attr_value_('execution_status', node)
        if value is not None and 'execution_status' not in already_processed:
            already_processed.append('execution_status')
            self.execution_status = value
        value = find_attr_value_('filesize', node)
        if value is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            try:
                self.filesize = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.filesize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('termination_time', node)
        if value is not None and 'termination_time' not in already_processed:
            already_processed.append('termination_time')
            self.termination_time = value
            self.validate_type_kerneltime(self.termination_time)    # validate type type_kerneltime
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('start_time', node)
        if value is not None and 'start_time' not in already_processed:
            already_processed.append('start_time')
            self.start_time = value
            self.validate_type_kerneltime(self.start_time)    # validate type type_kerneltime
        value = find_attr_value_('md5', node)
        if value is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            self.md5 = value
        value = find_attr_value_('running_time', node)
        if value is not None and 'running_time' not in already_processed:
            already_processed.append('running_time')
            self.running_time = value
            self.validate_type_kerneltime(self.running_time)    # validate type type_kerneltime
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'stored_modified_files':
            obj_ = stored_modified_files.factory()
            obj_.build(child_)
            self.set_stored_modified_files(obj_)
        elif nodeName_ == 'mapped_modules':
            obj_ = mapped_modules.factory()
            obj_.build(child_)
            self.set_mapped_modules(obj_)
        elif nodeName_ == 'filesystem_section':
            obj_ = filesystem_section.factory()
            obj_.build(child_)
            self.set_filesystem_section(obj_)
        elif nodeName_ == 'registry_section':
            obj_ = registry_section.factory()
            obj_.build(child_)
            self.set_registry_section(obj_)
        elif nodeName_ == 'process_section':
            obj_ = process_section.factory()
            obj_.build(child_)
            self.set_process_section(obj_)
        elif nodeName_ == 'virtualmemory_section':
            obj_ = virtualmemory_section.factory()
            obj_.build(child_)
            self.set_virtualmemory_section(obj_)
        elif nodeName_ == 'filemapping_section':
            obj_ = filemapping_section.factory()
            obj_.build(child_)
            self.set_filemapping_section(obj_)
        elif nodeName_ == 'thread_section':
            obj_ = thread_section.factory()
            obj_.build(child_)
            self.set_thread_section(obj_)
        elif nodeName_ == 'window_section':
            obj_ = window_section.factory()
            obj_.build(child_)
            self.set_window_section(obj_)
        elif nodeName_ == 'sysobject_section':
            obj_ = sysobject_section.factory()
            obj_.build(child_)
            self.set_sysobject_section(obj_)
        elif nodeName_ == 'system_section':
            obj_ = system_section.factory()
            obj_.build(child_)
            self.set_system_section(obj_)
        elif nodeName_ == 'service_section':
            obj_ = service_section.factory()
            obj_.build(child_)
            self.set_service_section(obj_)
        elif nodeName_ == 'user_section':
            obj_ = user_section.factory()
            obj_.build(child_)
            self.set_user_section(obj_)
        elif nodeName_ == 'share_section':
            obj_ = share_section.factory()
            obj_.build(child_)
            self.set_share_section(obj_)
        elif nodeName_ == 'module_section':
            obj_ = module_section.factory()
            obj_.build(child_)
            self.set_module_section(obj_)
        elif nodeName_ == 'networkpacket_section':
            obj_ = networkpacket_section.factory()
            obj_.build(child_)
            self.set_networkpacket_section(obj_)
        elif nodeName_ == 'networkoperation_section':
            obj_ = networkoperation_section.factory()
            obj_.build(child_)
            self.set_networkoperation_section(obj_)
        elif nodeName_ == 'checkpoint_section':
            obj_ = checkpoint_section.factory()
            obj_.build(child_)
            self.set_checkpoint_section(obj_)
        elif nodeName_ == 'com_section':
            obj_ = com_section.factory()
            obj_.build(child_)
            self.set_com_section(obj_)
        elif nodeName_ == 'error_section':
            obj_ = error_section.factory()
            obj_.build(child_)
            self.set_error_section(obj_)
        elif nodeName_ == 'connection_section':
            obj_ = connection_section.factory()
            obj_.build(child_)
            self.set_connection_section(obj_)
        elif nodeName_ == 'scanner_section':
            obj_ = scanner_section.factory()
            obj_.build(child_)
            self.set_scanner_section(obj_)
# end class process


class stored_modified_files(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, stored_modified_file=None, stored_created_file=None):
        self.stored_modified_file = stored_modified_file
        self.stored_created_file = stored_created_file
    def factory(*args_, **kwargs_):
        if stored_modified_files.subclass:
            return stored_modified_files.subclass(*args_, **kwargs_)
        else:
            return stored_modified_files(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_stored_modified_file(self): return self.stored_modified_file
    def set_stored_modified_file(self, stored_modified_file): self.stored_modified_file = stored_modified_file
    def get_stored_created_file(self): return self.stored_created_file
    def set_stored_created_file(self, stored_created_file): self.stored_created_file = stored_created_file
    def export(self, outfile, level, namespace_='', name_='stored_modified_files', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stored_modified_files')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='stored_modified_files'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='stored_modified_files', fromsubclass_=False):
        if self.stored_modified_file is not None:
            self.stored_modified_file.export(outfile, level, namespace_, name_='stored_modified_file')
        if self.stored_created_file is not None:
            self.stored_created_file.export(outfile, level, namespace_, name_='stored_created_file')
    def hasContent_(self):
        if (
            self.stored_modified_file is not None or
            self.stored_created_file is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='stored_modified_files'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.stored_modified_file is not None:
            showIndent(outfile, level)
            outfile.write('stored_modified_file=model_.stored_modified_file(\n')
            self.stored_modified_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.stored_created_file is not None:
            showIndent(outfile, level)
            outfile.write('stored_created_file=model_.stored_created_file(\n')
            self.stored_created_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'stored_modified_file':
            obj_ = stored_modified_file.factory()
            obj_.build(child_)
            self.set_stored_modified_file(obj_)
        elif nodeName_ == 'stored_created_file':
            obj_ = stored_created_file.factory()
            obj_.build(child_)
            self.set_stored_created_file(obj_)
# end class stored_modified_files


class stored_modified_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, custom_hash=None, sha1=None, filesize=None, md5=None, filename=None):
        self.custom_hash = _cast(None, custom_hash)
        self.sha1 = _cast(None, sha1)
        self.filesize = _cast(int, filesize)
        self.md5 = _cast(None, md5)
        self.filename = _cast(None, filename)
        pass
    def factory(*args_, **kwargs_):
        if stored_modified_file.subclass:
            return stored_modified_file.subclass(*args_, **kwargs_)
        else:
            return stored_modified_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_custom_hash(self): return self.custom_hash
    def set_custom_hash(self, custom_hash): self.custom_hash = custom_hash
    def get_sha1(self): return self.sha1
    def set_sha1(self, sha1): self.sha1 = sha1
    def get_filesize(self): return self.filesize
    def set_filesize(self, filesize): self.filesize = filesize
    def get_md5(self): return self.md5
    def set_md5(self, md5): self.md5 = md5
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def export(self, outfile, level, namespace_='', name_='stored_modified_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stored_modified_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='stored_modified_file'):
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            outfile.write(' custom_hash=%s' % (self.gds_format_string(quote_attrib(self.custom_hash).encode(ExternalEncoding), input_name='custom_hash'), ))
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            outfile.write(' sha1=%s' % (self.gds_format_string(quote_attrib(self.sha1).encode(ExternalEncoding), input_name='sha1'), ))
        if self.filesize is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            outfile.write(' filesize="%s"' % self.gds_format_integer(self.filesize, input_name='filesize'))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            outfile.write(' md5=%s' % (self.gds_format_string(quote_attrib(self.md5).encode(ExternalEncoding), input_name='md5'), ))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='stored_modified_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='stored_modified_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            showIndent(outfile, level)
            outfile.write('custom_hash = "%s",\n' % (self.custom_hash,))
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            showIndent(outfile, level)
            outfile.write('sha1 = "%s",\n' % (self.sha1,))
        if self.filesize is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            showIndent(outfile, level)
            outfile.write('filesize = %d,\n' % (self.filesize,))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            showIndent(outfile, level)
            outfile.write('md5 = "%s",\n' % (self.md5,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('custom_hash', node)
        if value is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            self.custom_hash = value
        value = find_attr_value_('sha1', node)
        if value is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            self.sha1 = value
        value = find_attr_value_('filesize', node)
        if value is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            try:
                self.filesize = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.filesize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('md5', node)
        if value is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            self.md5 = value
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class stored_modified_file


class stored_created_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, custom_hash=None, sha1=None, filesize=None, md5=None, filename=None):
        self.custom_hash = _cast(None, custom_hash)
        self.sha1 = _cast(None, sha1)
        self.filesize = _cast(int, filesize)
        self.md5 = _cast(None, md5)
        self.filename = _cast(None, filename)
        pass
    def factory(*args_, **kwargs_):
        if stored_created_file.subclass:
            return stored_created_file.subclass(*args_, **kwargs_)
        else:
            return stored_created_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_custom_hash(self): return self.custom_hash
    def set_custom_hash(self, custom_hash): self.custom_hash = custom_hash
    def get_sha1(self): return self.sha1
    def set_sha1(self, sha1): self.sha1 = sha1
    def get_filesize(self): return self.filesize
    def set_filesize(self, filesize): self.filesize = filesize
    def get_md5(self): return self.md5
    def set_md5(self, md5): self.md5 = md5
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def export(self, outfile, level, namespace_='', name_='stored_created_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='stored_created_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='stored_created_file'):
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            outfile.write(' custom_hash=%s' % (self.gds_format_string(quote_attrib(self.custom_hash).encode(ExternalEncoding), input_name='custom_hash'), ))
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            outfile.write(' sha1=%s' % (self.gds_format_string(quote_attrib(self.sha1).encode(ExternalEncoding), input_name='sha1'), ))
        if self.filesize is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            outfile.write(' filesize="%s"' % self.gds_format_integer(self.filesize, input_name='filesize'))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            outfile.write(' md5=%s' % (self.gds_format_string(quote_attrib(self.md5).encode(ExternalEncoding), input_name='md5'), ))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='stored_created_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='stored_created_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.custom_hash is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            showIndent(outfile, level)
            outfile.write('custom_hash = "%s",\n' % (self.custom_hash,))
        if self.sha1 is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            showIndent(outfile, level)
            outfile.write('sha1 = "%s",\n' % (self.sha1,))
        if self.filesize is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            showIndent(outfile, level)
            outfile.write('filesize = %d,\n' % (self.filesize,))
        if self.md5 is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            showIndent(outfile, level)
            outfile.write('md5 = "%s",\n' % (self.md5,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('custom_hash', node)
        if value is not None and 'custom_hash' not in already_processed:
            already_processed.append('custom_hash')
            self.custom_hash = value
        value = find_attr_value_('sha1', node)
        if value is not None and 'sha1' not in already_processed:
            already_processed.append('sha1')
            self.sha1 = value
        value = find_attr_value_('filesize', node)
        if value is not None and 'filesize' not in already_processed:
            already_processed.append('filesize')
            try:
                self.filesize = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.filesize < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('md5', node)
        if value is not None and 'md5' not in already_processed:
            already_processed.append('md5')
            self.md5 = value
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class stored_created_file


class mapped_modules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mapped_module=None):
        if mapped_module:
            self.mapped_module = mapped_module
        else:
            self.mapped_module = []
    def factory(*args_, **kwargs_):
        if mapped_modules.subclass:
            return mapped_modules.subclass(*args_, **kwargs_)
        else:
            return mapped_modules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mapped_module(self): return self.mapped_module
    def set_mapped_module(self, mapped_module): self.mapped_module = mapped_module
    def export(self, outfile, level, namespace_='', name_='mapped_modules', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mapped_modules')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mapped_modules'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='mapped_modules', fromsubclass_=False):
        if self.mapped_module is not None:
            for mapped_module_ in self.mapped_module:
                mapped_module_.export(outfile, level, namespace_, name_='mapped_module', )
    def hasContent_(self):
        if (
            self.mapped_module is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='mapped_modules'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mapped_module is not None:
            showIndent(outfile, level)
            outfile.write('mapped_module=model_.mapped_module(\n')
            self.mapped_module.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mapped_module':
            obj_ = mapped_module.factory()
            obj_.build(child_)
            self.mapped_module.append(obj_)
# end class mapped_modules


class mapped_module(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, known=None, size=None, base_address=None, filename=None):
        self.known = _cast(bool, known)
        self.size = _cast(int, size)
        self.base_address = _cast(None, base_address)
        self.filename = _cast(None, filename)
        pass
    def factory(*args_, **kwargs_):
        if mapped_module.subclass:
            return mapped_module.subclass(*args_, **kwargs_)
        else:
            return mapped_module(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_known(self): return self.known
    def set_known(self, known): self.known = known
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def get_base_address(self): return self.base_address
    def set_base_address(self, base_address): self.base_address = base_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def export(self, outfile, level, namespace_='', name_='mapped_module', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mapped_module')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mapped_module'):
        if self.known is not None and 'known' not in already_processed:
            already_processed.append('known')
            outfile.write(' known="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.known)), input_name='known'))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
        if self.base_address is not None and 'base_address' not in already_processed:
            already_processed.append('base_address')
            outfile.write(' base_address=%s' % (quote_attrib(self.base_address), ))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='mapped_module', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='mapped_module'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.known is not None and 'known' not in already_processed:
            already_processed.append('known')
            showIndent(outfile, level)
            outfile.write('known = %s,\n' % (self.known,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
        if self.base_address is not None and 'base_address' not in already_processed:
            already_processed.append('base_address')
            showIndent(outfile, level)
            outfile.write('base_address = "%s",\n' % (self.base_address,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('known', node)
        if value is not None and 'known' not in already_processed:
            already_processed.append('known')
            if value in ('true', '1'):
                self.known = True
            elif value in ('false', '0'):
                self.known = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.append('size')
            try:
                self.size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('base_address', node)
        if value is not None and 'base_address' not in already_processed:
            already_processed.append('base_address')
            self.base_address = value
            self.validate_type_hexaddr(self.base_address)    # validate type type_hexaddr
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mapped_module


class connection_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, connection=None):
        if connection is None:
            self.connection = []
        else:
            self.connection = connection
    def factory(*args_, **kwargs_):
        if connection_section.subclass:
            return connection_section.subclass(*args_, **kwargs_)
        else:
            return connection_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_connection(self): return self.connection
    def set_connection(self, connection): self.connection = connection
    def add_connection(self, value): self.connection.append(value)
    def insert_connection(self, index, value): self.connection[index] = value
    def export(self, outfile, level, namespace_='', name_='connection_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connection_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connection_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='connection_section', fromsubclass_=False):
        for connection_ in self.connection:
            connection_.export(outfile, level, namespace_, name_='connection')
    def hasContent_(self):
        if (
            self.connection
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connection_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('connection=[\n')
        level += 1
        for connection_ in self.connection:
            showIndent(outfile, level)
            outfile.write('model_.connection(\n')
            connection_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'connection':
            obj_ = connection.factory()
            obj_.build(child_)
            self.connection.append(obj_)
# end class connection_section


class connection(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, direction=None, protocol_l7=None, local_port=None, protocol_l4=None, remote_port=None, remote_hostname=None, protocol_l3=None, sandbox_action=None, remote_ip=None, http_command=None, http_header=None, ftp_data=None, ftp_command=None, irc_data=None, irc_notice=None, irc_channel=None, irc_private_message=None, smtp_data=None, mail=None, mail_data_line=None, ident_request=None, ident_response=None, ip_to_name=None, name_to_ip=None, connection_packets=None, connection_traffic=None):
        self.direction = _cast(None, direction)
        self.protocol_l7 = _cast(None, protocol_l7)
        self.local_port = _cast(int, local_port)
        self.protocol_l4 = _cast(None, protocol_l4)
        self.remote_port = _cast(int, remote_port)
        self.remote_hostname = _cast(None, remote_hostname)
        self.protocol_l3 = _cast(None, protocol_l3)
        self.sandbox_action = _cast(None, sandbox_action)
        self.remote_ip = _cast(None, remote_ip)
        if http_command is None:
            self.http_command = []
        else:
            self.http_command = http_command
        if http_header is None:
            self.http_header = []
        else:
            self.http_header = http_header
        self.ftp_data = ftp_data
        if ftp_command is None:
            self.ftp_command = []
        else:
            self.ftp_command = ftp_command
        self.irc_data = irc_data
        if irc_notice is None:
            self.irc_notice = []
        else:
            self.irc_notice = irc_notice
        if irc_channel is None:
            self.irc_channel = []
        else:
            self.irc_channel = irc_channel
        if irc_private_message is None:
            self.irc_private_message = []
        else:
            self.irc_private_message = irc_private_message
        self.smtp_data = smtp_data
        if mail is None:
            self.mail = []
        else:
            self.mail = mail
        if mail_data_line is None:
            self.mail_data_line = []
        else:
            self.mail_data_line = mail_data_line
        if ident_request is None:
            self.ident_request = []
        else:
            self.ident_request = ident_request
        if ident_response is None:
            self.ident_response = []
        else:
            self.ident_response = ident_response
        if ip_to_name is None:
            self.ip_to_name = []
        else:
            self.ip_to_name = ip_to_name
        if name_to_ip is None:
            self.name_to_ip = []
        else:
            self.name_to_ip = name_to_ip
        self.connection_packets = connection_packets
        self.connection_traffic = connection_traffic
    def factory(*args_, **kwargs_):
        if connection.subclass:
            return connection.subclass(*args_, **kwargs_)
        else:
            return connection(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_http_command(self): return self.http_command
    def set_http_command(self, http_command): self.http_command = http_command
    def add_http_command(self, value): self.http_command.append(value)
    def insert_http_command(self, index, value): self.http_command[index] = value
    def get_http_header(self): return self.http_header
    def set_http_header(self, http_header): self.http_header = http_header
    def add_http_header(self, value): self.http_header.append(value)
    def insert_http_header(self, index, value): self.http_header[index] = value
    def get_ftp_data(self): return self.ftp_data
    def set_ftp_data(self, ftp_data): self.ftp_data = ftp_data
    def get_ftp_command(self): return self.ftp_command
    def set_ftp_command(self, ftp_command): self.ftp_command = ftp_command
    def add_ftp_command(self, value): self.ftp_command.append(value)
    def insert_ftp_command(self, index, value): self.ftp_command[index] = value
    def get_irc_data(self): return self.irc_data
    def set_irc_data(self, irc_data): self.irc_data = irc_data
    def get_irc_notice(self): return self.irc_notice
    def set_irc_notice(self, irc_notice): self.irc_notice = irc_notice
    def add_irc_notice(self, value): self.irc_notice.append(value)
    def insert_irc_notice(self, index, value): self.irc_notice[index] = value
    def get_irc_channel(self): return self.irc_channel
    def set_irc_channel(self, irc_channel): self.irc_channel = irc_channel
    def add_irc_channel(self, value): self.irc_channel.append(value)
    def insert_irc_channel(self, index, value): self.irc_channel[index] = value
    def get_irc_private_message(self): return self.irc_private_message
    def set_irc_private_message(self, irc_private_message): self.irc_private_message = irc_private_message
    def add_irc_private_message(self, value): self.irc_private_message.append(value)
    def insert_irc_private_message(self, index, value): self.irc_private_message[index] = value
    def get_smtp_data(self): return self.smtp_data
    def set_smtp_data(self, smtp_data): self.smtp_data = smtp_data
    def get_mail(self): return self.mail
    def set_mail(self, mail): self.mail = mail
    def add_mail(self, value): self.mail.append(value)
    def insert_mail(self, index, value): self.mail[index] = value
    def get_mail_data_line(self): return self.mail_data_line
    def set_mail_data_line(self, mail_data_line): self.mail_data_line = mail_data_line
    def add_mail_data_line(self, value): self.mail_data_line.append(value)
    def insert_mail_data_line(self, index, value): self.mail_data_line[index] = value
    def get_ident_request(self): return self.ident_request
    def set_ident_request(self, ident_request): self.ident_request = ident_request
    def add_ident_request(self, value): self.ident_request.append(value)
    def insert_ident_request(self, index, value): self.ident_request[index] = value
    def get_ident_response(self): return self.ident_response
    def set_ident_response(self, ident_response): self.ident_response = ident_response
    def add_ident_response(self, value): self.ident_response.append(value)
    def insert_ident_response(self, index, value): self.ident_response[index] = value
    def get_ip_to_name(self): return self.ip_to_name
    def set_ip_to_name(self, ip_to_name): self.ip_to_name = ip_to_name
    def add_ip_to_name(self, value): self.ip_to_name.append(value)
    def insert_ip_to_name(self, index, value): self.ip_to_name[index] = value
    def get_name_to_ip(self): return self.name_to_ip
    def set_name_to_ip(self, name_to_ip): self.name_to_ip = name_to_ip
    def add_name_to_ip(self, value): self.name_to_ip.append(value)
    def insert_name_to_ip(self, index, value): self.name_to_ip[index] = value
    def get_connection_packets(self): return self.connection_packets
    def set_connection_packets(self, connection_packets): self.connection_packets = connection_packets
    def get_connection_traffic(self): return self.connection_traffic
    def set_connection_traffic(self, connection_traffic): self.connection_traffic = connection_traffic
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def validate_type_networkdirection(self, value):
        # Validate type type_networkdirection, a restriction on xs:string.
        pass
    def get_protocol_l7(self): return self.protocol_l7
    def set_protocol_l7(self, protocol_l7): self.protocol_l7 = protocol_l7
    def validate_type_l7prot(self, value):
        # Validate type type_l7prot, a restriction on xs:string.
        pass
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def get_protocol_l4(self): return self.protocol_l4
    def set_protocol_l4(self, protocol_l4): self.protocol_l4 = protocol_l4
    def validate_type_l4prot(self, value):
        # Validate type type_l4prot, a restriction on xs:string.
        pass
    def get_remote_port(self): return self.remote_port
    def set_remote_port(self, remote_port): self.remote_port = remote_port
    def get_remote_hostname(self): return self.remote_hostname
    def set_remote_hostname(self, remote_hostname): self.remote_hostname = remote_hostname
    def get_protocol_l3(self): return self.protocol_l3
    def set_protocol_l3(self, protocol_l3): self.protocol_l3 = protocol_l3
    def validate_type_l3prot(self, value):
        # Validate type type_l3prot, a restriction on xs:string.
        pass
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_remote_ip(self): return self.remote_ip
    def set_remote_ip(self, remote_ip): self.remote_ip = remote_ip
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='connection', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connection')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connection'):
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.protocol_l7 is not None and 'protocol_l7' not in already_processed:
            already_processed.append('protocol_l7')
            outfile.write(' protocol_l7=%s' % (quote_attrib(self.protocol_l7), ))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            outfile.write(' protocol_l4=%s' % (quote_attrib(self.protocol_l4), ))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            outfile.write(' remote_port="%s"' % self.gds_format_integer(self.remote_port, input_name='remote_port'))
        if self.remote_hostname is not None and 'remote_hostname' not in already_processed:
            already_processed.append('remote_hostname')
            outfile.write(' remote_hostname=%s' % (self.gds_format_string(quote_attrib(self.remote_hostname).encode(ExternalEncoding), input_name='remote_hostname'), ))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            outfile.write(' protocol_l3=%s' % (quote_attrib(self.protocol_l3), ))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            outfile.write(' remote_ip=%s' % (quote_attrib(self.remote_ip), ))
    def exportChildren(self, outfile, level, namespace_='', name_='connection', fromsubclass_=False):
        for http_command_ in self.http_command:
            http_command_.export(outfile, level, namespace_, name_='http_command')
        for http_header_ in self.http_header:
            http_header_.export(outfile, level, namespace_, name_='http_header')
        if self.ftp_data is not None:
            self.ftp_data.export(outfile, level, namespace_, name_='ftp_data')
        for ftp_command_ in self.ftp_command:
            ftp_command_.export(outfile, level, namespace_, name_='ftp_command')
        if self.irc_data is not None:
            self.irc_data.export(outfile, level, namespace_, name_='irc_data')
        for irc_notice_ in self.irc_notice:
            irc_notice_.export(outfile, level, namespace_, name_='irc_notice')
        for irc_channel_ in self.irc_channel:
            irc_channel_.export(outfile, level, namespace_, name_='irc_channel')
        for irc_private_message_ in self.irc_private_message:
            irc_private_message_.export(outfile, level, namespace_, name_='irc_private_message')
        if self.smtp_data is not None:
            self.smtp_data.export(outfile, level, namespace_, name_='smtp_data')
        for mail_ in self.mail:
            mail_.export(outfile, level, namespace_, name_='mail')
        for mail_data_line_ in self.mail_data_line:
            mail_data_line_.export(outfile, level, namespace_, name_='mail_data_line')
        for ident_request_ in self.ident_request:
            ident_request_.export(outfile, level, namespace_, name_='ident_request')
        for ident_response_ in self.ident_response:
            ident_response_.export(outfile, level, namespace_, name_='ident_response')
        for ip_to_name_ in self.ip_to_name:
            ip_to_name_.export(outfile, level, namespace_, name_='ip_to_name')
        for name_to_ip_ in self.name_to_ip:
            name_to_ip_.export(outfile, level, namespace_, name_='name_to_ip')
        if self.connection_packets is not None:
            self.connection_packets.export(outfile, level, namespace_, name_='connection_packets')
        if self.connection_traffic is not None:
            self.connection_traffic.export(outfile, level, namespace_, name_='connection_traffic')
    def hasContent_(self):
        if (
            self.http_command or
            self.http_header or
            self.ftp_data is not None or
            self.ftp_command or
            self.irc_data is not None or
            self.irc_notice or
            self.irc_channel or
            self.irc_private_message or
            self.smtp_data is not None or
            self.mail or
            self.mail_data_line or
            self.ident_request or
            self.ident_response or
            self.ip_to_name or
            self.name_to_ip or
            self.connection_packets is not None or
            self.connection_traffic is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connection'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            showIndent(outfile, level)
            outfile.write('direction = "%s",\n' % (self.direction,))
        if self.protocol_l7 is not None and 'protocol_l7' not in already_processed:
            already_processed.append('protocol_l7')
            showIndent(outfile, level)
            outfile.write('protocol_l7 = "%s",\n' % (self.protocol_l7,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            showIndent(outfile, level)
            outfile.write('protocol_l4 = "%s",\n' % (self.protocol_l4,))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            showIndent(outfile, level)
            outfile.write('remote_port = %d,\n' % (self.remote_port,))
        if self.remote_hostname is not None and 'remote_hostname' not in already_processed:
            already_processed.append('remote_hostname')
            showIndent(outfile, level)
            outfile.write('remote_hostname = "%s",\n' % (self.remote_hostname,))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            showIndent(outfile, level)
            outfile.write('protocol_l3 = "%s",\n' % (self.protocol_l3,))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            showIndent(outfile, level)
            outfile.write('remote_ip = "%s",\n' % (self.remote_ip,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('http_command=[\n')
        level += 1
        for http_command_ in self.http_command:
            showIndent(outfile, level)
            outfile.write('model_.http_command(\n')
            http_command_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('http_header=[\n')
        level += 1
        for http_header_ in self.http_header:
            showIndent(outfile, level)
            outfile.write('model_.http_header(\n')
            http_header_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ftp_data is not None:
            showIndent(outfile, level)
            outfile.write('ftp_data=model_.ftp_data(\n')
            self.ftp_data.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ftp_command=[\n')
        level += 1
        for ftp_command_ in self.ftp_command:
            showIndent(outfile, level)
            outfile.write('model_.ftp_command(\n')
            ftp_command_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.irc_data is not None:
            showIndent(outfile, level)
            outfile.write('irc_data=model_.irc_data(\n')
            self.irc_data.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('irc_notice=[\n')
        level += 1
        for irc_notice_ in self.irc_notice:
            showIndent(outfile, level)
            outfile.write('model_.irc_notice(\n')
            irc_notice_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('irc_channel=[\n')
        level += 1
        for irc_channel_ in self.irc_channel:
            showIndent(outfile, level)
            outfile.write('model_.irc_channel(\n')
            irc_channel_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('irc_private_message=[\n')
        level += 1
        for irc_private_message_ in self.irc_private_message:
            showIndent(outfile, level)
            outfile.write('model_.irc_private_message(\n')
            irc_private_message_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.smtp_data is not None:
            showIndent(outfile, level)
            outfile.write('smtp_data=model_.smtp_data(\n')
            self.smtp_data.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('mail=[\n')
        level += 1
        for mail_ in self.mail:
            showIndent(outfile, level)
            outfile.write('model_.mail(\n')
            mail_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('mail_data_line=[\n')
        level += 1
        for mail_data_line_ in self.mail_data_line:
            showIndent(outfile, level)
            outfile.write('model_.mail_data_line(\n')
            mail_data_line_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ident_request=[\n')
        level += 1
        for ident_request_ in self.ident_request:
            showIndent(outfile, level)
            outfile.write('model_.ident_request(\n')
            ident_request_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ident_response=[\n')
        level += 1
        for ident_response_ in self.ident_response:
            showIndent(outfile, level)
            outfile.write('model_.ident_response(\n')
            ident_response_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ip_to_name=[\n')
        level += 1
        for ip_to_name_ in self.ip_to_name:
            showIndent(outfile, level)
            outfile.write('model_.ip_to_name(\n')
            ip_to_name_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('name_to_ip=[\n')
        level += 1
        for name_to_ip_ in self.name_to_ip:
            showIndent(outfile, level)
            outfile.write('model_.name_to_ip(\n')
            name_to_ip_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.connection_packets is not None:
            showIndent(outfile, level)
            outfile.write('connection_packets=model_.connection_packets(\n')
            self.connection_packets.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.connection_traffic is not None:
            showIndent(outfile, level)
            outfile.write('connection_traffic=model_.connection_traffic(\n')
            self.connection_traffic.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            self.direction = value
            self.validate_type_networkdirection(self.direction)    # validate type type_networkdirection
        value = find_attr_value_('protocol_l7', node)
        if value is not None and 'protocol_l7' not in already_processed:
            already_processed.append('protocol_l7')
            self.protocol_l7 = value
            self.validate_type_l7prot(self.protocol_l7)    # validate type type_l7prot
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protocol_l4', node)
        if value is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            self.protocol_l4 = value
            self.validate_type_l4prot(self.protocol_l4)    # validate type type_l4prot
        value = find_attr_value_('remote_port', node)
        if value is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            try:
                self.remote_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_hostname', node)
        if value is not None and 'remote_hostname' not in already_processed:
            already_processed.append('remote_hostname')
            self.remote_hostname = value
        value = find_attr_value_('protocol_l3', node)
        if value is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            self.protocol_l3 = value
            self.validate_type_l3prot(self.protocol_l3)    # validate type type_l3prot
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('remote_ip', node)
        if value is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            self.remote_ip = value
            self.validate_type_ip(self.remote_ip)    # validate type type_ip
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'http_command':
            obj_ = http_command.factory()
            obj_.build(child_)
            self.http_command.append(obj_)
        elif nodeName_ == 'http_header':
            obj_ = http_header.factory()
            obj_.build(child_)
            self.http_header.append(obj_)
        elif nodeName_ == 'ftp_data':
            obj_ = ftp_data.factory()
            obj_.build(child_)
            self.set_ftp_data(obj_)
        elif nodeName_ == 'ftp_command':
            obj_ = ftp_command.factory()
            obj_.build(child_)
            self.ftp_command.append(obj_)
        elif nodeName_ == 'irc_data':
            obj_ = irc_data.factory()
            obj_.build(child_)
            self.set_irc_data(obj_)
        elif nodeName_ == 'irc_notice':
            obj_ = irc_notice.factory()
            obj_.build(child_)
            self.irc_notice.append(obj_)
        elif nodeName_ == 'irc_channel':
            obj_ = irc_channel.factory()
            obj_.build(child_)
            self.irc_channel.append(obj_)
        elif nodeName_ == 'irc_private_message':
            obj_ = irc_private_message.factory()
            obj_.build(child_)
            self.irc_private_message.append(obj_)
        elif nodeName_ == 'smtp_data':
            obj_ = smtp_data.factory()
            obj_.build(child_)
            self.set_smtp_data(obj_)
        elif nodeName_ == 'mail':
            obj_ = mail.factory()
            obj_.build(child_)
            self.mail.append(obj_)
        elif nodeName_ == 'mail_data_line':
            obj_ = mail_data_line.factory()
            obj_.build(child_)
            self.mail_data_line.append(obj_)
        elif nodeName_ == 'ident_request':
            obj_ = ident_request.factory()
            obj_.build(child_)
            self.ident_request.append(obj_)
        elif nodeName_ == 'ident_response':
            obj_ = ident_response.factory()
            obj_.build(child_)
            self.ident_response.append(obj_)
        elif nodeName_ == 'ip_to_name':
            obj_ = ip_to_name.factory()
            obj_.build(child_)
            self.ip_to_name.append(obj_)
        elif nodeName_ == 'name_to_ip':
            obj_ = name_to_ip.factory()
            obj_.build(child_)
            self.name_to_ip.append(obj_)
        elif nodeName_ == 'connection_packets':
            obj_ = connection_packets.factory()
            obj_.build(child_)
            self.set_connection_packets(obj_)
        elif nodeName_ == 'connection_traffic':
            obj_ = connection_traffic.factory()
            obj_.build(child_)
            self.set_connection_traffic(obj_)
# end class connection


class ip_to_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, result_name=None, request_address=None):
        self.result_name = _cast(None, result_name)
        self.request_address = _cast(None, request_address)
        pass
    def factory(*args_, **kwargs_):
        if ip_to_name.subclass:
            return ip_to_name.subclass(*args_, **kwargs_)
        else:
            return ip_to_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_result_name(self): return self.result_name
    def set_result_name(self, result_name): self.result_name = result_name
    def get_request_address(self): return self.request_address
    def set_request_address(self, request_address): self.request_address = request_address
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='ip_to_name', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ip_to_name')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ip_to_name'):
        if self.result_name is not None and 'result_name' not in already_processed:
            already_processed.append('result_name')
            outfile.write(' result_name=%s' % (self.gds_format_string(quote_attrib(self.result_name).encode(ExternalEncoding), input_name='result_name'), ))
        if self.request_address is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            outfile.write(' request_address=%s' % (quote_attrib(self.request_address), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ip_to_name', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ip_to_name'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.result_name is not None and 'result_name' not in already_processed:
            already_processed.append('result_name')
            showIndent(outfile, level)
            outfile.write('result_name = "%s",\n' % (self.result_name,))
        if self.request_address is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            showIndent(outfile, level)
            outfile.write('request_address = "%s",\n' % (self.request_address,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('result_name', node)
        if value is not None and 'result_name' not in already_processed:
            already_processed.append('result_name')
            self.result_name = value
        value = find_attr_value_('request_address', node)
        if value is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            self.request_address = value
            self.validate_type_ip(self.request_address)    # validate type type_ip
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ip_to_name


class name_to_ip(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, result_addresses=None, request_name=None):
        self.result_addresses = _cast(None, result_addresses)
        self.request_name = _cast(None, request_name)
        pass
    def factory(*args_, **kwargs_):
        if name_to_ip.subclass:
            return name_to_ip.subclass(*args_, **kwargs_)
        else:
            return name_to_ip(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_result_addresses(self): return self.result_addresses
    def set_result_addresses(self, result_addresses): self.result_addresses = result_addresses
    def get_request_name(self): return self.request_name
    def set_request_name(self, request_name): self.request_name = request_name
    def export(self, outfile, level, namespace_='', name_='name_to_ip', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='name_to_ip')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='name_to_ip'):
        if self.result_addresses is not None and 'result_addresses' not in already_processed:
            already_processed.append('result_addresses')
            outfile.write(' result_addresses=%s' % (self.gds_format_string(quote_attrib(self.result_addresses).encode(ExternalEncoding), input_name='result_addresses'), ))
        if self.request_name is not None and 'request_name' not in already_processed:
            already_processed.append('request_name')
            outfile.write(' request_name=%s' % (self.gds_format_string(quote_attrib(self.request_name).encode(ExternalEncoding), input_name='request_name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='name_to_ip', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='name_to_ip'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.result_addresses is not None and 'result_addresses' not in already_processed:
            already_processed.append('result_addresses')
            showIndent(outfile, level)
            outfile.write('result_addresses = "%s",\n' % (self.result_addresses,))
        if self.request_name is not None and 'request_name' not in already_processed:
            already_processed.append('request_name')
            showIndent(outfile, level)
            outfile.write('request_name = "%s",\n' % (self.request_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('result_addresses', node)
        if value is not None and 'result_addresses' not in already_processed:
            already_processed.append('result_addresses')
            self.result_addresses = value
        value = find_attr_value_('request_name', node)
        if value is not None and 'request_name' not in already_processed:
            already_processed.append('request_name')
            self.request_name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class name_to_ip


class http_command(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, url=None, version=None, method=None):
        self.url = _cast(None, url)
        self.version = _cast(None, version)
        self.method = _cast(None, method)
        pass
    def factory(*args_, **kwargs_):
        if http_command.subclass:
            return http_command.subclass(*args_, **kwargs_)
        else:
            return http_command(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def validate_type_url(self, value):
        # Validate type type_url, a restriction on xs:string.
        pass
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_method(self): return self.method
    def set_method(self, method): self.method = method
    def validate_type_httpmethod(self, value):
        # Validate type type_httpmethod, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='http_command', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='http_command')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='http_command'):
        if self.url is not None and 'url' not in already_processed:
            already_processed.append('url')
            outfile.write(' url=%s' % (quote_attrib(self.url), ))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            outfile.write(' version=%s' % (self.gds_format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.method is not None and 'method' not in already_processed:
            already_processed.append('method')
            outfile.write(' method=%s' % (quote_attrib(self.method), ))
    def exportChildren(self, outfile, level, namespace_='', name_='http_command', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='http_command'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.url is not None and 'url' not in already_processed:
            already_processed.append('url')
            showIndent(outfile, level)
            outfile.write('url = "%s",\n' % (self.url,))
        if self.version is not None and 'version' not in already_processed:
            already_processed.append('version')
            showIndent(outfile, level)
            outfile.write('version = "%s",\n' % (self.version,))
        if self.method is not None and 'method' not in already_processed:
            already_processed.append('method')
            showIndent(outfile, level)
            outfile.write('method = "%s",\n' % (self.method,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('url', node)
        if value is not None and 'url' not in already_processed:
            already_processed.append('url')
            self.url = value
            self.validate_type_url(self.url)    # validate type type_url
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.append('version')
            self.version = value
        value = find_attr_value_('method', node)
        if value is not None and 'method' not in already_processed:
            already_processed.append('method')
            self.method = value
            self.validate_type_httpmethod(self.method)    # validate type type_httpmethod
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class http_command


class http_header(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None):
        self.header = _cast(None, header)
        pass
    def factory(*args_, **kwargs_):
        if http_header.subclass:
            return http_header.subclass(*args_, **kwargs_)
        else:
            return http_header(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def export(self, outfile, level, namespace_='', name_='http_header', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='http_header')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='http_header'):
        if self.header is not None and 'header' not in already_processed:
            already_processed.append('header')
            outfile.write(' header=%s' % (self.gds_format_string(quote_attrib(self.header).encode(ExternalEncoding), input_name='header'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='http_header', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='http_header'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.header is not None and 'header' not in already_processed:
            already_processed.append('header')
            showIndent(outfile, level)
            outfile.write('header = "%s",\n' % (self.header,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('header', node)
        if value is not None and 'header' not in already_processed:
            already_processed.append('header')
            self.header = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class http_header


class ftp_data(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, passive_mode=None, login_successful=None, server_data_port=None, local_data_port=None, password=None):
        self.username = _cast(None, username)
        self.passive_mode = _cast(bool, passive_mode)
        self.login_successful = _cast(bool, login_successful)
        self.server_data_port = _cast(int, server_data_port)
        self.local_data_port = _cast(int, local_data_port)
        self.password = _cast(None, password)
        pass
    def factory(*args_, **kwargs_):
        if ftp_data.subclass:
            return ftp_data.subclass(*args_, **kwargs_)
        else:
            return ftp_data(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_passive_mode(self): return self.passive_mode
    def set_passive_mode(self, passive_mode): self.passive_mode = passive_mode
    def get_login_successful(self): return self.login_successful
    def set_login_successful(self, login_successful): self.login_successful = login_successful
    def get_server_data_port(self): return self.server_data_port
    def set_server_data_port(self, server_data_port): self.server_data_port = server_data_port
    def get_local_data_port(self): return self.local_data_port
    def set_local_data_port(self, local_data_port): self.local_data_port = local_data_port
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def export(self, outfile, level, namespace_='', name_='ftp_data', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ftp_data')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ftp_data'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.passive_mode is not None and 'passive_mode' not in already_processed:
            already_processed.append('passive_mode')
            outfile.write(' passive_mode="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.passive_mode)), input_name='passive_mode'))
        if self.login_successful is not None and 'login_successful' not in already_processed:
            already_processed.append('login_successful')
            outfile.write(' login_successful="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.login_successful)), input_name='login_successful'))
        if self.server_data_port is not None and 'server_data_port' not in already_processed:
            already_processed.append('server_data_port')
            outfile.write(' server_data_port="%s"' % self.gds_format_integer(self.server_data_port, input_name='server_data_port'))
        if self.local_data_port is not None and 'local_data_port' not in already_processed:
            already_processed.append('local_data_port')
            outfile.write(' local_data_port="%s"' % self.gds_format_integer(self.local_data_port, input_name='local_data_port'))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            outfile.write(' password=%s' % (self.gds_format_string(quote_attrib(self.password).encode(ExternalEncoding), input_name='password'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ftp_data', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ftp_data'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.passive_mode is not None and 'passive_mode' not in already_processed:
            already_processed.append('passive_mode')
            showIndent(outfile, level)
            outfile.write('passive_mode = %s,\n' % (self.passive_mode,))
        if self.login_successful is not None and 'login_successful' not in already_processed:
            already_processed.append('login_successful')
            showIndent(outfile, level)
            outfile.write('login_successful = %s,\n' % (self.login_successful,))
        if self.server_data_port is not None and 'server_data_port' not in already_processed:
            already_processed.append('server_data_port')
            showIndent(outfile, level)
            outfile.write('server_data_port = %d,\n' % (self.server_data_port,))
        if self.local_data_port is not None and 'local_data_port' not in already_processed:
            already_processed.append('local_data_port')
            showIndent(outfile, level)
            outfile.write('local_data_port = %d,\n' % (self.local_data_port,))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            showIndent(outfile, level)
            outfile.write('password = "%s",\n' % (self.password,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('passive_mode', node)
        if value is not None and 'passive_mode' not in already_processed:
            already_processed.append('passive_mode')
            if value in ('true', '1'):
                self.passive_mode = True
            elif value in ('false', '0'):
                self.passive_mode = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('login_successful', node)
        if value is not None and 'login_successful' not in already_processed:
            already_processed.append('login_successful')
            if value in ('true', '1'):
                self.login_successful = True
            elif value in ('false', '0'):
                self.login_successful = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('server_data_port', node)
        if value is not None and 'server_data_port' not in already_processed:
            already_processed.append('server_data_port')
            try:
                self.server_data_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_data_port', node)
        if value is not None and 'local_data_port' not in already_processed:
            already_processed.append('local_data_port')
            try:
                self.local_data_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('password', node)
        if value is not None and 'password' not in already_processed:
            already_processed.append('password')
            self.password = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ftp_data


class ftp_command(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, command=None):
        self.command = _cast(None, command)
        pass
    def factory(*args_, **kwargs_):
        if ftp_command.subclass:
            return ftp_command.subclass(*args_, **kwargs_)
        else:
            return ftp_command(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_command(self): return self.command
    def set_command(self, command): self.command = command
    def export(self, outfile, level, namespace_='', name_='ftp_command', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ftp_command')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ftp_command'):
        if self.command is not None and 'command' not in already_processed:
            already_processed.append('command')
            outfile.write(' command=%s' % (self.gds_format_string(quote_attrib(self.command).encode(ExternalEncoding), input_name='command'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ftp_command', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ftp_command'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.command is not None and 'command' not in already_processed:
            already_processed.append('command')
            showIndent(outfile, level)
            outfile.write('command = "%s",\n' % (self.command,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('command', node)
        if value is not None and 'command' not in already_processed:
            already_processed.append('command')
            self.command = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ftp_command


class irc_data(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, realname=None, servername=None, hostname=None, password=None, nickname=None):
        self.username = _cast(None, username)
        self.realname = _cast(None, realname)
        self.servername = _cast(None, servername)
        self.hostname = _cast(None, hostname)
        self.password = _cast(None, password)
        self.nickname = _cast(None, nickname)
        pass
    def factory(*args_, **kwargs_):
        if irc_data.subclass:
            return irc_data.subclass(*args_, **kwargs_)
        else:
            return irc_data(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_realname(self): return self.realname
    def set_realname(self, realname): self.realname = realname
    def get_servername(self): return self.servername
    def set_servername(self, servername): self.servername = servername
    def get_hostname(self): return self.hostname
    def set_hostname(self, hostname): self.hostname = hostname
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def get_nickname(self): return self.nickname
    def set_nickname(self, nickname): self.nickname = nickname
    def export(self, outfile, level, namespace_='', name_='irc_data', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='irc_data')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='irc_data'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.realname is not None and 'realname' not in already_processed:
            already_processed.append('realname')
            outfile.write(' realname=%s' % (self.gds_format_string(quote_attrib(self.realname).encode(ExternalEncoding), input_name='realname'), ))
        if self.servername is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            outfile.write(' servername=%s' % (self.gds_format_string(quote_attrib(self.servername).encode(ExternalEncoding), input_name='servername'), ))
        if self.hostname is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            outfile.write(' hostname=%s' % (self.gds_format_string(quote_attrib(self.hostname).encode(ExternalEncoding), input_name='hostname'), ))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            outfile.write(' password=%s' % (self.gds_format_string(quote_attrib(self.password).encode(ExternalEncoding), input_name='password'), ))
        if self.nickname is not None and 'nickname' not in already_processed:
            already_processed.append('nickname')
            outfile.write(' nickname=%s' % (self.gds_format_string(quote_attrib(self.nickname).encode(ExternalEncoding), input_name='nickname'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='irc_data', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='irc_data'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.realname is not None and 'realname' not in already_processed:
            already_processed.append('realname')
            showIndent(outfile, level)
            outfile.write('realname = "%s",\n' % (self.realname,))
        if self.servername is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            showIndent(outfile, level)
            outfile.write('servername = "%s",\n' % (self.servername,))
        if self.hostname is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            showIndent(outfile, level)
            outfile.write('hostname = "%s",\n' % (self.hostname,))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            showIndent(outfile, level)
            outfile.write('password = "%s",\n' % (self.password,))
        if self.nickname is not None and 'nickname' not in already_processed:
            already_processed.append('nickname')
            showIndent(outfile, level)
            outfile.write('nickname = "%s",\n' % (self.nickname,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('realname', node)
        if value is not None and 'realname' not in already_processed:
            already_processed.append('realname')
            self.realname = value
        value = find_attr_value_('servername', node)
        if value is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            self.servername = value
        value = find_attr_value_('hostname', node)
        if value is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            self.hostname = value
        value = find_attr_value_('password', node)
        if value is not None and 'password' not in already_processed:
            already_processed.append('password')
            self.password = value
        value = find_attr_value_('nickname', node)
        if value is not None and 'nickname' not in already_processed:
            already_processed.append('nickname')
            self.nickname = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class irc_data


class irc_notice(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, text=None):
        self.text = _cast(None, text)
        pass
    def factory(*args_, **kwargs_):
        if irc_notice.subclass:
            return irc_notice.subclass(*args_, **kwargs_)
        else:
            return irc_notice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def export(self, outfile, level, namespace_='', name_='irc_notice', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='irc_notice')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='irc_notice'):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            outfile.write(' text=%s' % (self.gds_format_string(quote_attrib(self.text).encode(ExternalEncoding), input_name='text'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='irc_notice', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='irc_notice'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            showIndent(outfile, level)
            outfile.write('text = "%s",\n' % (self.text,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('text', node)
        if value is not None and 'text' not in already_processed:
            already_processed.append('text')
            self.text = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class irc_notice


class irc_channel(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, topic=None, password=None, name=None):
        self.topic = _cast(None, topic)
        self.password = _cast(None, password)
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if irc_channel.subclass:
            return irc_channel.subclass(*args_, **kwargs_)
        else:
            return irc_channel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_topic(self): return self.topic
    def set_topic(self, topic): self.topic = topic
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='', name_='irc_channel', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='irc_channel')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='irc_channel'):
        if self.topic is not None and 'topic' not in already_processed:
            already_processed.append('topic')
            outfile.write(' topic=%s' % (self.gds_format_string(quote_attrib(self.topic).encode(ExternalEncoding), input_name='topic'), ))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            outfile.write(' password=%s' % (self.gds_format_string(quote_attrib(self.password).encode(ExternalEncoding), input_name='password'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='irc_channel', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='irc_channel'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.topic is not None and 'topic' not in already_processed:
            already_processed.append('topic')
            showIndent(outfile, level)
            outfile.write('topic = "%s",\n' % (self.topic,))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            showIndent(outfile, level)
            outfile.write('password = "%s",\n' % (self.password,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('topic', node)
        if value is not None and 'topic' not in already_processed:
            already_processed.append('topic')
            self.topic = value
        value = find_attr_value_('password', node)
        if value is not None and 'password' not in already_processed:
            already_processed.append('password')
            self.password = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class irc_channel


class irc_private_message(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, text=None):
        self.text = _cast(None, text)
        pass
    def factory(*args_, **kwargs_):
        if irc_private_message.subclass:
            return irc_private_message.subclass(*args_, **kwargs_)
        else:
            return irc_private_message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def export(self, outfile, level, namespace_='', name_='irc_private_message', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='irc_private_message')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='irc_private_message'):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            outfile.write(' text=%s' % (self.gds_format_string(quote_attrib(self.text).encode(ExternalEncoding), input_name='text'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='irc_private_message', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='irc_private_message'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            showIndent(outfile, level)
            outfile.write('text = "%s",\n' % (self.text,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('text', node)
        if value is not None and 'text' not in already_processed:
            already_processed.append('text')
            self.text = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class irc_private_message


class smtp_data(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, password=None):
        self.username = _cast(None, username)
        self.password = _cast(None, password)
        pass
    def factory(*args_, **kwargs_):
        if smtp_data.subclass:
            return smtp_data.subclass(*args_, **kwargs_)
        else:
            return smtp_data(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def export(self, outfile, level, namespace_='', name_='smtp_data', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='smtp_data')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='smtp_data'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            outfile.write(' password=%s' % (self.gds_format_string(quote_attrib(self.password).encode(ExternalEncoding), input_name='password'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='smtp_data', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='smtp_data'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            showIndent(outfile, level)
            outfile.write('password = "%s",\n' % (self.password,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('password', node)
        if value is not None and 'password' not in already_processed:
            already_processed.append('password')
            self.password = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class smtp_data


class mail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mail_from=None, mail_to=None):
        self.mail_from = _cast(None, mail_from)
        self.mail_to = _cast(None, mail_to)
        pass
    def factory(*args_, **kwargs_):
        if mail.subclass:
            return mail.subclass(*args_, **kwargs_)
        else:
            return mail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mail_from(self): return self.mail_from
    def set_mail_from(self, mail_from): self.mail_from = mail_from
    def get_mail_to(self): return self.mail_to
    def set_mail_to(self, mail_to): self.mail_to = mail_to
    def export(self, outfile, level, namespace_='', name_='mail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mail'):
        if self.mail_from is not None and 'mail_from' not in already_processed:
            already_processed.append('mail_from')
            outfile.write(' mail_from=%s' % (self.gds_format_string(quote_attrib(self.mail_from).encode(ExternalEncoding), input_name='mail_from'), ))
        if self.mail_to is not None and 'mail_to' not in already_processed:
            already_processed.append('mail_to')
            outfile.write(' mail_to=%s' % (self.gds_format_string(quote_attrib(self.mail_to).encode(ExternalEncoding), input_name='mail_to'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='mail', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='mail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.mail_from is not None and 'mail_from' not in already_processed:
            already_processed.append('mail_from')
            showIndent(outfile, level)
            outfile.write('mail_from = "%s",\n' % (self.mail_from,))
        if self.mail_to is not None and 'mail_to' not in already_processed:
            already_processed.append('mail_to')
            showIndent(outfile, level)
            outfile.write('mail_to = "%s",\n' % (self.mail_to,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('mail_from', node)
        if value is not None and 'mail_from' not in already_processed:
            already_processed.append('mail_from')
            self.mail_from = value
        value = find_attr_value_('mail_to', node)
        if value is not None and 'mail_to' not in already_processed:
            already_processed.append('mail_to')
            self.mail_to = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mail


class mail_data_line(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, text=None):
        self.text = _cast(None, text)
        pass
    def factory(*args_, **kwargs_):
        if mail_data_line.subclass:
            return mail_data_line.subclass(*args_, **kwargs_)
        else:
            return mail_data_line(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def export(self, outfile, level, namespace_='', name_='mail_data_line', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mail_data_line')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mail_data_line'):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            outfile.write(' text=%s' % (self.gds_format_string(quote_attrib(self.text).encode(ExternalEncoding), input_name='text'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='mail_data_line', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='mail_data_line'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            showIndent(outfile, level)
            outfile.write('text = "%s",\n' % (self.text,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('text', node)
        if value is not None and 'text' not in already_processed:
            already_processed.append('text')
            self.text = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mail_data_line


class ident_request(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, remote_port=None, local_port=None):
        self.remote_port = _cast(int, remote_port)
        self.local_port = _cast(int, local_port)
        pass
    def factory(*args_, **kwargs_):
        if ident_request.subclass:
            return ident_request.subclass(*args_, **kwargs_)
        else:
            return ident_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_remote_port(self): return self.remote_port
    def set_remote_port(self, remote_port): self.remote_port = remote_port
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def export(self, outfile, level, namespace_='', name_='ident_request', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ident_request')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ident_request'):
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            outfile.write(' remote_port="%s"' % self.gds_format_integer(self.remote_port, input_name='remote_port'))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
    def exportChildren(self, outfile, level, namespace_='', name_='ident_request', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ident_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            showIndent(outfile, level)
            outfile.write('remote_port = %d,\n' % (self.remote_port,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('remote_port', node)
        if value is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            try:
                self.remote_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ident_request


class ident_response(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, text=None, remote_port=None, local_port=None):
        self.text = _cast(None, text)
        self.remote_port = _cast(int, remote_port)
        self.local_port = _cast(int, local_port)
        pass
    def factory(*args_, **kwargs_):
        if ident_response.subclass:
            return ident_response.subclass(*args_, **kwargs_)
        else:
            return ident_response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def get_remote_port(self): return self.remote_port
    def set_remote_port(self, remote_port): self.remote_port = remote_port
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def export(self, outfile, level, namespace_='', name_='ident_response', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ident_response')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ident_response'):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            outfile.write(' text=%s' % (self.gds_format_string(quote_attrib(self.text).encode(ExternalEncoding), input_name='text'), ))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            outfile.write(' remote_port="%s"' % self.gds_format_integer(self.remote_port, input_name='remote_port'))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
    def exportChildren(self, outfile, level, namespace_='', name_='ident_response', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ident_response'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            showIndent(outfile, level)
            outfile.write('text = "%s",\n' % (self.text,))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            showIndent(outfile, level)
            outfile.write('remote_port = %d,\n' % (self.remote_port,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('text', node)
        if value is not None and 'text' not in already_processed:
            already_processed.append('text')
            self.text = value
        value = find_attr_value_('remote_port', node)
        if value is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            try:
                self.remote_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ident_response


class connection_packets(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, connection_packet=None):
        self.connection_packet = connection_packet
    def factory(*args_, **kwargs_):
        if connection_packets.subclass:
            return connection_packets.subclass(*args_, **kwargs_)
        else:
            return connection_packets(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_connection_packet(self): return self.connection_packet
    def set_connection_packet(self, connection_packet): self.connection_packet = connection_packet
    def export(self, outfile, level, namespace_='', name_='connection_packets', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connection_packets')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connection_packets'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='connection_packets', fromsubclass_=False):
        if self.connection_packet is not None:
            self.connection_packet.export(outfile, level, namespace_, name_='connection_packet', )
    def hasContent_(self):
        if (
            self.connection_packet is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connection_packets'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.connection_packet is not None:
            showIndent(outfile, level)
            outfile.write('connection_packet=model_.connection_packet(\n')
            self.connection_packet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'connection_packet':
            obj_ = connection_packet.factory()
            obj_.build(child_)
            self.set_connection_packet(obj_)
# end class connection_packets


class connection_packet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, sandbox_action=None, raw_data=None, direction=None, raw_data_ascii=None, data_size=None):
        self.sandbox_action = _cast(None, sandbox_action)
        self.raw_data = _cast(None, raw_data)
        self.direction = _cast(None, direction)
        self.raw_data_ascii = _cast(None, raw_data_ascii)
        self.data_size = _cast(int, data_size)
        pass
    def factory(*args_, **kwargs_):
        if connection_packet.subclass:
            return connection_packet.subclass(*args_, **kwargs_)
        else:
            return connection_packet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_raw_data(self): return self.raw_data
    def set_raw_data(self, raw_data): self.raw_data = raw_data
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def validate_type_networkdirection(self, value):
        # Validate type type_networkdirection, a restriction on xs:string.
        pass
    def get_raw_data_ascii(self): return self.raw_data_ascii
    def set_raw_data_ascii(self, raw_data_ascii): self.raw_data_ascii = raw_data_ascii
    def get_data_size(self): return self.data_size
    def set_data_size(self, data_size): self.data_size = data_size
    def export(self, outfile, level, namespace_='', name_='connection_packet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connection_packet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connection_packet'):
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.raw_data is not None and 'raw_data' not in already_processed:
            already_processed.append('raw_data')
            outfile.write(' raw_data=%s' % (self.gds_format_string(quote_attrib(self.raw_data).encode(ExternalEncoding), input_name='raw_data'), ))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.raw_data_ascii is not None and 'raw_data_ascii' not in already_processed:
            already_processed.append('raw_data_ascii')
            outfile.write(' raw_data_ascii=%s' % (self.gds_format_string(quote_attrib(self.raw_data_ascii).encode(ExternalEncoding), input_name='raw_data_ascii'), ))
        if self.data_size is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            outfile.write(' data_size="%s"' % self.gds_format_integer(self.data_size, input_name='data_size'))
    def exportChildren(self, outfile, level, namespace_='', name_='connection_packet', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connection_packet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.raw_data is not None and 'raw_data' not in already_processed:
            already_processed.append('raw_data')
            showIndent(outfile, level)
            outfile.write('raw_data = "%s",\n' % (self.raw_data,))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            showIndent(outfile, level)
            outfile.write('direction = "%s",\n' % (self.direction,))
        if self.raw_data_ascii is not None and 'raw_data_ascii' not in already_processed:
            already_processed.append('raw_data_ascii')
            showIndent(outfile, level)
            outfile.write('raw_data_ascii = "%s",\n' % (self.raw_data_ascii,))
        if self.data_size is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            showIndent(outfile, level)
            outfile.write('data_size = %d,\n' % (self.data_size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('raw_data', node)
        if value is not None and 'raw_data' not in already_processed:
            already_processed.append('raw_data')
            self.raw_data = value
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            self.direction = value
            self.validate_type_networkdirection(self.direction)    # validate type type_networkdirection
        value = find_attr_value_('raw_data_ascii', node)
        if value is not None and 'raw_data_ascii' not in already_processed:
            already_processed.append('raw_data_ascii')
            self.raw_data_ascii = value
        value = find_attr_value_('data_size', node)
        if value is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            try:
                self.data_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class connection_packet


class connection_traffic(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, incoming_traffic=None, outgoing_traffic=None):
        if incoming_traffic is None:
            self.incoming_traffic = []
        else:
            self.incoming_traffic = incoming_traffic
        if outgoing_traffic is None:
            self.outgoing_traffic = []
        else:
            self.outgoing_traffic = outgoing_traffic
    def factory(*args_, **kwargs_):
        if connection_traffic.subclass:
            return connection_traffic.subclass(*args_, **kwargs_)
        else:
            return connection_traffic(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_incoming_traffic(self): return self.incoming_traffic
    def set_incoming_traffic(self, incoming_traffic): self.incoming_traffic = incoming_traffic
    def add_incoming_traffic(self, value): self.incoming_traffic.append(value)
    def insert_incoming_traffic(self, index, value): self.incoming_traffic[index] = value
    def get_outgoing_traffic(self): return self.outgoing_traffic
    def set_outgoing_traffic(self, outgoing_traffic): self.outgoing_traffic = outgoing_traffic
    def add_outgoing_traffic(self, value): self.outgoing_traffic.append(value)
    def insert_outgoing_traffic(self, index, value): self.outgoing_traffic[index] = value
    def export(self, outfile, level, namespace_='', name_='connection_traffic', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connection_traffic')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connection_traffic'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='connection_traffic', fromsubclass_=False):
        for incoming_traffic_ in self.incoming_traffic:
            showIndent(outfile, level)
            outfile.write('<%sincoming_traffic>%s</%sincoming_traffic>\n' % (namespace_, self.gds_format_string(quote_xml(incoming_traffic_).encode(ExternalEncoding), input_name='incoming_traffic'), namespace_))
        for outgoing_traffic_ in self.outgoing_traffic:
            showIndent(outfile, level)
            outfile.write('<%soutgoing_traffic>%s</%soutgoing_traffic>\n' % (namespace_, self.gds_format_string(quote_xml(outgoing_traffic_).encode(ExternalEncoding), input_name='outgoing_traffic'), namespace_))
    def hasContent_(self):
        if (
            self.incoming_traffic or
            self.outgoing_traffic
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connection_traffic'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('incoming_traffic=[\n')
        level += 1
        for incoming_traffic_ in self.incoming_traffic:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(incoming_traffic_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('outgoing_traffic=[\n')
        level += 1
        for outgoing_traffic_ in self.outgoing_traffic:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(outgoing_traffic_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'incoming_traffic':
            incoming_traffic_ = child_.text
            incoming_traffic_ = self.gds_validate_string(incoming_traffic_, node, 'incoming_traffic')
            self.incoming_traffic.append(incoming_traffic_)
        elif nodeName_ == 'outgoing_traffic':
            outgoing_traffic_ = child_.text
            outgoing_traffic_ = self.gds_validate_string(outgoing_traffic_, node, 'outgoing_traffic')
            self.outgoing_traffic.append(outgoing_traffic_)
# end class connection_traffic


class incoming_traffic(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if incoming_traffic.subclass:
            return incoming_traffic.subclass(*args_, **kwargs_)
        else:
            return incoming_traffic(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='incoming_traffic', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='incoming_traffic')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='incoming_traffic'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='incoming_traffic', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='incoming_traffic'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class incoming_traffic


class outgoing_traffic(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if outgoing_traffic.subclass:
            return outgoing_traffic.subclass(*args_, **kwargs_)
        else:
            return outgoing_traffic(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='outgoing_traffic', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='outgoing_traffic')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='outgoing_traffic'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='outgoing_traffic', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='outgoing_traffic'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class outgoing_traffic


class filesystem_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, create_file=None, create_namedpipe=None, create_mailslot=None, read_file=None, write_file=None, open_file=None, copy_file=None, move_file=None, delete_file=None, find_file=None, get_file_attributes=None, set_file_attributes=None):
        self.create_file = []
        self.create_namedpipe = []
        self.create_mailslot = []
        self.read_file = []
        self.write_file = []
        self.open_file = []
        self.copy_file = []
        self.move_file = []
        self.delete_file = []
        self.find_file = []
        self.get_file_attributes = []
        self.set_file_attributes = []
    def factory(*args_, **kwargs_):
        if filesystem_section.subclass:
            return filesystem_section.subclass(*args_, **kwargs_)
        else:
            return filesystem_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_create_file(self): return self.create_file
    def set_create_file(self, create_file): self.create_file = create_file
    def get_create_namedpipe(self): return self.create_namedpipe
    def set_create_namedpipe(self, create_namedpipe): self.create_namedpipe = create_namedpipe
    def get_create_mailslot(self): return self.create_mailslot
    def set_create_mailslot(self, create_mailslot): self.create_mailslot = create_mailslot
    def get_read_file(self): return self.read_file
    def set_read_file(self, read_file): self.read_file = read_file
    def get_write_file(self): return self.write_file
    def set_write_file(self, write_file): self.write_file = write_file
    def get_open_file(self): return self.open_file
    def set_open_file(self, open_file): self.open_file = open_file
    def get_copy_file(self): return self.copy_file
    def set_copy_file(self, copy_file): self.copy_file = copy_file
    def get_move_file(self): return self.move_file
    def set_move_file(self, move_file): self.move_file = move_file
    def get_delete_file(self): return self.delete_file
    def set_delete_file(self, delete_file): self.delete_file = delete_file
    def get_find_file(self): return self.find_file
    def set_find_file(self, find_file): self.find_file = find_file
    def get_get_file_attributes(self): return self.get_file_attributes
    def set_get_file_attributes(self, get_file_attributes): self.get_file_attributes = get_file_attributes
    def get_set_file_attributes(self): return self.set_file_attributes
    def set_set_file_attributes(self, set_file_attributes): self.set_file_attributes = set_file_attributes
    def export(self, outfile, level, namespace_='', name_='filesystem_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='filesystem_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='filesystem_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='filesystem_section', fromsubclass_=False):
        if self.create_file is not None:
            self.create_file.export(outfile, level, namespace_, name_='create_file')
        if self.create_namedpipe is not None:
            self.create_namedpipe.export(outfile, level, namespace_, name_='create_namedpipe')
        if self.create_mailslot is not None:
            self.create_mailslot.export(outfile, level, namespace_, name_='create_mailslot')
        if self.read_file is not None:
            self.read_file.export(outfile, level, namespace_, name_='read_file')
        if self.write_file is not None:
            self.write_file.export(outfile, level, namespace_, name_='write_file')
        if self.open_file is not None:
            self.open_file.export(outfile, level, namespace_, name_='open_file')
        if self.copy_file is not None:
            self.copy_file.export(outfile, level, namespace_, name_='copy_file')
        if self.move_file is not None:
            self.move_file.export(outfile, level, namespace_, name_='move_file')
        if self.delete_file is not None:
            self.delete_file.export(outfile, level, namespace_, name_='delete_file')
        if self.find_file is not None:
            self.find_file.export(outfile, level, namespace_, name_='find_file')
        if self.get_file_attributes is not None:
            self.get_file_attributes.export(outfile, level, namespace_, name_='get_file_attributes')
        if self.set_file_attributes is not None:
            self.set_file_attributes.export(outfile, level, namespace_, name_='set_file_attributes')
    def hasContent_(self):
        if (
            self.create_file is not None or
            self.create_namedpipe is not None or
            self.create_mailslot is not None or
            self.read_file is not None or
            self.write_file is not None or
            self.open_file is not None or
            self.copy_file is not None or
            self.move_file is not None or
            self.delete_file is not None or
            self.find_file is not None or
            self.get_file_attributes is not None or
            self.set_file_attributes is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='filesystem_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.create_file is not None:
            showIndent(outfile, level)
            outfile.write('create_file=model_.create_file(\n')
            self.create_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_namedpipe is not None:
            showIndent(outfile, level)
            outfile.write('create_namedpipe=model_.create_namedpipe(\n')
            self.create_namedpipe.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_mailslot is not None:
            showIndent(outfile, level)
            outfile.write('create_mailslot=model_.create_mailslot(\n')
            self.create_mailslot.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.read_file is not None:
            showIndent(outfile, level)
            outfile.write('read_file=model_.read_file(\n')
            self.read_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.write_file is not None:
            showIndent(outfile, level)
            outfile.write('write_file=model_.write_file(\n')
            self.write_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.open_file is not None:
            showIndent(outfile, level)
            outfile.write('open_file=model_.open_file(\n')
            self.open_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.copy_file is not None:
            showIndent(outfile, level)
            outfile.write('copy_file=model_.copy_file(\n')
            self.copy_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.move_file is not None:
            showIndent(outfile, level)
            outfile.write('move_file=model_.move_file(\n')
            self.move_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.delete_file is not None:
            showIndent(outfile, level)
            outfile.write('delete_file=model_.delete_file(\n')
            self.delete_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.find_file is not None:
            showIndent(outfile, level)
            outfile.write('find_file=model_.find_file(\n')
            self.find_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_file_attributes is not None:
            showIndent(outfile, level)
            outfile.write('get_file_attributes=model_.get_file_attributes(\n')
            self.get_file_attributes.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.set_file_attributes is not None:
            showIndent(outfile, level)
            outfile.write('set_file_attributes=model_.set_file_attributes(\n')
            self.set_file_attributes.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'create_file':
            obj_ = create_file.factory()
            obj_.build(child_)
            self.create_file.append(obj_)
        elif nodeName_ == 'create_namedpipe':
            obj_ = create_namedpipe.factory()
            obj_.build(child_)
            self.create_namedpipe.append(obj_)
        elif nodeName_ == 'create_mailslot':
            obj_ = create_mailslot.factory()
            obj_.build(child_)
            self.create_mailslot.append(obj_)
        elif nodeName_ == 'read_file':
            obj_ = read_file.factory()
            obj_.build(child_)
            self.read_file.append(obj_)
        elif nodeName_ == 'write_file':
            obj_ = write_file.factory()
            obj_.build(child_)
            self.write_file.append(obj_)
        elif nodeName_ == 'open_file':
            obj_ = open_file.factory()
            obj_.build(child_)
            self.open_file.append(obj_)
        elif nodeName_ == 'copy_file':
            obj_ = copy_file.factory()
            obj_.build(child_)
            self.copy_file.append(obj_)
        elif nodeName_ == 'move_file':
            obj_ = move_file.factory()
            obj_.build(child_)
            self.move_file.append(obj_)
        elif nodeName_ == 'delete_file':
            obj_ = delete_file.factory()
            obj_.build(child_)
            self.delete_file.append(obj_)
        elif nodeName_ == 'find_file':
            obj_ = find_file.factory()
            obj_.build(child_)
            self.find_file.append(obj_)
        elif nodeName_ == 'get_file_attributes':
            obj_ = get_file_attributes.factory()
            obj_.build(child_)
            self.get_file_attributes.append(obj_)
        elif nodeName_ == 'set_file_attributes':
            obj_ = set_file_attributes.factory()
            obj_.build(child_)
            self.set_file_attributes.append(obj_)
# end class filesystem_section


class create_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, create_disposition=None, srcfile=None, desired_access=None, pid=None, create_options=None, file_attributes=None, result=None, timestamp=None, tid=None, id=None, share_access=None):
        self.count = _cast(int, count)
        self.create_disposition = _cast(None, create_disposition)
        self.srcfile = _cast(None, srcfile)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.create_options = _cast(None, create_options)
        self.file_attributes = _cast(None, file_attributes)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.share_access = _cast(None, share_access)
        pass
    def factory(*args_, **kwargs_):
        if create_file.subclass:
            return create_file.subclass(*args_, **kwargs_)
        else:
            return create_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_create_disposition(self): return self.create_disposition
    def set_create_disposition(self, create_disposition): self.create_disposition = create_disposition
    def validate_type_filecreatedisposition(self, value):
        # Validate type type_filecreatedisposition, a restriction on xs:string.
        pass
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_fileaccess(self, value):
        # Validate type type_fileaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_create_options(self): return self.create_options
    def set_create_options(self, create_options): self.create_options = create_options
    def validate_type_filecreateoptions(self, value):
        # Validate type type_filecreateoptions, a restriction on xs:string.
        pass
    def get_file_attributes(self): return self.file_attributes
    def set_file_attributes(self, file_attributes): self.file_attributes = file_attributes
    def validate_type_fileattributes(self, value):
        # Validate type type_fileattributes, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_share_access(self): return self.share_access
    def set_share_access(self, share_access): self.share_access = share_access
    def validate_type_fileshareaccess(self, value):
        # Validate type type_fileshareaccess, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='create_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.create_disposition is not None and 'create_disposition' not in already_processed:
            already_processed.append('create_disposition')
            outfile.write(' create_disposition=%s' % (quote_attrib(self.create_disposition), ))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            outfile.write(' create_options=%s' % (quote_attrib(self.create_options), ))
        if self.file_attributes is not None and 'file_attributes' not in already_processed:
            already_processed.append('file_attributes')
            outfile.write(' file_attributes=%s' % (quote_attrib(self.file_attributes), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.share_access is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            outfile.write(' share_access=%s' % (quote_attrib(self.share_access), ))
    def exportChildren(self, outfile, level, namespace_='', name_='create_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.create_disposition is not None and 'create_disposition' not in already_processed:
            already_processed.append('create_disposition')
            showIndent(outfile, level)
            outfile.write('create_disposition = "%s",\n' % (self.create_disposition,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            showIndent(outfile, level)
            outfile.write('create_options = "%s",\n' % (self.create_options,))
        if self.file_attributes is not None and 'file_attributes' not in already_processed:
            already_processed.append('file_attributes')
            showIndent(outfile, level)
            outfile.write('file_attributes = "%s",\n' % (self.file_attributes,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.share_access is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            showIndent(outfile, level)
            outfile.write('share_access = "%s",\n' % (self.share_access,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_disposition', node)
        if value is not None and 'create_disposition' not in already_processed:
            already_processed.append('create_disposition')
            self.create_disposition = value
            self.validate_type_filecreatedisposition(self.create_disposition)    # validate type type_filecreatedisposition
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_fileaccess(self.desired_access)    # validate type type_fileaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_options', node)
        if value is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            self.create_options = value
            self.validate_type_filecreateoptions(self.create_options)    # validate type type_filecreateoptions
        value = find_attr_value_('file_attributes', node)
        if value is not None and 'file_attributes' not in already_processed:
            already_processed.append('file_attributes')
            self.file_attributes = value
            self.validate_type_fileattributes(self.file_attributes)    # validate type type_fileattributes
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('share_access', node)
        if value is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            self.share_access = value
            self.validate_type_fileshareaccess(self.share_access)    # validate type type_fileshareaccess
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_file


class create_namedpipe(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, create_disposition=None, srcfile=None, desired_access=None, pid=None, create_options=None, result=None, timestamp=None, tid=None, id=None, share_access=None):
        self.count = _cast(int, count)
        self.create_disposition = _cast(None, create_disposition)
        self.srcfile = _cast(None, srcfile)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.create_options = _cast(None, create_options)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.share_access = _cast(None, share_access)
        pass
    def factory(*args_, **kwargs_):
        if create_namedpipe.subclass:
            return create_namedpipe.subclass(*args_, **kwargs_)
        else:
            return create_namedpipe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_create_disposition(self): return self.create_disposition
    def set_create_disposition(self, create_disposition): self.create_disposition = create_disposition
    def validate_type_filecreatedisposition(self, value):
        # Validate type type_filecreatedisposition, a restriction on xs:string.
        pass
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_fileaccess(self, value):
        # Validate type type_fileaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_create_options(self): return self.create_options
    def set_create_options(self, create_options): self.create_options = create_options
    def validate_type_filecreateoptions(self, value):
        # Validate type type_filecreateoptions, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_share_access(self): return self.share_access
    def set_share_access(self, share_access): self.share_access = share_access
    def validate_type_fileshareaccess(self, value):
        # Validate type type_fileshareaccess, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='create_namedpipe', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_namedpipe')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_namedpipe'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.create_disposition is not None and 'create_disposition' not in already_processed:
            already_processed.append('create_disposition')
            outfile.write(' create_disposition=%s' % (quote_attrib(self.create_disposition), ))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            outfile.write(' create_options=%s' % (quote_attrib(self.create_options), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.share_access is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            outfile.write(' share_access=%s' % (quote_attrib(self.share_access), ))
    def exportChildren(self, outfile, level, namespace_='', name_='create_namedpipe', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_namedpipe'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.create_disposition is not None and 'create_disposition' not in already_processed:
            already_processed.append('create_disposition')
            showIndent(outfile, level)
            outfile.write('create_disposition = "%s",\n' % (self.create_disposition,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            showIndent(outfile, level)
            outfile.write('create_options = "%s",\n' % (self.create_options,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.share_access is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            showIndent(outfile, level)
            outfile.write('share_access = "%s",\n' % (self.share_access,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_disposition', node)
        if value is not None and 'create_disposition' not in already_processed:
            already_processed.append('create_disposition')
            self.create_disposition = value
            self.validate_type_filecreatedisposition(self.create_disposition)    # validate type type_filecreatedisposition
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_fileaccess(self.desired_access)    # validate type type_fileaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_options', node)
        if value is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            self.create_options = value
            self.validate_type_filecreateoptions(self.create_options)    # validate type type_filecreateoptions
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('share_access', node)
        if value is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            self.share_access = value
            self.validate_type_fileshareaccess(self.share_access)    # validate type type_fileshareaccess
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_namedpipe


class create_mailslot(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, desired_access=None, pid=None, create_options=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.create_options = _cast(None, create_options)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if create_mailslot.subclass:
            return create_mailslot.subclass(*args_, **kwargs_)
        else:
            return create_mailslot(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_fileaccess(self, value):
        # Validate type type_fileaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_create_options(self): return self.create_options
    def set_create_options(self, create_options): self.create_options = create_options
    def validate_type_filecreateoptions(self, value):
        # Validate type type_filecreateoptions, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='create_mailslot', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_mailslot')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_mailslot'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            outfile.write(' create_options=%s' % (quote_attrib(self.create_options), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_mailslot', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_mailslot'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            showIndent(outfile, level)
            outfile.write('create_options = "%s",\n' % (self.create_options,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_fileaccess(self.desired_access)    # validate type type_fileaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_options', node)
        if value is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            self.create_options = value
            self.validate_type_filecreateoptions(self.create_options)    # validate type type_filecreateoptions
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_mailslot


class read_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, timestamp=None, pid=None, length=None, result=None, offset=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.length = _cast(int, length)
        self.result = _cast(None, result)
        self.offset = _cast(int, offset)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if read_file.subclass:
            return read_file.subclass(*args_, **kwargs_)
        else:
            return read_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='read_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='read_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='read_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.length is not None and 'length' not in already_processed:
            already_processed.append('length')
            outfile.write(' length="%s"' % self.gds_format_integer(self.length, input_name='length'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.offset is not None and 'offset' not in already_processed:
            already_processed.append('offset')
            outfile.write(' offset="%s"' % self.gds_format_integer(self.offset, input_name='offset'))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='read_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='read_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.length is not None and 'length' not in already_processed:
            already_processed.append('length')
            showIndent(outfile, level)
            outfile.write('length = %d,\n' % (self.length,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.offset is not None and 'offset' not in already_processed:
            already_processed.append('offset')
            showIndent(outfile, level)
            outfile.write('offset = %d,\n' % (self.offset,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('length', node)
        if value is not None and 'length' not in already_processed:
            already_processed.append('length')
            try:
                self.length = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('offset', node)
        if value is not None and 'offset' not in already_processed:
            already_processed.append('offset')
            try:
                self.offset = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class read_file


class write_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, timestamp=None, pid=None, length=None, result=None, offset=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.length = _cast(int, length)
        self.result = _cast(None, result)
        self.offset = _cast(int, offset)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if write_file.subclass:
            return write_file.subclass(*args_, **kwargs_)
        else:
            return write_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_length(self): return self.length
    def set_length(self, length): self.length = length
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_offset(self): return self.offset
    def set_offset(self, offset): self.offset = offset
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='write_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='write_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='write_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.length is not None and 'length' not in already_processed:
            already_processed.append('length')
            outfile.write(' length="%s"' % self.gds_format_integer(self.length, input_name='length'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.offset is not None and 'offset' not in already_processed:
            already_processed.append('offset')
            outfile.write(' offset="%s"' % self.gds_format_integer(self.offset, input_name='offset'))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='write_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='write_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.length is not None and 'length' not in already_processed:
            already_processed.append('length')
            showIndent(outfile, level)
            outfile.write('length = %d,\n' % (self.length,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.offset is not None and 'offset' not in already_processed:
            already_processed.append('offset')
            showIndent(outfile, level)
            outfile.write('offset = %d,\n' % (self.offset,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('length', node)
        if value is not None and 'length' not in already_processed:
            already_processed.append('length')
            try:
                self.length = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('offset', node)
        if value is not None and 'offset' not in already_processed:
            already_processed.append('offset')
            try:
                self.offset = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class write_file


class open_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, desired_access=None, pid=None, create_options=None, result=None, timestamp=None, tid=None, id=None, share_access=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.create_options = _cast(None, create_options)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.share_access = _cast(None, share_access)
        pass
    def factory(*args_, **kwargs_):
        if open_file.subclass:
            return open_file.subclass(*args_, **kwargs_)
        else:
            return open_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_fileaccess(self, value):
        # Validate type type_fileaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_create_options(self): return self.create_options
    def set_create_options(self, create_options): self.create_options = create_options
    def validate_type_filecreateoptions(self, value):
        # Validate type type_filecreateoptions, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_share_access(self): return self.share_access
    def set_share_access(self, share_access): self.share_access = share_access
    def validate_type_fileshareaccess(self, value):
        # Validate type type_fileshareaccess, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='open_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='open_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='open_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            outfile.write(' create_options=%s' % (quote_attrib(self.create_options), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.share_access is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            outfile.write(' share_access=%s' % (quote_attrib(self.share_access), ))
    def exportChildren(self, outfile, level, namespace_='', name_='open_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='open_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            showIndent(outfile, level)
            outfile.write('create_options = "%s",\n' % (self.create_options,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.share_access is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            showIndent(outfile, level)
            outfile.write('share_access = "%s",\n' % (self.share_access,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_fileaccess(self.desired_access)    # validate type type_fileaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_options', node)
        if value is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            self.create_options = value
            self.validate_type_filecreateoptions(self.create_options)    # validate type type_filecreateoptions
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('share_access', node)
        if value is not None and 'share_access' not in already_processed:
            already_processed.append('share_access')
            self.share_access = value
            self.validate_type_fileshareaccess(self.share_access)    # validate type type_fileshareaccess
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class open_file


class copy_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dstfile=None, count=None, srcfile=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.dstfile = _cast(None, dstfile)
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if copy_file.subclass:
            return copy_file.subclass(*args_, **kwargs_)
        else:
            return copy_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dstfile(self): return self.dstfile
    def set_dstfile(self, dstfile): self.dstfile = dstfile
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='copy_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='copy_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='copy_file'):
        if self.dstfile is not None and 'dstfile' not in already_processed:
            already_processed.append('dstfile')
            outfile.write(' dstfile=%s' % (self.gds_format_string(quote_attrib(self.dstfile).encode(ExternalEncoding), input_name='dstfile'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='copy_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='copy_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.dstfile is not None and 'dstfile' not in already_processed:
            already_processed.append('dstfile')
            showIndent(outfile, level)
            outfile.write('dstfile = "%s",\n' % (self.dstfile,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dstfile', node)
        if value is not None and 'dstfile' not in already_processed:
            already_processed.append('dstfile')
            self.dstfile = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class copy_file


class move_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dstfile=None, count=None, srcfile=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.dstfile = _cast(None, dstfile)
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if move_file.subclass:
            return move_file.subclass(*args_, **kwargs_)
        else:
            return move_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dstfile(self): return self.dstfile
    def set_dstfile(self, dstfile): self.dstfile = dstfile
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='move_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='move_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='move_file'):
        if self.dstfile is not None and 'dstfile' not in already_processed:
            already_processed.append('dstfile')
            outfile.write(' dstfile=%s' % (self.gds_format_string(quote_attrib(self.dstfile).encode(ExternalEncoding), input_name='dstfile'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='move_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='move_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.dstfile is not None and 'dstfile' not in already_processed:
            already_processed.append('dstfile')
            showIndent(outfile, level)
            outfile.write('dstfile = "%s",\n' % (self.dstfile,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dstfile', node)
        if value is not None and 'dstfile' not in already_processed:
            already_processed.append('dstfile')
            self.dstfile = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class move_file


class delete_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if delete_file.subclass:
            return delete_file.subclass(*args_, **kwargs_)
        else:
            return delete_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='delete_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='delete_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='delete_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='delete_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='delete_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class delete_file


class find_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if find_file.subclass:
            return find_file.subclass(*args_, **kwargs_)
        else:
            return find_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='find_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='find_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='find_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='find_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='find_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class find_file


class get_file_attributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, timestamp=None, pid=None, file_information_class=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.file_information_class = _cast(None, file_information_class)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_file_attributes.subclass:
            return get_file_attributes.subclass(*args_, **kwargs_)
        else:
            return get_file_attributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_file_information_class(self): return self.file_information_class
    def set_file_information_class(self, file_information_class): self.file_information_class = file_information_class
    def validate_type_fileinformationclass(self, value):
        # Validate type type_fileinformationclass, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_file_attributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_file_attributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_file_attributes'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.file_information_class is not None and 'file_information_class' not in already_processed:
            already_processed.append('file_information_class')
            outfile.write(' file_information_class=%s' % (quote_attrib(self.file_information_class), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_file_attributes', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_file_attributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.file_information_class is not None and 'file_information_class' not in already_processed:
            already_processed.append('file_information_class')
            showIndent(outfile, level)
            outfile.write('file_information_class = "%s",\n' % (self.file_information_class,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('file_information_class', node)
        if value is not None and 'file_information_class' not in already_processed:
            already_processed.append('file_information_class')
            self.file_information_class = value
            self.validate_type_fileinformationclass(self.file_information_class)    # validate type type_fileinformationclass
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_file_attributes


class set_file_attributes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, srcfile=None, timestamp=None, pid=None, file_information_class=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.srcfile = _cast(None, srcfile)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.file_information_class = _cast(None, file_information_class)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if set_file_attributes.subclass:
            return set_file_attributes.subclass(*args_, **kwargs_)
        else:
            return set_file_attributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_srcfile(self): return self.srcfile
    def set_srcfile(self, srcfile): self.srcfile = srcfile
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_file_information_class(self): return self.file_information_class
    def set_file_information_class(self, file_information_class): self.file_information_class = file_information_class
    def validate_type_fileinformationclass(self, value):
        # Validate type type_fileinformationclass, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='set_file_attributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='set_file_attributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='set_file_attributes'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            outfile.write(' srcfile=%s' % (self.gds_format_string(quote_attrib(self.srcfile).encode(ExternalEncoding), input_name='srcfile'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.file_information_class is not None and 'file_information_class' not in already_processed:
            already_processed.append('file_information_class')
            outfile.write(' file_information_class=%s' % (quote_attrib(self.file_information_class), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='set_file_attributes', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='set_file_attributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.srcfile is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            showIndent(outfile, level)
            outfile.write('srcfile = "%s",\n' % (self.srcfile,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.file_information_class is not None and 'file_information_class' not in already_processed:
            already_processed.append('file_information_class')
            showIndent(outfile, level)
            outfile.write('file_information_class = "%s",\n' % (self.file_information_class,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('srcfile', node)
        if value is not None and 'srcfile' not in already_processed:
            already_processed.append('srcfile')
            self.srcfile = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('file_information_class', node)
        if value is not None and 'file_information_class' not in already_processed:
            already_processed.append('file_information_class')
            self.file_information_class = value
            self.validate_type_fileinformationclass(self.file_information_class)    # validate type type_fileinformationclass
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class set_file_attributes


class registry_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, open_key=None, create_key=None, delete_key=None, enum_keys=None, set_value=None, delete_value=None, query_key_info=None, query_value=None, enum_values=None):
        self.open_key = []
        self.create_key = []
        self.delete_key = []
        self.enum_keys = []
        self.set_value = []
        self.delete_value = []
        self.query_key_info = []
        self.query_value = []
        self.enum_values = []
    def factory(*args_, **kwargs_):
        if registry_section.subclass:
            return registry_section.subclass(*args_, **kwargs_)
        else:
            return registry_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_open_key(self): return self.open_key
    def set_open_key(self, open_key): self.open_key = open_key
    def get_create_key(self): return self.create_key
    def set_create_key(self, create_key): self.create_key = create_key
    def get_delete_key(self): return self.delete_key
    def set_delete_key(self, delete_key): self.delete_key = delete_key
    def get_enum_keys(self): return self.enum_keys
    def set_enum_keys(self, enum_keys): self.enum_keys = enum_keys
    def get_set_value(self): return self.set_value
    def set_set_value(self, set_value): self.set_value = set_value
    def get_delete_value(self): return self.delete_value
    def set_delete_value(self, delete_value): self.delete_value = delete_value
    def get_query_key_info(self): return self.query_key_info
    def set_query_key_info(self, query_key_info): self.query_key_info = query_key_info
    def get_query_value(self): return self.query_value
    def set_query_value(self, query_value): self.query_value = query_value
    def get_enum_values(self): return self.enum_values
    def set_enum_values(self, enum_values): self.enum_values = enum_values
    def export(self, outfile, level, namespace_='', name_='registry_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='registry_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='registry_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='registry_section', fromsubclass_=False):
        if self.open_key is not None:
            self.open_key.export(outfile, level, namespace_, name_='open_key')
        if self.create_key is not None:
            self.create_key.export(outfile, level, namespace_, name_='create_key')
        if self.delete_key is not None:
            self.delete_key.export(outfile, level, namespace_, name_='delete_key')
        if self.enum_keys is not None:
            self.enum_keys.export(outfile, level, namespace_, name_='enum_keys')
        if self.set_value is not None:
            self.set_value.export(outfile, level, namespace_, name_='set_value')
        if self.delete_value is not None:
            self.delete_value.export(outfile, level, namespace_, name_='delete_value')
        if self.query_key_info is not None:
            self.query_key_info.export(outfile, level, namespace_, name_='query_key_info')
        if self.query_value is not None:
            self.query_value.export(outfile, level, namespace_, name_='query_value')
        if self.enum_values is not None:
            self.enum_values.export(outfile, level, namespace_, name_='enum_values')
    def hasContent_(self):
        if (
            self.open_key is not None or
            self.create_key is not None or
            self.delete_key is not None or
            self.enum_keys is not None or
            self.set_value is not None or
            self.delete_value is not None or
            self.query_key_info is not None or
            self.query_value is not None or
            self.enum_values is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='registry_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.open_key is not None:
            showIndent(outfile, level)
            outfile.write('open_key=model_.open_key(\n')
            self.open_key.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_key is not None:
            showIndent(outfile, level)
            outfile.write('create_key=model_.create_key(\n')
            self.create_key.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.delete_key is not None:
            showIndent(outfile, level)
            outfile.write('delete_key=model_.delete_key(\n')
            self.delete_key.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enum_keys is not None:
            showIndent(outfile, level)
            outfile.write('enum_keys=model_.enum_keys(\n')
            self.enum_keys.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.set_value is not None:
            showIndent(outfile, level)
            outfile.write('set_value=model_.set_value(\n')
            self.set_value.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.delete_value is not None:
            showIndent(outfile, level)
            outfile.write('delete_value=model_.delete_value(\n')
            self.delete_value.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.query_key_info is not None:
            showIndent(outfile, level)
            outfile.write('query_key_info=model_.query_key_info(\n')
            self.query_key_info.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.query_value is not None:
            showIndent(outfile, level)
            outfile.write('query_value=model_.query_value(\n')
            self.query_value.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enum_values is not None:
            showIndent(outfile, level)
            outfile.write('enum_values=model_.enum_values(\n')
            self.enum_values.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'open_key':
            obj_ = open_key.factory()
            obj_.build(child_)
            self.open_key.append(obj_)
        elif nodeName_ == 'create_key':
            obj_ = create_key.factory()
            obj_.build(child_)
            self.create_key.append(obj_)
        elif nodeName_ == 'delete_key':
            obj_ = delete_key.factory()
            obj_.build(child_)
            self.delete_key.append(obj_)
        elif nodeName_ == 'enum_keys':
            obj_ = enum_keys.factory()
            obj_.build(child_)
            self.enum_keys.append(obj_)
        elif nodeName_ == 'set_value':
            obj_ = set_value.factory()
            obj_.build(child_)
            self.set_value.append(obj_)
        elif nodeName_ == 'delete_value':
            obj_ = delete_value.factory()
            obj_.build(child_)
            self.delete_value.append(obj_)
        elif nodeName_ == 'query_key_info':
            obj_ = query_key_info.factory()
            obj_.build(child_)
            self.query_key_info.append(obj_)
        elif nodeName_ == 'query_value':
            obj_ = query_value.factory()
            obj_.build(child_)
            self.query_value.append(obj_)
        elif nodeName_ == 'enum_values':
            obj_ = enum_values.factory()
            obj_.build(child_)
            self.enum_values.append(obj_)
# end class registry_section


class open_key(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, desired_access=None, pid=None, result=None, timestamp=None, tid=None, id=None, key_name=None):
        self.count = _cast(int, count)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.key_name = _cast(None, key_name)
        pass
    def factory(*args_, **kwargs_):
        if open_key.subclass:
            return open_key.subclass(*args_, **kwargs_)
        else:
            return open_key(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_registryaccess(self, value):
        # Validate type type_registryaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def export(self, outfile, level, namespace_='', name_='open_key', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='open_key')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='open_key'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='open_key', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='open_key'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_registryaccess(self.desired_access)    # validate type type_registryaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class open_key


class create_key(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, desired_access=None, pid=None, create_options=None, result=None, timestamp=None, tid=None, id=None, key_name=None):
        self.count = _cast(int, count)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.create_options = _cast(None, create_options)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.key_name = _cast(None, key_name)
        pass
    def factory(*args_, **kwargs_):
        if create_key.subclass:
            return create_key.subclass(*args_, **kwargs_)
        else:
            return create_key(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_registryaccess(self, value):
        # Validate type type_registryaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_create_options(self): return self.create_options
    def set_create_options(self, create_options): self.create_options = create_options
    def validate_type_registrycreateoptions(self, value):
        # Validate type type_registrycreateoptions, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def export(self, outfile, level, namespace_='', name_='create_key', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_key')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_key'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            outfile.write(' create_options=%s' % (quote_attrib(self.create_options), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='create_key', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_key'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.create_options is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            showIndent(outfile, level)
            outfile.write('create_options = "%s",\n' % (self.create_options,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_registryaccess(self.desired_access)    # validate type type_registryaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('create_options', node)
        if value is not None and 'create_options' not in already_processed:
            already_processed.append('create_options')
            self.create_options = value
            self.validate_type_registrycreateoptions(self.create_options)    # validate type type_registrycreateoptions
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_key


class delete_key(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, key_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.key_name = _cast(None, key_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if delete_key.subclass:
            return delete_key.subclass(*args_, **kwargs_)
        else:
            return delete_key(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='delete_key', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='delete_key')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='delete_key'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='delete_key', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='delete_key'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class delete_key


class enum_keys(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, index=None, timestamp=None, pid=None, result=None, key_name=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.index = _cast(int, index)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.key_name = _cast(None, key_name)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enum_keys.subclass:
            return enum_keys.subclass(*args_, **kwargs_)
        else:
            return enum_keys(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enum_keys', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enum_keys')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enum_keys'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enum_keys', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enum_keys'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            showIndent(outfile, level)
            outfile.write('index = %d,\n' % (self.index,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.append('index')
            try:
                self.index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enum_keys


class set_value(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, value_name=None, data_type=None, key_name=None, id=None, pid=None, data_truncated=None, result=None, data_hex=None, timestamp=None, tid=None, data=None, data_size=None):
        self.count = _cast(int, count)
        self.value_name = _cast(None, value_name)
        self.data_type = _cast(None, data_type)
        self.key_name = _cast(None, key_name)
        self.id = _cast(int, id)
        self.pid = _cast(int, pid)
        self.data_truncated = _cast(bool, data_truncated)
        self.result = _cast(None, result)
        self.data_hex = _cast(None, data_hex)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.data = _cast(None, data)
        self.data_size = _cast(int, data_size)
        pass
    def factory(*args_, **kwargs_):
        if set_value.subclass:
            return set_value.subclass(*args_, **kwargs_)
        else:
            return set_value(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_value_name(self): return self.value_name
    def set_value_name(self, value_name): self.value_name = value_name
    def get_data_type(self): return self.data_type
    def set_data_type(self, data_type): self.data_type = data_type
    def validate_type_registrydatatype(self, value):
        # Validate type type_registrydatatype, a restriction on xs:string.
        pass
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_data_truncated(self): return self.data_truncated
    def set_data_truncated(self, data_truncated): self.data_truncated = data_truncated
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_data_hex(self): return self.data_hex
    def set_data_hex(self, data_hex): self.data_hex = data_hex
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_data(self): return self.data
    def set_data(self, data): self.data = data
    def get_data_size(self): return self.data_size
    def set_data_size(self, data_size): self.data_size = data_size
    def export(self, outfile, level, namespace_='', name_='set_value', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='set_value')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='set_value'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.value_name is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            outfile.write(' value_name=%s' % (self.gds_format_string(quote_attrib(self.value_name).encode(ExternalEncoding), input_name='value_name'), ))
        if self.data_type is not None and 'data_type' not in already_processed:
            already_processed.append('data_type')
            outfile.write(' data_type=%s' % (quote_attrib(self.data_type), ))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.data_truncated is not None and 'data_truncated' not in already_processed:
            already_processed.append('data_truncated')
            outfile.write(' data_truncated="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.data_truncated)), input_name='data_truncated'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.data_hex is not None and 'data_hex' not in already_processed:
            already_processed.append('data_hex')
            outfile.write(' data_hex=%s' % (quote_attrib(self.data_hex), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.data is not None and 'data' not in already_processed:
            already_processed.append('data')
            outfile.write(' data=%s' % (self.gds_format_string(quote_attrib(self.data).encode(ExternalEncoding), input_name='data'), ))
        if self.data_size is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            outfile.write(' data_size="%s"' % self.gds_format_integer(self.data_size, input_name='data_size'))
    def exportChildren(self, outfile, level, namespace_='', name_='set_value', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='set_value'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.value_name is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            showIndent(outfile, level)
            outfile.write('value_name = "%s",\n' % (self.value_name,))
        if self.data_type is not None and 'data_type' not in already_processed:
            already_processed.append('data_type')
            showIndent(outfile, level)
            outfile.write('data_type = "%s",\n' % (self.data_type,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.data_truncated is not None and 'data_truncated' not in already_processed:
            already_processed.append('data_truncated')
            showIndent(outfile, level)
            outfile.write('data_truncated = %s,\n' % (self.data_truncated,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.data_hex is not None and 'data_hex' not in already_processed:
            already_processed.append('data_hex')
            showIndent(outfile, level)
            outfile.write('data_hex = "%s",\n' % (self.data_hex,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.data is not None and 'data' not in already_processed:
            already_processed.append('data')
            showIndent(outfile, level)
            outfile.write('data = "%s",\n' % (self.data,))
        if self.data_size is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            showIndent(outfile, level)
            outfile.write('data_size = %d,\n' % (self.data_size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('value_name', node)
        if value is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            self.value_name = value
        value = find_attr_value_('data_type', node)
        if value is not None and 'data_type' not in already_processed:
            already_processed.append('data_type')
            self.data_type = value
            self.validate_type_registrydatatype(self.data_type)    # validate type type_registrydatatype
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('data_truncated', node)
        if value is not None and 'data_truncated' not in already_processed:
            already_processed.append('data_truncated')
            if value in ('true', '1'):
                self.data_truncated = True
            elif value in ('false', '0'):
                self.data_truncated = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('data_hex', node)
        if value is not None and 'data_hex' not in already_processed:
            already_processed.append('data_hex')
            self.data_hex = value
            self.validate_type_hexaddr(self.data_hex)    # validate type type_hexaddr
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('data', node)
        if value is not None and 'data' not in already_processed:
            already_processed.append('data')
            self.data = value
        value = find_attr_value_('data_size', node)
        if value is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            try:
                self.data_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.data_size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class set_value


class delete_value(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, value_name=None, key_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.value_name = _cast(None, value_name)
        self.key_name = _cast(None, key_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if delete_value.subclass:
            return delete_value.subclass(*args_, **kwargs_)
        else:
            return delete_value(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_value_name(self): return self.value_name
    def set_value_name(self, value_name): self.value_name = value_name
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='delete_value', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='delete_value')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='delete_value'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.value_name is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            outfile.write(' value_name=%s' % (self.gds_format_string(quote_attrib(self.value_name).encode(ExternalEncoding), input_name='value_name'), ))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='delete_value', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='delete_value'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.value_name is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            showIndent(outfile, level)
            outfile.write('value_name = "%s",\n' % (self.value_name,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('value_name', node)
        if value is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            self.value_name = value
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class delete_value


class query_key_info(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, key_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.key_name = _cast(None, key_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if query_key_info.subclass:
            return query_key_info.subclass(*args_, **kwargs_)
        else:
            return query_key_info(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='query_key_info', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='query_key_info')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='query_key_info'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='query_key_info', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='query_key_info'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class query_key_info


class query_value(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, value_name=None, key_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.value_name = _cast(None, value_name)
        self.key_name = _cast(None, key_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if query_value.subclass:
            return query_value.subclass(*args_, **kwargs_)
        else:
            return query_value(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_value_name(self): return self.value_name
    def set_value_name(self, value_name): self.value_name = value_name
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='query_value', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='query_value')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='query_value'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.value_name is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            outfile.write(' value_name=%s' % (self.gds_format_string(quote_attrib(self.value_name).encode(ExternalEncoding), input_name='value_name'), ))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='query_value', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='query_value'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.value_name is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            showIndent(outfile, level)
            outfile.write('value_name = "%s",\n' % (self.value_name,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('value_name', node)
        if value is not None and 'value_name' not in already_processed:
            already_processed.append('value_name')
            self.value_name = value
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class query_value


class enum_values(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, index=None, timestamp=None, pid=None, result=None, key_name=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.index = _cast(int, index)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.key_name = _cast(None, key_name)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enum_values.subclass:
            return enum_values.subclass(*args_, **kwargs_)
        else:
            return enum_values(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_key_name(self): return self.key_name
    def set_key_name(self, key_name): self.key_name = key_name
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enum_values', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enum_values')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enum_values'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            outfile.write(' key_name=%s' % (self.gds_format_string(quote_attrib(self.key_name).encode(ExternalEncoding), input_name='key_name'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enum_values', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enum_values'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.index is not None and 'index' not in already_processed:
            already_processed.append('index')
            showIndent(outfile, level)
            outfile.write('index = %d,\n' % (self.index,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.key_name is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            showIndent(outfile, level)
            outfile.write('key_name = "%s",\n' % (self.key_name,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.append('index')
            try:
                self.index = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('key_name', node)
        if value is not None and 'key_name' not in already_processed:
            already_processed.append('key_name')
            self.key_name = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enum_values


class process_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, initial_context=None, create_process=None, create_process_as_user=None, open_process=None, kill_process=None, enumerate_processes=None, impersonate_process=None, set_process_cannot_terminate=None):
        self.initial_context = []
        self.create_process = []
        self.create_process_as_user = []
        self.open_process = []
        self.kill_process = []
        self.enumerate_processes = []
        self.impersonate_process = []
        self.set_process_cannot_terminate = []
    def factory(*args_, **kwargs_):
        if process_section.subclass:
            return process_section.subclass(*args_, **kwargs_)
        else:
            return process_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_initial_context(self): return self.initial_context
    def set_initial_context(self, initial_context): self.initial_context = initial_context
    def get_create_process(self): return self.create_process
    def set_create_process(self, create_process): self.create_process = create_process
    def get_create_process_as_user(self): return self.create_process_as_user
    def set_create_process_as_user(self, create_process_as_user): self.create_process_as_user = create_process_as_user
    def get_open_process(self): return self.open_process
    def set_open_process(self, open_process): self.open_process = open_process
    def get_kill_process(self): return self.kill_process
    def set_kill_process(self, kill_process): self.kill_process = kill_process
    def get_enumerate_processes(self): return self.enumerate_processes
    def set_enumerate_processes(self, enumerate_processes): self.enumerate_processes = enumerate_processes
    def get_impersonate_process(self): return self.impersonate_process
    def set_impersonate_process(self, impersonate_process): self.impersonate_process = impersonate_process
    def get_set_process_cannot_terminate(self): return self.set_process_cannot_terminate
    def set_set_process_cannot_terminate(self, set_process_cannot_terminate): self.set_process_cannot_terminate = set_process_cannot_terminate
    def export(self, outfile, level, namespace_='', name_='process_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='process_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='process_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='process_section', fromsubclass_=False):
        if self.initial_context is not None:
            self.initial_context.export(outfile, level, namespace_, name_='initial_context')
        if self.create_process is not None:
            self.create_process.export(outfile, level, namespace_, name_='create_process')
        if self.create_process_as_user is not None:
            self.create_process_as_user.export(outfile, level, namespace_, name_='create_process_as_user')
        if self.open_process is not None:
            self.open_process.export(outfile, level, namespace_, name_='open_process')
        if self.kill_process is not None:
            self.kill_process.export(outfile, level, namespace_, name_='kill_process')
        if self.enumerate_processes is not None:
            self.enumerate_processes.export(outfile, level, namespace_, name_='enumerate_processes')
        if self.impersonate_process is not None:
            self.impersonate_process.export(outfile, level, namespace_, name_='impersonate_process')
        if self.set_process_cannot_terminate is not None:
            self.set_process_cannot_terminate.export(outfile, level, namespace_, name_='set_process_cannot_terminate')
    def hasContent_(self):
        if (
            self.initial_context is not None or
            self.create_process is not None or
            self.create_process_as_user is not None or
            self.open_process is not None or
            self.kill_process is not None or
            self.enumerate_processes is not None or
            self.impersonate_process is not None or
            self.set_process_cannot_terminate is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='process_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.initial_context is not None:
            showIndent(outfile, level)
            outfile.write('initial_context=model_.initial_context(\n')
            self.initial_context.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_process is not None:
            showIndent(outfile, level)
            outfile.write('create_process=model_.create_process(\n')
            self.create_process.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_process_as_user is not None:
            showIndent(outfile, level)
            outfile.write('create_process_as_user=model_.create_process_as_user(\n')
            self.create_process_as_user.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.open_process is not None:
            showIndent(outfile, level)
            outfile.write('open_process=model_.open_process(\n')
            self.open_process.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.kill_process is not None:
            showIndent(outfile, level)
            outfile.write('kill_process=model_.kill_process(\n')
            self.kill_process.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_processes is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_processes=model_.enumerate_processes(\n')
            self.enumerate_processes.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.impersonate_process is not None:
            showIndent(outfile, level)
            outfile.write('impersonate_process=model_.impersonate_process(\n')
            self.impersonate_process.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.set_process_cannot_terminate is not None:
            showIndent(outfile, level)
            outfile.write('set_process_cannot_terminate=model_.set_process_cannot_terminate(\n')
            self.set_process_cannot_terminate.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'initial_context':
            obj_ = initial_context.factory()
            obj_.build(child_)
            self.initial_context.append(obj_)
        elif nodeName_ == 'create_process':
            obj_ = create_process.factory()
            obj_.build(child_)
            self.create_process.append(obj_)
        elif nodeName_ == 'create_process_as_user':
            obj_ = create_process_as_user.factory()
            obj_.build(child_)
            self.create_process_as_user.append(obj_)
        elif nodeName_ == 'open_process':
            obj_ = open_process.factory()
            obj_.build(child_)
            self.open_process.append(obj_)
        elif nodeName_ == 'kill_process':
            obj_ = kill_process.factory()
            obj_.build(child_)
            self.kill_process.append(obj_)
        elif nodeName_ == 'enumerate_processes':
            obj_ = enumerate_processes.factory()
            obj_.build(child_)
            self.enumerate_processes.append(obj_)
        elif nodeName_ == 'impersonate_process':
            obj_ = impersonate_process.factory()
            obj_.build(child_)
            self.impersonate_process.append(obj_)
        elif nodeName_ == 'set_process_cannot_terminate':
            obj_ = set_process_cannot_terminate.factory()
            obj_.build(child_)
            self.set_process_cannot_terminate.append(obj_)
# end class process_section


class initial_context(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, token_sid=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.token_sid = _cast(None, token_sid)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if initial_context.subclass:
            return initial_context.subclass(*args_, **kwargs_)
        else:
            return initial_context(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_token_sid(self): return self.token_sid
    def set_token_sid(self, token_sid): self.token_sid = token_sid
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='initial_context', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='initial_context')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='initial_context'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.token_sid is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            outfile.write(' token_sid=%s' % (self.gds_format_string(quote_attrib(self.token_sid).encode(ExternalEncoding), input_name='token_sid'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='initial_context', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='initial_context'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.token_sid is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            showIndent(outfile, level)
            outfile.write('token_sid = "%s",\n' % (self.token_sid,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('token_sid', node)
        if value is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            self.token_sid = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class initial_context


class create_process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, parent_pid=None, creation_flags=None, timestamp=None, pid=None, command_line=None, show_window=None, target_pid=None, result=None, tid=None, password=None, id=None, image_filename=None):
        self.count = _cast(int, count)
        self.parent_pid = _cast(int, parent_pid)
        self.creation_flags = _cast(None, creation_flags)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.command_line = _cast(None, command_line)
        self.show_window = _cast(int, show_window)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.password = _cast(None, password)
        self.id = _cast(int, id)
        self.image_filename = _cast(None, image_filename)
        pass
    def factory(*args_, **kwargs_):
        if create_process.subclass:
            return create_process.subclass(*args_, **kwargs_)
        else:
            return create_process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_parent_pid(self): return self.parent_pid
    def set_parent_pid(self, parent_pid): self.parent_pid = parent_pid
    def get_creation_flags(self): return self.creation_flags
    def set_creation_flags(self, creation_flags): self.creation_flags = creation_flags
    def validate_type_processcreationflags(self, value):
        # Validate type type_processcreationflags, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_command_line(self): return self.command_line
    def set_command_line(self, command_line): self.command_line = command_line
    def get_show_window(self): return self.show_window
    def set_show_window(self, show_window): self.show_window = show_window
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_image_filename(self): return self.image_filename
    def set_image_filename(self, image_filename): self.image_filename = image_filename
    def export(self, outfile, level, namespace_='', name_='create_process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_process'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.parent_pid is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            outfile.write(' parent_pid="%s"' % self.gds_format_integer(self.parent_pid, input_name='parent_pid'))
        if self.creation_flags is not None and 'creation_flags' not in already_processed:
            already_processed.append('creation_flags')
            outfile.write(' creation_flags=%s' % (quote_attrib(self.creation_flags), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.command_line is not None and 'command_line' not in already_processed:
            already_processed.append('command_line')
            outfile.write(' command_line=%s' % (self.gds_format_string(quote_attrib(self.command_line).encode(ExternalEncoding), input_name='command_line'), ))
        if self.show_window is not None and 'show_window' not in already_processed:
            already_processed.append('show_window')
            outfile.write(' show_window="%s"' % self.gds_format_integer(self.show_window, input_name='show_window'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            outfile.write(' password=%s' % (self.gds_format_string(quote_attrib(self.password).encode(ExternalEncoding), input_name='password'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.image_filename is not None and 'image_filename' not in already_processed:
            already_processed.append('image_filename')
            outfile.write(' image_filename=%s' % (self.gds_format_string(quote_attrib(self.image_filename).encode(ExternalEncoding), input_name='image_filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='create_process', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.parent_pid is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            showIndent(outfile, level)
            outfile.write('parent_pid = %d,\n' % (self.parent_pid,))
        if self.creation_flags is not None and 'creation_flags' not in already_processed:
            already_processed.append('creation_flags')
            showIndent(outfile, level)
            outfile.write('creation_flags = "%s",\n' % (self.creation_flags,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.command_line is not None and 'command_line' not in already_processed:
            already_processed.append('command_line')
            showIndent(outfile, level)
            outfile.write('command_line = "%s",\n' % (self.command_line,))
        if self.show_window is not None and 'show_window' not in already_processed:
            already_processed.append('show_window')
            showIndent(outfile, level)
            outfile.write('show_window = %d,\n' % (self.show_window,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            showIndent(outfile, level)
            outfile.write('password = "%s",\n' % (self.password,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.image_filename is not None and 'image_filename' not in already_processed:
            already_processed.append('image_filename')
            showIndent(outfile, level)
            outfile.write('image_filename = "%s",\n' % (self.image_filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('parent_pid', node)
        if value is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            try:
                self.parent_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('creation_flags', node)
        if value is not None and 'creation_flags' not in already_processed:
            already_processed.append('creation_flags')
            self.creation_flags = value
            self.validate_type_processcreationflags(self.creation_flags)    # validate type type_processcreationflags
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('command_line', node)
        if value is not None and 'command_line' not in already_processed:
            already_processed.append('command_line')
            self.command_line = value
        value = find_attr_value_('show_window', node)
        if value is not None and 'show_window' not in already_processed:
            already_processed.append('show_window')
            try:
                self.show_window = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('password', node)
        if value is not None and 'password' not in already_processed:
            already_processed.append('password')
            self.password = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('image_filename', node)
        if value is not None and 'image_filename' not in already_processed:
            already_processed.append('image_filename')
            self.image_filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_process


class create_process_as_user(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, count=None, domain=None, parent_pid=None, creation_flags=None, desired_access=None, pid=None, command_line=None, show_window=None, target_pid=None, result=None, timestamp=None, tid=None, password=None, id=None, image_filename=None):
        self.username = _cast(None, username)
        self.count = _cast(int, count)
        self.domain = _cast(None, domain)
        self.parent_pid = _cast(int, parent_pid)
        self.creation_flags = _cast(None, creation_flags)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.command_line = _cast(None, command_line)
        self.show_window = _cast(int, show_window)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.password = _cast(None, password)
        self.id = _cast(int, id)
        self.image_filename = _cast(None, image_filename)
        pass
    def factory(*args_, **kwargs_):
        if create_process_as_user.subclass:
            return create_process_as_user.subclass(*args_, **kwargs_)
        else:
            return create_process_as_user(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_domain(self): return self.domain
    def set_domain(self, domain): self.domain = domain
    def get_parent_pid(self): return self.parent_pid
    def set_parent_pid(self, parent_pid): self.parent_pid = parent_pid
    def get_creation_flags(self): return self.creation_flags
    def set_creation_flags(self, creation_flags): self.creation_flags = creation_flags
    def validate_type_processcreationflags(self, value):
        # Validate type type_processcreationflags, a restriction on xs:string.
        pass
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_processaccess(self, value):
        # Validate type type_processaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_command_line(self): return self.command_line
    def set_command_line(self, command_line): self.command_line = command_line
    def get_show_window(self): return self.show_window
    def set_show_window(self, show_window): self.show_window = show_window
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_password(self): return self.password
    def set_password(self, password): self.password = password
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_image_filename(self): return self.image_filename
    def set_image_filename(self, image_filename): self.image_filename = image_filename
    def export(self, outfile, level, namespace_='', name_='create_process_as_user', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_process_as_user')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_process_as_user'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            outfile.write(' domain=%s' % (self.gds_format_string(quote_attrib(self.domain).encode(ExternalEncoding), input_name='domain'), ))
        if self.parent_pid is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            outfile.write(' parent_pid="%s"' % self.gds_format_integer(self.parent_pid, input_name='parent_pid'))
        if self.creation_flags is not None and 'creation_flags' not in already_processed:
            already_processed.append('creation_flags')
            outfile.write(' creation_flags=%s' % (quote_attrib(self.creation_flags), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.command_line is not None and 'command_line' not in already_processed:
            already_processed.append('command_line')
            outfile.write(' command_line=%s' % (self.gds_format_string(quote_attrib(self.command_line).encode(ExternalEncoding), input_name='command_line'), ))
        if self.show_window is not None and 'show_window' not in already_processed:
            already_processed.append('show_window')
            outfile.write(' show_window="%s"' % self.gds_format_integer(self.show_window, input_name='show_window'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            outfile.write(' password=%s' % (self.gds_format_string(quote_attrib(self.password).encode(ExternalEncoding), input_name='password'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.image_filename is not None and 'image_filename' not in already_processed:
            already_processed.append('image_filename')
            outfile.write(' image_filename=%s' % (self.gds_format_string(quote_attrib(self.image_filename).encode(ExternalEncoding), input_name='image_filename'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='create_process_as_user', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_process_as_user'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            showIndent(outfile, level)
            outfile.write('domain = "%s",\n' % (self.domain,))
        if self.parent_pid is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            showIndent(outfile, level)
            outfile.write('parent_pid = %d,\n' % (self.parent_pid,))
        if self.creation_flags is not None and 'creation_flags' not in already_processed:
            already_processed.append('creation_flags')
            showIndent(outfile, level)
            outfile.write('creation_flags = "%s",\n' % (self.creation_flags,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.command_line is not None and 'command_line' not in already_processed:
            already_processed.append('command_line')
            showIndent(outfile, level)
            outfile.write('command_line = "%s",\n' % (self.command_line,))
        if self.show_window is not None and 'show_window' not in already_processed:
            already_processed.append('show_window')
            showIndent(outfile, level)
            outfile.write('show_window = %d,\n' % (self.show_window,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.password is not None and 'password' not in already_processed:
            already_processed.append('password')
            showIndent(outfile, level)
            outfile.write('password = "%s",\n' % (self.password,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.image_filename is not None and 'image_filename' not in already_processed:
            already_processed.append('image_filename')
            showIndent(outfile, level)
            outfile.write('image_filename = "%s",\n' % (self.image_filename,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('domain', node)
        if value is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            self.domain = value
        value = find_attr_value_('parent_pid', node)
        if value is not None and 'parent_pid' not in already_processed:
            already_processed.append('parent_pid')
            try:
                self.parent_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('creation_flags', node)
        if value is not None and 'creation_flags' not in already_processed:
            already_processed.append('creation_flags')
            self.creation_flags = value
            self.validate_type_processcreationflags(self.creation_flags)    # validate type type_processcreationflags
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_processaccess(self.desired_access)    # validate type type_processaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('command_line', node)
        if value is not None and 'command_line' not in already_processed:
            already_processed.append('command_line')
            self.command_line = value
        value = find_attr_value_('show_window', node)
        if value is not None and 'show_window' not in already_processed:
            already_processed.append('show_window')
            try:
                self.show_window = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('password', node)
        if value is not None and 'password' not in already_processed:
            already_processed.append('password')
            self.password = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('image_filename', node)
        if value is not None and 'image_filename' not in already_processed:
            already_processed.append('image_filename')
            self.image_filename = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_process_as_user


class open_process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, desired_access=None, pid=None, target_pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if open_process.subclass:
            return open_process.subclass(*args_, **kwargs_)
        else:
            return open_process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_processaccess(self, value):
        # Validate type type_processaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='open_process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='open_process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='open_process'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='open_process', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='open_process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_processaccess(self.desired_access)    # validate type type_processaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class open_process


class kill_process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if kill_process.subclass:
            return kill_process.subclass(*args_, **kwargs_)
        else:
            return kill_process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='kill_process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='kill_process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='kill_process'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='kill_process', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='kill_process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class kill_process


class enumerate_processes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_processes.subclass:
            return enumerate_processes.subclass(*args_, **kwargs_)
        else:
            return enumerate_processes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_processes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_processes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_processes'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_processes', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_processes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_processes


class impersonate_process(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_pid=None, result=None, token_sid=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.token_sid = _cast(None, token_sid)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if impersonate_process.subclass:
            return impersonate_process.subclass(*args_, **kwargs_)
        else:
            return impersonate_process(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_token_sid(self): return self.token_sid
    def set_token_sid(self, token_sid): self.token_sid = token_sid
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='impersonate_process', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='impersonate_process')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='impersonate_process'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.token_sid is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            outfile.write(' token_sid=%s' % (self.gds_format_string(quote_attrib(self.token_sid).encode(ExternalEncoding), input_name='token_sid'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='impersonate_process', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='impersonate_process'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.token_sid is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            showIndent(outfile, level)
            outfile.write('token_sid = "%s",\n' % (self.token_sid,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('token_sid', node)
        if value is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            self.token_sid = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class impersonate_process


class set_process_cannot_terminate(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, enable=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.enable = _cast(bool, enable)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if set_process_cannot_terminate.subclass:
            return set_process_cannot_terminate.subclass(*args_, **kwargs_)
        else:
            return set_process_cannot_terminate(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_enable(self): return self.enable
    def set_enable(self, enable): self.enable = enable
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='set_process_cannot_terminate', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='set_process_cannot_terminate')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='set_process_cannot_terminate'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.enable is not None and 'enable' not in already_processed:
            already_processed.append('enable')
            outfile.write(' enable="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.enable)), input_name='enable'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='set_process_cannot_terminate', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='set_process_cannot_terminate'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.enable is not None and 'enable' not in already_processed:
            already_processed.append('enable')
            showIndent(outfile, level)
            outfile.write('enable = %s,\n' % (self.enable,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('enable', node)
        if value is not None and 'enable' not in already_processed:
            already_processed.append('enable')
            if value in ('true', '1'):
                self.enable = True
            elif value in ('false', '0'):
                self.enable = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class set_process_cannot_terminate


class virtualmemory_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, alloc_memory=None, free_memory=None, protect_memory=None, read_memory=None, write_memory=None, query_memory=None):
        self.alloc_memory = []
        self.free_memory = []
        self.protect_memory = []
        self.read_memory = []
        self.write_memory = []
        self.query_memory = []
    def factory(*args_, **kwargs_):
        if virtualmemory_section.subclass:
            return virtualmemory_section.subclass(*args_, **kwargs_)
        else:
            return virtualmemory_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_alloc_memory(self): return self.alloc_memory
    def set_alloc_memory(self, alloc_memory): self.alloc_memory = alloc_memory
    def get_free_memory(self): return self.free_memory
    def set_free_memory(self, free_memory): self.free_memory = free_memory
    def get_protect_memory(self): return self.protect_memory
    def set_protect_memory(self, protect_memory): self.protect_memory = protect_memory
    def get_read_memory(self): return self.read_memory
    def set_read_memory(self, read_memory): self.read_memory = read_memory
    def get_write_memory(self): return self.write_memory
    def set_write_memory(self, write_memory): self.write_memory = write_memory
    def get_query_memory(self): return self.query_memory
    def set_query_memory(self, query_memory): self.query_memory = query_memory
    def export(self, outfile, level, namespace_='', name_='virtualmemory_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='virtualmemory_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='virtualmemory_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='virtualmemory_section', fromsubclass_=False):
        if self.alloc_memory is not None:
            self.alloc_memory.export(outfile, level, namespace_, name_='alloc_memory')
        if self.free_memory is not None:
            self.free_memory.export(outfile, level, namespace_, name_='free_memory')
        if self.protect_memory is not None:
            self.protect_memory.export(outfile, level, namespace_, name_='protect_memory')
        if self.read_memory is not None:
            self.read_memory.export(outfile, level, namespace_, name_='read_memory')
        if self.write_memory is not None:
            self.write_memory.export(outfile, level, namespace_, name_='write_memory')
        if self.query_memory is not None:
            self.query_memory.export(outfile, level, namespace_, name_='query_memory')
    def hasContent_(self):
        if (
            self.alloc_memory is not None or
            self.free_memory is not None or
            self.protect_memory is not None or
            self.read_memory is not None or
            self.write_memory is not None or
            self.query_memory is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='virtualmemory_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.alloc_memory is not None:
            showIndent(outfile, level)
            outfile.write('alloc_memory=model_.alloc_memory(\n')
            self.alloc_memory.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.free_memory is not None:
            showIndent(outfile, level)
            outfile.write('free_memory=model_.free_memory(\n')
            self.free_memory.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.protect_memory is not None:
            showIndent(outfile, level)
            outfile.write('protect_memory=model_.protect_memory(\n')
            self.protect_memory.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.read_memory is not None:
            showIndent(outfile, level)
            outfile.write('read_memory=model_.read_memory(\n')
            self.read_memory.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.write_memory is not None:
            showIndent(outfile, level)
            outfile.write('write_memory=model_.write_memory(\n')
            self.write_memory.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.query_memory is not None:
            showIndent(outfile, level)
            outfile.write('query_memory=model_.query_memory(\n')
            self.query_memory.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'alloc_memory':
            obj_ = alloc_memory.factory()
            obj_.build(child_)
            self.alloc_memory.append(obj_)
        elif nodeName_ == 'free_memory':
            obj_ = free_memory.factory()
            obj_.build(child_)
            self.free_memory.append(obj_)
        elif nodeName_ == 'protect_memory':
            obj_ = protect_memory.factory()
            obj_.build(child_)
            self.protect_memory.append(obj_)
        elif nodeName_ == 'read_memory':
            obj_ = read_memory.factory()
            obj_.build(child_)
            self.read_memory.append(obj_)
        elif nodeName_ == 'write_memory':
            obj_ = write_memory.factory()
            obj_.build(child_)
            self.write_memory.append(obj_)
        elif nodeName_ == 'query_memory':
            obj_ = query_memory.factory()
            obj_.build(child_)
            self.query_memory.append(obj_)
# end class virtualmemory_section


class alloc_memory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, wanted_address=None, protection=None, wanted_size=None, timestamp=None, pid=None, target_pid=None, result=None, allocation_type=None, address=None, tid=None, id=None, size=None):
        self.count = _cast(int, count)
        self.wanted_address = _cast(None, wanted_address)
        self.protection = _cast(None, protection)
        self.wanted_size = _cast(int, wanted_size)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.allocation_type = _cast(None, allocation_type)
        self.address = _cast(None, address)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.size = _cast(int, size)
        pass
    def factory(*args_, **kwargs_):
        if alloc_memory.subclass:
            return alloc_memory.subclass(*args_, **kwargs_)
        else:
            return alloc_memory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_wanted_address(self): return self.wanted_address
    def set_wanted_address(self, wanted_address): self.wanted_address = wanted_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_protection(self): return self.protection
    def set_protection(self, protection): self.protection = protection
    def validate_type_memprotection(self, value):
        # Validate type type_memprotection, a restriction on xs:string.
        pass
    def get_wanted_size(self): return self.wanted_size
    def set_wanted_size(self, wanted_size): self.wanted_size = wanted_size
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_allocation_type(self): return self.allocation_type
    def set_allocation_type(self, allocation_type): self.allocation_type = allocation_type
    def validate_type_memallocation(self, value):
        # Validate type type_memallocation, a restriction on xs:string.
        pass
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def export(self, outfile, level, namespace_='', name_='alloc_memory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='alloc_memory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='alloc_memory'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            outfile.write(' wanted_address=%s' % (quote_attrib(self.wanted_address), ))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            outfile.write(' protection=%s' % (quote_attrib(self.protection), ))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            outfile.write(' wanted_size="%s"' % self.gds_format_integer(self.wanted_size, input_name='wanted_size'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.allocation_type is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            outfile.write(' allocation_type=%s' % (quote_attrib(self.allocation_type), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            outfile.write(' address=%s' % (quote_attrib(self.address), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='', name_='alloc_memory', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='alloc_memory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            showIndent(outfile, level)
            outfile.write('wanted_address = "%s",\n' % (self.wanted_address,))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            showIndent(outfile, level)
            outfile.write('protection = "%s",\n' % (self.protection,))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            showIndent(outfile, level)
            outfile.write('wanted_size = %d,\n' % (self.wanted_size,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.allocation_type is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            showIndent(outfile, level)
            outfile.write('allocation_type = "%s",\n' % (self.allocation_type,))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            showIndent(outfile, level)
            outfile.write('address = "%s",\n' % (self.address,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address', node)
        if value is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            self.wanted_address = value
            self.validate_type_hexaddr(self.wanted_address)    # validate type type_hexaddr
        value = find_attr_value_('protection', node)
        if value is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            self.protection = value
            self.validate_type_memprotection(self.protection)    # validate type type_memprotection
        value = find_attr_value_('wanted_size', node)
        if value is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            try:
                self.wanted_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('allocation_type', node)
        if value is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            self.allocation_type = value
            self.validate_type_memallocation(self.allocation_type)    # validate type type_memallocation
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.append('address')
            self.address = value
            self.validate_type_hexaddr(self.address)    # validate type type_hexaddr
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.append('size')
            try:
                self.size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class alloc_memory


class free_memory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_pid=None, result=None, allocation_type=None, address=None, tid=None, id=None, size=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.allocation_type = _cast(None, allocation_type)
        self.address = _cast(None, address)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.size = _cast(int, size)
        pass
    def factory(*args_, **kwargs_):
        if free_memory.subclass:
            return free_memory.subclass(*args_, **kwargs_)
        else:
            return free_memory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_allocation_type(self): return self.allocation_type
    def set_allocation_type(self, allocation_type): self.allocation_type = allocation_type
    def validate_type_memallocation(self, value):
        # Validate type type_memallocation, a restriction on xs:string.
        pass
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def export(self, outfile, level, namespace_='', name_='free_memory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='free_memory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='free_memory'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.allocation_type is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            outfile.write(' allocation_type=%s' % (quote_attrib(self.allocation_type), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            outfile.write(' address=%s' % (quote_attrib(self.address), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='', name_='free_memory', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='free_memory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.allocation_type is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            showIndent(outfile, level)
            outfile.write('allocation_type = "%s",\n' % (self.allocation_type,))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            showIndent(outfile, level)
            outfile.write('address = "%s",\n' % (self.address,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('allocation_type', node)
        if value is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            self.allocation_type = value
            self.validate_type_memallocation(self.allocation_type)    # validate type type_memallocation
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.append('address')
            self.address = value
            self.validate_type_hexaddr(self.address)    # validate type type_hexaddr
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.append('size')
            try:
                self.size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class free_memory


class protect_memory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, wanted_address=None, target_pid=None, wanted_size=None, timestamp=None, pid=None, id=None, protection=None, result=None, address=None, tid=None, wanted_address_target=None, size=None):
        self.count = _cast(int, count)
        self.wanted_address = _cast(None, wanted_address)
        self.target_pid = _cast(int, target_pid)
        self.wanted_size = _cast(int, wanted_size)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.id = _cast(int, id)
        self.protection = _cast(None, protection)
        self.result = _cast(None, result)
        self.address = _cast(None, address)
        self.tid = _cast(int, tid)
        self.wanted_address_target = _cast(None, wanted_address_target)
        self.size = _cast(int, size)
        pass
    def factory(*args_, **kwargs_):
        if protect_memory.subclass:
            return protect_memory.subclass(*args_, **kwargs_)
        else:
            return protect_memory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_wanted_address(self): return self.wanted_address
    def set_wanted_address(self, wanted_address): self.wanted_address = wanted_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_wanted_size(self): return self.wanted_size
    def set_wanted_size(self, wanted_size): self.wanted_size = wanted_size
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_protection(self): return self.protection
    def set_protection(self, protection): self.protection = protection
    def validate_type_memprotection(self, value):
        # Validate type type_memprotection, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_wanted_address_target(self): return self.wanted_address_target
    def set_wanted_address_target(self, wanted_address_target): self.wanted_address_target = wanted_address_target
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def export(self, outfile, level, namespace_='', name_='protect_memory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='protect_memory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='protect_memory'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            outfile.write(' wanted_address=%s' % (quote_attrib(self.wanted_address), ))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            outfile.write(' wanted_size="%s"' % self.gds_format_integer(self.wanted_size, input_name='wanted_size'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            outfile.write(' protection=%s' % (quote_attrib(self.protection), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            outfile.write(' address=%s' % (quote_attrib(self.address), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.wanted_address_target is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            outfile.write(' wanted_address_target=%s' % (self.gds_format_string(quote_attrib(self.wanted_address_target).encode(ExternalEncoding), input_name='wanted_address_target'), ))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='', name_='protect_memory', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='protect_memory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            showIndent(outfile, level)
            outfile.write('wanted_address = "%s",\n' % (self.wanted_address,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            showIndent(outfile, level)
            outfile.write('wanted_size = %d,\n' % (self.wanted_size,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            showIndent(outfile, level)
            outfile.write('protection = "%s",\n' % (self.protection,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            showIndent(outfile, level)
            outfile.write('address = "%s",\n' % (self.address,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.wanted_address_target is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            showIndent(outfile, level)
            outfile.write('wanted_address_target = "%s",\n' % (self.wanted_address_target,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address', node)
        if value is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            self.wanted_address = value
            self.validate_type_hexaddr(self.wanted_address)    # validate type type_hexaddr
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_size', node)
        if value is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            try:
                self.wanted_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protection', node)
        if value is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            self.protection = value
            self.validate_type_memprotection(self.protection)    # validate type type_memprotection
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.append('address')
            self.address = value
            self.validate_type_hexaddr(self.address)    # validate type type_hexaddr
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address_target', node)
        if value is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            self.wanted_address_target = value
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.append('size')
            try:
                self.size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class protect_memory


class read_memory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, wanted_address=None, wanted_size=None, timestamp=None, pid=None, id=None, target_pid=None, result=None, address=None, tid=None, wanted_address_target=None, size=None):
        self.count = _cast(int, count)
        self.wanted_address = _cast(None, wanted_address)
        self.wanted_size = _cast(int, wanted_size)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.id = _cast(int, id)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.address = _cast(None, address)
        self.tid = _cast(int, tid)
        self.wanted_address_target = _cast(None, wanted_address_target)
        self.size = _cast(int, size)
        pass
    def factory(*args_, **kwargs_):
        if read_memory.subclass:
            return read_memory.subclass(*args_, **kwargs_)
        else:
            return read_memory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_wanted_address(self): return self.wanted_address
    def set_wanted_address(self, wanted_address): self.wanted_address = wanted_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_wanted_size(self): return self.wanted_size
    def set_wanted_size(self, wanted_size): self.wanted_size = wanted_size
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_wanted_address_target(self): return self.wanted_address_target
    def set_wanted_address_target(self, wanted_address_target): self.wanted_address_target = wanted_address_target
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def export(self, outfile, level, namespace_='', name_='read_memory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='read_memory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='read_memory'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            outfile.write(' wanted_address=%s' % (quote_attrib(self.wanted_address), ))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            outfile.write(' wanted_size="%s"' % self.gds_format_integer(self.wanted_size, input_name='wanted_size'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            outfile.write(' address=%s' % (quote_attrib(self.address), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.wanted_address_target is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            outfile.write(' wanted_address_target=%s' % (self.gds_format_string(quote_attrib(self.wanted_address_target).encode(ExternalEncoding), input_name='wanted_address_target'), ))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='', name_='read_memory', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='read_memory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            showIndent(outfile, level)
            outfile.write('wanted_address = "%s",\n' % (self.wanted_address,))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            showIndent(outfile, level)
            outfile.write('wanted_size = %d,\n' % (self.wanted_size,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            showIndent(outfile, level)
            outfile.write('address = "%s",\n' % (self.address,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.wanted_address_target is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            showIndent(outfile, level)
            outfile.write('wanted_address_target = "%s",\n' % (self.wanted_address_target,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address', node)
        if value is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            self.wanted_address = value
            self.validate_type_hexaddr(self.wanted_address)    # validate type type_hexaddr
        value = find_attr_value_('wanted_size', node)
        if value is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            try:
                self.wanted_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.append('address')
            self.address = value
            self.validate_type_hexaddr(self.address)    # validate type type_hexaddr
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address_target', node)
        if value is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            self.wanted_address_target = value
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.append('size')
            try:
                self.size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class read_memory


class write_memory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, wanted_address=None, wanted_size=None, timestamp=None, pid=None, id=None, target_pid=None, result=None, address=None, tid=None, wanted_address_target=None, size=None):
        self.count = _cast(int, count)
        self.wanted_address = _cast(None, wanted_address)
        self.wanted_size = _cast(int, wanted_size)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.id = _cast(int, id)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.address = _cast(None, address)
        self.tid = _cast(int, tid)
        self.wanted_address_target = _cast(None, wanted_address_target)
        self.size = _cast(int, size)
        pass
    def factory(*args_, **kwargs_):
        if write_memory.subclass:
            return write_memory.subclass(*args_, **kwargs_)
        else:
            return write_memory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_wanted_address(self): return self.wanted_address
    def set_wanted_address(self, wanted_address): self.wanted_address = wanted_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_wanted_size(self): return self.wanted_size
    def set_wanted_size(self, wanted_size): self.wanted_size = wanted_size
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_wanted_address_target(self): return self.wanted_address_target
    def set_wanted_address_target(self, wanted_address_target): self.wanted_address_target = wanted_address_target
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def export(self, outfile, level, namespace_='', name_='write_memory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='write_memory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='write_memory'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            outfile.write(' wanted_address=%s' % (quote_attrib(self.wanted_address), ))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            outfile.write(' wanted_size="%s"' % self.gds_format_integer(self.wanted_size, input_name='wanted_size'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            outfile.write(' address=%s' % (quote_attrib(self.address), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.wanted_address_target is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            outfile.write(' wanted_address_target=%s' % (self.gds_format_string(quote_attrib(self.wanted_address_target).encode(ExternalEncoding), input_name='wanted_address_target'), ))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='', name_='write_memory', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='write_memory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.wanted_address is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            showIndent(outfile, level)
            outfile.write('wanted_address = "%s",\n' % (self.wanted_address,))
        if self.wanted_size is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            showIndent(outfile, level)
            outfile.write('wanted_size = %d,\n' % (self.wanted_size,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            showIndent(outfile, level)
            outfile.write('address = "%s",\n' % (self.address,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.wanted_address_target is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            showIndent(outfile, level)
            outfile.write('wanted_address_target = "%s",\n' % (self.wanted_address_target,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.append('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address', node)
        if value is not None and 'wanted_address' not in already_processed:
            already_processed.append('wanted_address')
            self.wanted_address = value
            self.validate_type_hexaddr(self.wanted_address)    # validate type type_hexaddr
        value = find_attr_value_('wanted_size', node)
        if value is not None and 'wanted_size' not in already_processed:
            already_processed.append('wanted_size')
            try:
                self.wanted_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.append('address')
            self.address = value
            self.validate_type_hexaddr(self.address)    # validate type type_hexaddr
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('wanted_address_target', node)
        if value is not None and 'wanted_address_target' not in already_processed:
            already_processed.append('wanted_address_target')
            self.wanted_address_target = value
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.append('size')
            try:
                self.size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class write_memory


class query_memory(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_pid=None, result=None, address=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.address = _cast(None, address)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if query_memory.subclass:
            return query_memory.subclass(*args_, **kwargs_)
        else:
            return query_memory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_address(self): return self.address
    def set_address(self, address): self.address = address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='query_memory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='query_memory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='query_memory'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            outfile.write(' address=%s' % (quote_attrib(self.address), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='query_memory', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='query_memory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.address is not None and 'address' not in already_processed:
            already_processed.append('address')
            showIndent(outfile, level)
            outfile.write('address = "%s",\n' % (self.address,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('address', node)
        if value is not None and 'address' not in already_processed:
            already_processed.append('address')
            self.address = value
            self.validate_type_hexaddr(self.address)    # validate type type_hexaddr
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class query_memory


class filemapping_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, create_file_mapping=None, open_file_mapping=None, map_view_of_file=None):
        self.create_file_mapping = []
        self.open_file_mapping = []
        self.map_view_of_file = []
    def factory(*args_, **kwargs_):
        if filemapping_section.subclass:
            return filemapping_section.subclass(*args_, **kwargs_)
        else:
            return filemapping_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_create_file_mapping(self): return self.create_file_mapping
    def set_create_file_mapping(self, create_file_mapping): self.create_file_mapping = create_file_mapping
    def get_open_file_mapping(self): return self.open_file_mapping
    def set_open_file_mapping(self, open_file_mapping): self.open_file_mapping = open_file_mapping
    def get_map_view_of_file(self): return self.map_view_of_file
    def set_map_view_of_file(self, map_view_of_file): self.map_view_of_file = map_view_of_file
    def export(self, outfile, level, namespace_='', name_='filemapping_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='filemapping_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='filemapping_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='filemapping_section', fromsubclass_=False):
        if self.create_file_mapping is not None:
            self.create_file_mapping.export(outfile, level, namespace_, name_='create_file_mapping')
        if self.open_file_mapping is not None:
            self.open_file_mapping.export(outfile, level, namespace_, name_='open_file_mapping')
        if self.map_view_of_file is not None:
            self.map_view_of_file.export(outfile, level, namespace_, name_='map_view_of_file')
    def hasContent_(self):
        if (
            self.create_file_mapping is not None or
            self.open_file_mapping is not None or
            self.map_view_of_file is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='filemapping_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.create_file_mapping is not None:
            showIndent(outfile, level)
            outfile.write('create_file_mapping=model_.create_file_mapping(\n')
            self.create_file_mapping.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.open_file_mapping is not None:
            showIndent(outfile, level)
            outfile.write('open_file_mapping=model_.open_file_mapping(\n')
            self.open_file_mapping.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.map_view_of_file is not None:
            showIndent(outfile, level)
            outfile.write('map_view_of_file=model_.map_view_of_file(\n')
            self.map_view_of_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'create_file_mapping':
            obj_ = create_file_mapping.factory()
            obj_.build(child_)
            self.create_file_mapping.append(obj_)
        elif nodeName_ == 'open_file_mapping':
            obj_ = open_file_mapping.factory()
            obj_.build(child_)
            self.open_file_mapping.append(obj_)
        elif nodeName_ == 'map_view_of_file':
            obj_ = map_view_of_file.factory()
            obj_.build(child_)
            self.map_view_of_file.append(obj_)
# end class filemapping_section


class create_file_mapping(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, file_handle=None, desired_access=None, pid=None, filename=None, protection=None, mapping_name=None, result=None, timestamp=None, tid=None, mapping_handle=None, id=None):
        self.count = _cast(int, count)
        self.file_handle = _cast(None, file_handle)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.protection = _cast(None, protection)
        self.mapping_name = _cast(None, mapping_name)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.mapping_handle = _cast(None, mapping_handle)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if create_file_mapping.subclass:
            return create_file_mapping.subclass(*args_, **kwargs_)
        else:
            return create_file_mapping(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_file_handle(self): return self.file_handle
    def set_file_handle(self, file_handle): self.file_handle = file_handle
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_sectionaccess(self, value):
        # Validate type type_sectionaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_protection(self): return self.protection
    def set_protection(self, protection): self.protection = protection
    def validate_type_sectionprotection(self, value):
        # Validate type type_sectionprotection, a restriction on xs:string.
        pass
    def get_mapping_name(self): return self.mapping_name
    def set_mapping_name(self, mapping_name): self.mapping_name = mapping_name
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_mapping_handle(self): return self.mapping_handle
    def set_mapping_handle(self, mapping_handle): self.mapping_handle = mapping_handle
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='create_file_mapping', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_file_mapping')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_file_mapping'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.file_handle is not None and 'file_handle' not in already_processed:
            already_processed.append('file_handle')
            outfile.write(' file_handle=%s' % (quote_attrib(self.file_handle), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            outfile.write(' protection=%s' % (quote_attrib(self.protection), ))
        if self.mapping_name is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            outfile.write(' mapping_name=%s' % (self.gds_format_string(quote_attrib(self.mapping_name).encode(ExternalEncoding), input_name='mapping_name'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.mapping_handle is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            outfile.write(' mapping_handle=%s' % (quote_attrib(self.mapping_handle), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_file_mapping', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_file_mapping'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.file_handle is not None and 'file_handle' not in already_processed:
            already_processed.append('file_handle')
            showIndent(outfile, level)
            outfile.write('file_handle = "%s",\n' % (self.file_handle,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            showIndent(outfile, level)
            outfile.write('protection = "%s",\n' % (self.protection,))
        if self.mapping_name is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            showIndent(outfile, level)
            outfile.write('mapping_name = "%s",\n' % (self.mapping_name,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.mapping_handle is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            showIndent(outfile, level)
            outfile.write('mapping_handle = "%s",\n' % (self.mapping_handle,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('file_handle', node)
        if value is not None and 'file_handle' not in already_processed:
            already_processed.append('file_handle')
            self.file_handle = value
            self.validate_type_handle(self.file_handle)    # validate type type_handle
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_sectionaccess(self.desired_access)    # validate type type_sectionaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('protection', node)
        if value is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            self.protection = value
            self.validate_type_sectionprotection(self.protection)    # validate type type_sectionprotection
        value = find_attr_value_('mapping_name', node)
        if value is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            self.mapping_name = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('mapping_handle', node)
        if value is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            self.mapping_handle = value
            self.validate_type_handle(self.mapping_handle)    # validate type type_handle
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_file_mapping


class open_file_mapping(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, mapping_name=None, result=None, desired_access=None, tid=None, mapping_handle=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.mapping_name = _cast(None, mapping_name)
        self.result = _cast(None, result)
        self.desired_access = _cast(None, desired_access)
        self.tid = _cast(int, tid)
        self.mapping_handle = _cast(None, mapping_handle)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if open_file_mapping.subclass:
            return open_file_mapping.subclass(*args_, **kwargs_)
        else:
            return open_file_mapping(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_mapping_name(self): return self.mapping_name
    def set_mapping_name(self, mapping_name): self.mapping_name = mapping_name
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_sectionaccess(self, value):
        # Validate type type_sectionaccess, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_mapping_handle(self): return self.mapping_handle
    def set_mapping_handle(self, mapping_handle): self.mapping_handle = mapping_handle
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='open_file_mapping', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='open_file_mapping')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='open_file_mapping'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.mapping_name is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            outfile.write(' mapping_name=%s' % (self.gds_format_string(quote_attrib(self.mapping_name).encode(ExternalEncoding), input_name='mapping_name'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.mapping_handle is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            outfile.write(' mapping_handle=%s' % (quote_attrib(self.mapping_handle), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='open_file_mapping', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='open_file_mapping'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.mapping_name is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            showIndent(outfile, level)
            outfile.write('mapping_name = "%s",\n' % (self.mapping_name,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.mapping_handle is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            showIndent(outfile, level)
            outfile.write('mapping_handle = "%s",\n' % (self.mapping_handle,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('mapping_name', node)
        if value is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            self.mapping_name = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_sectionaccess(self.desired_access)    # validate type type_sectionaccess
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('mapping_handle', node)
        if value is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            self.mapping_handle = value
            self.validate_type_handle(self.mapping_handle)    # validate type type_handle
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class open_file_mapping


class map_view_of_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, target_pid=None, timestamp=None, pid=None, mapping_offset=None, tid=None, protection=None, mapping_name=None, result=None, allocation_type=None, view_size=None, mapping_handle=None, id=None, base_address=None):
        self.count = _cast(int, count)
        self.target_pid = _cast(int, target_pid)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.mapping_offset = _cast(int, mapping_offset)
        self.tid = _cast(int, tid)
        self.protection = _cast(None, protection)
        self.mapping_name = _cast(None, mapping_name)
        self.result = _cast(None, result)
        self.allocation_type = _cast(None, allocation_type)
        self.view_size = _cast(int, view_size)
        self.mapping_handle = _cast(None, mapping_handle)
        self.id = _cast(int, id)
        self.base_address = _cast(None, base_address)
        pass
    def factory(*args_, **kwargs_):
        if map_view_of_file.subclass:
            return map_view_of_file.subclass(*args_, **kwargs_)
        else:
            return map_view_of_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_mapping_offset(self): return self.mapping_offset
    def set_mapping_offset(self, mapping_offset): self.mapping_offset = mapping_offset
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_protection(self): return self.protection
    def set_protection(self, protection): self.protection = protection
    def validate_type_sectionprotection(self, value):
        # Validate type type_sectionprotection, a restriction on xs:string.
        pass
    def get_mapping_name(self): return self.mapping_name
    def set_mapping_name(self, mapping_name): self.mapping_name = mapping_name
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_allocation_type(self): return self.allocation_type
    def set_allocation_type(self, allocation_type): self.allocation_type = allocation_type
    def validate_type_sectionallocation(self, value):
        # Validate type type_sectionallocation, a restriction on xs:string.
        pass
    def get_view_size(self): return self.view_size
    def set_view_size(self, view_size): self.view_size = view_size
    def get_mapping_handle(self): return self.mapping_handle
    def set_mapping_handle(self, mapping_handle): self.mapping_handle = mapping_handle
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_base_address(self): return self.base_address
    def set_base_address(self, base_address): self.base_address = base_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='map_view_of_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='map_view_of_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='map_view_of_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.mapping_offset is not None and 'mapping_offset' not in already_processed:
            already_processed.append('mapping_offset')
            outfile.write(' mapping_offset="%s"' % self.gds_format_integer(self.mapping_offset, input_name='mapping_offset'))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            outfile.write(' protection=%s' % (quote_attrib(self.protection), ))
        if self.mapping_name is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            outfile.write(' mapping_name=%s' % (self.gds_format_string(quote_attrib(self.mapping_name).encode(ExternalEncoding), input_name='mapping_name'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.allocation_type is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            outfile.write(' allocation_type=%s' % (quote_attrib(self.allocation_type), ))
        if self.view_size is not None and 'view_size' not in already_processed:
            already_processed.append('view_size')
            outfile.write(' view_size="%s"' % self.gds_format_integer(self.view_size, input_name='view_size'))
        if self.mapping_handle is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            outfile.write(' mapping_handle=%s' % (quote_attrib(self.mapping_handle), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.base_address is not None and 'base_address' not in already_processed:
            already_processed.append('base_address')
            outfile.write(' base_address=%s' % (quote_attrib(self.base_address), ))
    def exportChildren(self, outfile, level, namespace_='', name_='map_view_of_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='map_view_of_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.mapping_offset is not None and 'mapping_offset' not in already_processed:
            already_processed.append('mapping_offset')
            showIndent(outfile, level)
            outfile.write('mapping_offset = %d,\n' % (self.mapping_offset,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.protection is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            showIndent(outfile, level)
            outfile.write('protection = "%s",\n' % (self.protection,))
        if self.mapping_name is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            showIndent(outfile, level)
            outfile.write('mapping_name = "%s",\n' % (self.mapping_name,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.allocation_type is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            showIndent(outfile, level)
            outfile.write('allocation_type = "%s",\n' % (self.allocation_type,))
        if self.view_size is not None and 'view_size' not in already_processed:
            already_processed.append('view_size')
            showIndent(outfile, level)
            outfile.write('view_size = %d,\n' % (self.view_size,))
        if self.mapping_handle is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            showIndent(outfile, level)
            outfile.write('mapping_handle = "%s",\n' % (self.mapping_handle,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.base_address is not None and 'base_address' not in already_processed:
            already_processed.append('base_address')
            showIndent(outfile, level)
            outfile.write('base_address = "%s",\n' % (self.base_address,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('mapping_offset', node)
        if value is not None and 'mapping_offset' not in already_processed:
            already_processed.append('mapping_offset')
            try:
                self.mapping_offset = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protection', node)
        if value is not None and 'protection' not in already_processed:
            already_processed.append('protection')
            self.protection = value
            self.validate_type_sectionprotection(self.protection)    # validate type type_sectionprotection
        value = find_attr_value_('mapping_name', node)
        if value is not None and 'mapping_name' not in already_processed:
            already_processed.append('mapping_name')
            self.mapping_name = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('allocation_type', node)
        if value is not None and 'allocation_type' not in already_processed:
            already_processed.append('allocation_type')
            self.allocation_type = value
            self.validate_type_sectionallocation(self.allocation_type)    # validate type type_sectionallocation
        value = find_attr_value_('view_size', node)
        if value is not None and 'view_size' not in already_processed:
            already_processed.append('view_size')
            try:
                self.view_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('mapping_handle', node)
        if value is not None and 'mapping_handle' not in already_processed:
            already_processed.append('mapping_handle')
            self.mapping_handle = value
            self.validate_type_handle(self.mapping_handle)    # validate type type_handle
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('base_address', node)
        if value is not None and 'base_address' not in already_processed:
            already_processed.append('base_address')
            self.base_address = value
            self.validate_type_hexaddr(self.base_address)    # validate type type_hexaddr
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class map_view_of_file


class thread_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, create_thread=None, kill_thread=None, get_thread_context=None, set_thread_context=None, queue_user_apc=None, enumerate_threads=None, impersonate_thread=None, revert_thread_to_self=None, hide_from_debugger=None):
        self.create_thread = []
        self.kill_thread = []
        self.get_thread_context = []
        self.set_thread_context = []
        self.queue_user_apc = []
        self.enumerate_threads = []
        self.impersonate_thread = []
        self.revert_thread_to_self = []
        self.hide_from_debugger = []
    def factory(*args_, **kwargs_):
        if thread_section.subclass:
            return thread_section.subclass(*args_, **kwargs_)
        else:
            return thread_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_create_thread(self): return self.create_thread
    def set_create_thread(self, create_thread): self.create_thread = create_thread
    def get_kill_thread(self): return self.kill_thread
    def set_kill_thread(self, kill_thread): self.kill_thread = kill_thread
    def get_get_thread_context(self): return self.get_thread_context
    def set_get_thread_context(self, get_thread_context): self.get_thread_context = get_thread_context
    def get_set_thread_context(self): return self.set_thread_context
    def set_set_thread_context(self, set_thread_context): self.set_thread_context = set_thread_context
    def get_queue_user_apc(self): return self.queue_user_apc
    def set_queue_user_apc(self, queue_user_apc): self.queue_user_apc = queue_user_apc
    def get_enumerate_threads(self): return self.enumerate_threads
    def set_enumerate_threads(self, enumerate_threads): self.enumerate_threads = enumerate_threads
    def get_impersonate_thread(self): return self.impersonate_thread
    def set_impersonate_thread(self, impersonate_thread): self.impersonate_thread = impersonate_thread
    def get_revert_thread_to_self(self): return self.revert_thread_to_self
    def set_revert_thread_to_self(self, revert_thread_to_self): self.revert_thread_to_self = revert_thread_to_self
    def get_hide_from_debugger(self): return self.hide_from_debugger
    def set_hide_from_debugger(self, hide_from_debugger): self.hide_from_debugger = hide_from_debugger
    def export(self, outfile, level, namespace_='', name_='thread_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='thread_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='thread_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='thread_section', fromsubclass_=False):
        if self.create_thread is not None:
            self.create_thread.export(outfile, level, namespace_, name_='create_thread')
        if self.kill_thread is not None:
            self.kill_thread.export(outfile, level, namespace_, name_='kill_thread')
        if self.get_thread_context is not None:
            self.get_thread_context.export(outfile, level, namespace_, name_='get_thread_context')
        if self.set_thread_context is not None:
            self.set_thread_context.export(outfile, level, namespace_, name_='set_thread_context')
        if self.queue_user_apc is not None:
            self.queue_user_apc.export(outfile, level, namespace_, name_='queue_user_apc')
        if self.enumerate_threads is not None:
            self.enumerate_threads.export(outfile, level, namespace_, name_='enumerate_threads')
        if self.impersonate_thread is not None:
            self.impersonate_thread.export(outfile, level, namespace_, name_='impersonate_thread')
        if self.revert_thread_to_self is not None:
            self.revert_thread_to_self.export(outfile, level, namespace_, name_='revert_thread_to_self')
        if self.hide_from_debugger is not None:
            self.hide_from_debugger.export(outfile, level, namespace_, name_='hide_from_debugger')
    def hasContent_(self):
        if (
            self.create_thread is not None or
            self.kill_thread is not None or
            self.get_thread_context is not None or
            self.set_thread_context is not None or
            self.queue_user_apc is not None or
            self.enumerate_threads is not None or
            self.impersonate_thread is not None or
            self.revert_thread_to_self is not None or
            self.hide_from_debugger is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='thread_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.create_thread is not None:
            showIndent(outfile, level)
            outfile.write('create_thread=model_.create_thread(\n')
            self.create_thread.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.kill_thread is not None:
            showIndent(outfile, level)
            outfile.write('kill_thread=model_.kill_thread(\n')
            self.kill_thread.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_thread_context is not None:
            showIndent(outfile, level)
            outfile.write('get_thread_context=model_.get_thread_context(\n')
            self.get_thread_context.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.set_thread_context is not None:
            showIndent(outfile, level)
            outfile.write('set_thread_context=model_.set_thread_context(\n')
            self.set_thread_context.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.queue_user_apc is not None:
            showIndent(outfile, level)
            outfile.write('queue_user_apc=model_.queue_user_apc(\n')
            self.queue_user_apc.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_threads is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_threads=model_.enumerate_threads(\n')
            self.enumerate_threads.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.impersonate_thread is not None:
            showIndent(outfile, level)
            outfile.write('impersonate_thread=model_.impersonate_thread(\n')
            self.impersonate_thread.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.revert_thread_to_self is not None:
            showIndent(outfile, level)
            outfile.write('revert_thread_to_self=model_.revert_thread_to_self(\n')
            self.revert_thread_to_self.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.hide_from_debugger is not None:
            showIndent(outfile, level)
            outfile.write('hide_from_debugger=model_.hide_from_debugger(\n')
            self.hide_from_debugger.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'create_thread':
            obj_ = create_thread.factory()
            obj_.build(child_)
            self.create_thread.append(obj_)
        elif nodeName_ == 'kill_thread':
            obj_ = kill_thread.factory()
            obj_.build(child_)
            self.kill_thread.append(obj_)
        elif nodeName_ == 'get_thread_context':
            obj_ = get_thread_context.factory()
            obj_.build(child_)
            self.get_thread_context.append(obj_)
        elif nodeName_ == 'set_thread_context':
            obj_ = set_thread_context.factory()
            obj_.build(child_)
            self.set_thread_context.append(obj_)
        elif nodeName_ == 'queue_user_apc':
            obj_ = queue_user_apc.factory()
            obj_.build(child_)
            self.queue_user_apc.append(obj_)
        elif nodeName_ == 'enumerate_threads':
            obj_ = enumerate_threads.factory()
            obj_.build(child_)
            self.enumerate_threads.append(obj_)
        elif nodeName_ == 'impersonate_thread':
            obj_ = impersonate_thread.factory()
            obj_.build(child_)
            self.impersonate_thread.append(obj_)
        elif nodeName_ == 'revert_thread_to_self':
            obj_ = revert_thread_to_self.factory()
            obj_.build(child_)
            self.revert_thread_to_self.append(obj_)
        elif nodeName_ == 'hide_from_debugger':
            obj_ = hide_from_debugger.factory()
            obj_.build(child_)
            self.hide_from_debugger.append(obj_)
# end class thread_section


class create_thread(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, parameter_address=None, timestamp=None, pid=None, code_address=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.parameter_address = _cast(None, parameter_address)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.code_address = _cast(None, code_address)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if create_thread.subclass:
            return create_thread.subclass(*args_, **kwargs_)
        else:
            return create_thread(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_parameter_address(self): return self.parameter_address
    def set_parameter_address(self, parameter_address): self.parameter_address = parameter_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_code_address(self): return self.code_address
    def set_code_address(self, code_address): self.code_address = code_address
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='create_thread', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_thread')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_thread'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.parameter_address is not None and 'parameter_address' not in already_processed:
            already_processed.append('parameter_address')
            outfile.write(' parameter_address=%s' % (quote_attrib(self.parameter_address), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            outfile.write(' code_address=%s' % (quote_attrib(self.code_address), ))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_thread', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_thread'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.parameter_address is not None and 'parameter_address' not in already_processed:
            already_processed.append('parameter_address')
            showIndent(outfile, level)
            outfile.write('parameter_address = "%s",\n' % (self.parameter_address,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            showIndent(outfile, level)
            outfile.write('code_address = "%s",\n' % (self.code_address,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('parameter_address', node)
        if value is not None and 'parameter_address' not in already_processed:
            already_processed.append('parameter_address')
            self.parameter_address = value
            self.validate_type_hexaddr(self.parameter_address)    # validate type type_hexaddr
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code_address', node)
        if value is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            self.code_address = value
            self.validate_type_hexaddr(self.code_address)    # validate type type_hexaddr
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_thread


class kill_thread(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if kill_thread.subclass:
            return kill_thread.subclass(*args_, **kwargs_)
        else:
            return kill_thread(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='kill_thread', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='kill_thread')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='kill_thread'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='kill_thread', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='kill_thread'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class kill_thread


class get_thread_context(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, code_address=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.code_address = _cast(None, code_address)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_thread_context.subclass:
            return get_thread_context.subclass(*args_, **kwargs_)
        else:
            return get_thread_context(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_code_address(self): return self.code_address
    def set_code_address(self, code_address): self.code_address = code_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_thread_context', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_thread_context')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_thread_context'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            outfile.write(' code_address=%s' % (quote_attrib(self.code_address), ))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_thread_context', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_thread_context'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            showIndent(outfile, level)
            outfile.write('code_address = "%s",\n' % (self.code_address,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code_address', node)
        if value is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            self.code_address = value
            self.validate_type_hexaddr(self.code_address)    # validate type type_hexaddr
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_thread_context


class set_thread_context(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, code_address=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.code_address = _cast(None, code_address)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if set_thread_context.subclass:
            return set_thread_context.subclass(*args_, **kwargs_)
        else:
            return set_thread_context(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_code_address(self): return self.code_address
    def set_code_address(self, code_address): self.code_address = code_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='set_thread_context', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='set_thread_context')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='set_thread_context'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            outfile.write(' code_address=%s' % (quote_attrib(self.code_address), ))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='set_thread_context', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='set_thread_context'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            showIndent(outfile, level)
            outfile.write('code_address = "%s",\n' % (self.code_address,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code_address', node)
        if value is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            self.code_address = value
            self.validate_type_hexaddr(self.code_address)    # validate type type_hexaddr
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class set_thread_context


class queue_user_apc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, parameter_address=None, timestamp=None, pid=None, code_address=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.parameter_address = _cast(None, parameter_address)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.code_address = _cast(None, code_address)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if queue_user_apc.subclass:
            return queue_user_apc.subclass(*args_, **kwargs_)
        else:
            return queue_user_apc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_parameter_address(self): return self.parameter_address
    def set_parameter_address(self, parameter_address): self.parameter_address = parameter_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_code_address(self): return self.code_address
    def set_code_address(self, code_address): self.code_address = code_address
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='queue_user_apc', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='queue_user_apc')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='queue_user_apc'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.parameter_address is not None and 'parameter_address' not in already_processed:
            already_processed.append('parameter_address')
            outfile.write(' parameter_address=%s' % (quote_attrib(self.parameter_address), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            outfile.write(' code_address=%s' % (quote_attrib(self.code_address), ))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='queue_user_apc', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='queue_user_apc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.parameter_address is not None and 'parameter_address' not in already_processed:
            already_processed.append('parameter_address')
            showIndent(outfile, level)
            outfile.write('parameter_address = "%s",\n' % (self.parameter_address,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            showIndent(outfile, level)
            outfile.write('code_address = "%s",\n' % (self.code_address,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('parameter_address', node)
        if value is not None and 'parameter_address' not in already_processed:
            already_processed.append('parameter_address')
            self.parameter_address = value
            self.validate_type_hexaddr(self.parameter_address)    # validate type type_hexaddr
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code_address', node)
        if value is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            self.code_address = value
            self.validate_type_hexaddr(self.code_address)    # validate type type_hexaddr
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class queue_user_apc


class enumerate_threads(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_threads.subclass:
            return enumerate_threads.subclass(*args_, **kwargs_)
        else:
            return enumerate_threads(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_threads', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_threads')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_threads'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_threads', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_threads'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_threads


class impersonate_thread(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_tid=None, target_pid=None, result=None, token_sid=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.token_sid = _cast(None, token_sid)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if impersonate_thread.subclass:
            return impersonate_thread.subclass(*args_, **kwargs_)
        else:
            return impersonate_thread(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_token_sid(self): return self.token_sid
    def set_token_sid(self, token_sid): self.token_sid = token_sid
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='impersonate_thread', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='impersonate_thread')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='impersonate_thread'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.token_sid is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            outfile.write(' token_sid=%s' % (self.gds_format_string(quote_attrib(self.token_sid).encode(ExternalEncoding), input_name='token_sid'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='impersonate_thread', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='impersonate_thread'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.token_sid is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            showIndent(outfile, level)
            outfile.write('token_sid = "%s",\n' % (self.token_sid,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('token_sid', node)
        if value is not None and 'token_sid' not in already_processed:
            already_processed.append('token_sid')
            self.token_sid = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class impersonate_thread


class revert_thread_to_self(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if revert_thread_to_self.subclass:
            return revert_thread_to_self.subclass(*args_, **kwargs_)
        else:
            return revert_thread_to_self(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='revert_thread_to_self', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='revert_thread_to_self')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='revert_thread_to_self'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='revert_thread_to_self', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='revert_thread_to_self'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class revert_thread_to_self


class hide_from_debugger(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_tid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_tid = _cast(int, target_tid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if hide_from_debugger.subclass:
            return hide_from_debugger.subclass(*args_, **kwargs_)
        else:
            return hide_from_debugger(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_tid(self): return self.target_tid
    def set_target_tid(self, target_tid): self.target_tid = target_tid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='hide_from_debugger', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hide_from_debugger')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='hide_from_debugger'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            outfile.write(' target_tid="%s"' % self.gds_format_integer(self.target_tid, input_name='target_tid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='hide_from_debugger', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='hide_from_debugger'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_tid is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            showIndent(outfile, level)
            outfile.write('target_tid = %d,\n' % (self.target_tid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_tid', node)
        if value is not None and 'target_tid' not in already_processed:
            already_processed.append('target_tid')
            try:
                self.target_tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class hide_from_debugger


class window_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, create_window=None, kill_window=None, show_window=None, hide_window=None, find_window=None, enumerate_windows=None, send_message_exploit=None):
        self.create_window = create_window
        self.kill_window = kill_window
        self.show_window = show_window
        self.hide_window = hide_window
        self.find_window = find_window
        self.enumerate_windows = enumerate_windows
        self.send_message_exploit = send_message_exploit
    def factory(*args_, **kwargs_):
        if window_section.subclass:
            return window_section.subclass(*args_, **kwargs_)
        else:
            return window_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_create_window(self): return self.create_window
    def set_create_window(self, create_window): self.create_window = create_window
    def get_kill_window(self): return self.kill_window
    def set_kill_window(self, kill_window): self.kill_window = kill_window
    def get_show_window(self): return self.show_window
    def set_show_window(self, show_window): self.show_window = show_window
    def get_hide_window(self): return self.hide_window
    def set_hide_window(self, hide_window): self.hide_window = hide_window
    def get_find_window(self): return self.find_window
    def set_find_window(self, find_window): self.find_window = find_window
    def get_enumerate_windows(self): return self.enumerate_windows
    def set_enumerate_windows(self, enumerate_windows): self.enumerate_windows = enumerate_windows
    def get_send_message_exploit(self): return self.send_message_exploit
    def set_send_message_exploit(self, send_message_exploit): self.send_message_exploit = send_message_exploit
    def export(self, outfile, level, namespace_='', name_='window_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='window_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='window_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='window_section', fromsubclass_=False):
        if self.create_window is not None:
            self.create_window.export(outfile, level, namespace_, name_='create_window')
        if self.kill_window is not None:
            self.kill_window.export(outfile, level, namespace_, name_='kill_window')
        if self.show_window is not None:
            self.show_window.export(outfile, level, namespace_, name_='show_window')
        if self.hide_window is not None:
            self.hide_window.export(outfile, level, namespace_, name_='hide_window')
        if self.find_window is not None:
            self.find_window.export(outfile, level, namespace_, name_='find_window')
        if self.enumerate_windows is not None:
            self.enumerate_windows.export(outfile, level, namespace_, name_='enumerate_windows')
        if self.send_message_exploit is not None:
            self.send_message_exploit.export(outfile, level, namespace_, name_='send_message_exploit')
    def hasContent_(self):
        if (
            self.create_window is not None or
            self.kill_window is not None or
            self.show_window is not None or
            self.hide_window is not None or
            self.find_window is not None or
            self.enumerate_windows is not None or
            self.send_message_exploit is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='window_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.create_window is not None:
            showIndent(outfile, level)
            outfile.write('create_window=model_.create_window(\n')
            self.create_window.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.kill_window is not None:
            showIndent(outfile, level)
            outfile.write('kill_window=model_.kill_window(\n')
            self.kill_window.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.show_window is not None:
            showIndent(outfile, level)
            outfile.write('show_window=model_.show_window(\n')
            self.show_window.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.hide_window is not None:
            showIndent(outfile, level)
            outfile.write('hide_window=model_.hide_window(\n')
            self.hide_window.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.find_window is not None:
            showIndent(outfile, level)
            outfile.write('find_window=model_.find_window(\n')
            self.find_window.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_windows is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_windows=model_.enumerate_windows(\n')
            self.enumerate_windows.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.send_message_exploit is not None:
            showIndent(outfile, level)
            outfile.write('send_message_exploit=model_.send_message_exploit(\n')
            self.send_message_exploit.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'create_window':
            obj_ = create_window.factory()
            obj_.build(child_)
            self.set_create_window(obj_)
        elif nodeName_ == 'kill_window':
            obj_ = kill_window.factory()
            obj_.build(child_)
            self.set_kill_window(obj_)
        elif nodeName_ == 'show_window':
            obj_ = show_window.factory()
            obj_.build(child_)
            self.set_show_window(obj_)
        elif nodeName_ == 'hide_window':
            obj_ = hide_window.factory()
            obj_.build(child_)
            self.set_hide_window(obj_)
        elif nodeName_ == 'find_window':
            obj_ = find_window.factory()
            obj_.build(child_)
            self.set_find_window(obj_)
        elif nodeName_ == 'enumerate_windows':
            obj_ = enumerate_windows.factory()
            obj_.build(child_)
            self.set_enumerate_windows(obj_)
        elif nodeName_ == 'send_message_exploit':
            obj_ = send_message_exploit.factory()
            obj_.build(child_)
            self.set_send_message_exploit(obj_)
# end class window_section


class create_window(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, snapshot_file=None, count=None, style=None, hwnd_parent=None, class_name=None, hwnd=None, top=None, pid=None, height=None, width=None, id=None, result=None, timestamp=None, tid=None, extended_style=None, window_name=None, left=None):
        self.snapshot_file = _cast(None, snapshot_file)
        self.count = _cast(int, count)
        self.style = _cast(None, style)
        self.hwnd_parent = _cast(None, hwnd_parent)
        self.class_name = _cast(None, class_name)
        self.hwnd = _cast(None, hwnd)
        self.top = _cast(int, top)
        self.pid = _cast(int, pid)
        self.height = _cast(int, height)
        self.width = _cast(int, width)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.extended_style = _cast(None, extended_style)
        self.window_name = _cast(None, window_name)
        self.left = _cast(int, left)
        pass
    def factory(*args_, **kwargs_):
        if create_window.subclass:
            return create_window.subclass(*args_, **kwargs_)
        else:
            return create_window(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_snapshot_file(self): return self.snapshot_file
    def set_snapshot_file(self, snapshot_file): self.snapshot_file = snapshot_file
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def validate_type_windowstyle(self, value):
        # Validate type type_windowstyle, a restriction on xs:string.
        pass
    def get_hwnd_parent(self): return self.hwnd_parent
    def set_hwnd_parent(self, hwnd_parent): self.hwnd_parent = hwnd_parent
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_class_name(self): return self.class_name
    def set_class_name(self, class_name): self.class_name = class_name
    def get_hwnd(self): return self.hwnd
    def set_hwnd(self, hwnd): self.hwnd = hwnd
    def get_top(self): return self.top
    def set_top(self, top): self.top = top
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_extended_style(self): return self.extended_style
    def set_extended_style(self, extended_style): self.extended_style = extended_style
    def validate_type_windowexstyle(self, value):
        # Validate type type_windowexstyle, a restriction on xs:string.
        pass
    def get_window_name(self): return self.window_name
    def set_window_name(self, window_name): self.window_name = window_name
    def get_left(self): return self.left
    def set_left(self, left): self.left = left
    def export(self, outfile, level, namespace_='', name_='create_window', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_window')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_window'):
        if self.snapshot_file is not None and 'snapshot_file' not in already_processed:
            already_processed.append('snapshot_file')
            outfile.write(' snapshot_file=%s' % (self.gds_format_string(quote_attrib(self.snapshot_file).encode(ExternalEncoding), input_name='snapshot_file'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.style is not None and 'style' not in already_processed:
            already_processed.append('style')
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            outfile.write(' hwnd_parent=%s' % (quote_attrib(self.hwnd_parent), ))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            outfile.write(' class_name=%s' % (self.gds_format_string(quote_attrib(self.class_name).encode(ExternalEncoding), input_name='class_name'), ))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            outfile.write(' hwnd=%s' % (quote_attrib(self.hwnd), ))
        if self.top is not None and 'top' not in already_processed:
            already_processed.append('top')
            outfile.write(' top="%s"' % self.gds_format_integer(self.top, input_name='top'))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.height is not None and 'height' not in already_processed:
            already_processed.append('height')
            outfile.write(' height="%s"' % self.gds_format_integer(self.height, input_name='height'))
        if self.width is not None and 'width' not in already_processed:
            already_processed.append('width')
            outfile.write(' width="%s"' % self.gds_format_integer(self.width, input_name='width'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.extended_style is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            outfile.write(' extended_style=%s' % (quote_attrib(self.extended_style), ))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            outfile.write(' window_name=%s' % (self.gds_format_string(quote_attrib(self.window_name).encode(ExternalEncoding), input_name='window_name'), ))
        if self.left is not None and 'left' not in already_processed:
            already_processed.append('left')
            outfile.write(' left="%s"' % self.gds_format_integer(self.left, input_name='left'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_window', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_window'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.snapshot_file is not None and 'snapshot_file' not in already_processed:
            already_processed.append('snapshot_file')
            showIndent(outfile, level)
            outfile.write('snapshot_file = "%s",\n' % (self.snapshot_file,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.style is not None and 'style' not in already_processed:
            already_processed.append('style')
            showIndent(outfile, level)
            outfile.write('style = "%s",\n' % (self.style,))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            showIndent(outfile, level)
            outfile.write('hwnd_parent = "%s",\n' % (self.hwnd_parent,))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            showIndent(outfile, level)
            outfile.write('class_name = "%s",\n' % (self.class_name,))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            showIndent(outfile, level)
            outfile.write('hwnd = "%s",\n' % (self.hwnd,))
        if self.top is not None and 'top' not in already_processed:
            already_processed.append('top')
            showIndent(outfile, level)
            outfile.write('top = %d,\n' % (self.top,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.height is not None and 'height' not in already_processed:
            already_processed.append('height')
            showIndent(outfile, level)
            outfile.write('height = %d,\n' % (self.height,))
        if self.width is not None and 'width' not in already_processed:
            already_processed.append('width')
            showIndent(outfile, level)
            outfile.write('width = %d,\n' % (self.width,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.extended_style is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            showIndent(outfile, level)
            outfile.write('extended_style = "%s",\n' % (self.extended_style,))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            showIndent(outfile, level)
            outfile.write('window_name = "%s",\n' % (self.window_name,))
        if self.left is not None and 'left' not in already_processed:
            already_processed.append('left')
            showIndent(outfile, level)
            outfile.write('left = %d,\n' % (self.left,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('snapshot_file', node)
        if value is not None and 'snapshot_file' not in already_processed:
            already_processed.append('snapshot_file')
            self.snapshot_file = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('style', node)
        if value is not None and 'style' not in already_processed:
            already_processed.append('style')
            self.style = value
            self.validate_type_windowstyle(self.style)    # validate type type_windowstyle
        value = find_attr_value_('hwnd_parent', node)
        if value is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            self.hwnd_parent = value
            self.validate_type_handle(self.hwnd_parent)    # validate type type_handle
        value = find_attr_value_('class_name', node)
        if value is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            self.class_name = value
        value = find_attr_value_('hwnd', node)
        if value is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            self.hwnd = value
            self.validate_type_handle(self.hwnd)    # validate type type_handle
        value = find_attr_value_('top', node)
        if value is not None and 'top' not in already_processed:
            already_processed.append('top')
            try:
                self.top = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('height', node)
        if value is not None and 'height' not in already_processed:
            already_processed.append('height')
            try:
                self.height = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('width', node)
        if value is not None and 'width' not in already_processed:
            already_processed.append('width')
            try:
                self.width = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('extended_style', node)
        if value is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            self.extended_style = value
            self.validate_type_windowexstyle(self.extended_style)    # validate type type_windowexstyle
        value = find_attr_value_('window_name', node)
        if value is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            self.window_name = value
        value = find_attr_value_('left', node)
        if value is not None and 'left' not in already_processed:
            already_processed.append('left')
            try:
                self.left = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_window


class kill_window(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, hwnd=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.hwnd = _cast(None, hwnd)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if kill_window.subclass:
            return kill_window.subclass(*args_, **kwargs_)
        else:
            return kill_window(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_hwnd(self): return self.hwnd
    def set_hwnd(self, hwnd): self.hwnd = hwnd
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='kill_window', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='kill_window')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='kill_window'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            outfile.write(' hwnd=%s' % (quote_attrib(self.hwnd), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='kill_window', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='kill_window'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            showIndent(outfile, level)
            outfile.write('hwnd = "%s",\n' % (self.hwnd,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('hwnd', node)
        if value is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            self.hwnd = value
            self.validate_type_handle(self.hwnd)    # validate type type_handle
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class kill_window


class show_window(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, style=None, hwnd_parent=None, class_name=None, hwnd=None, top=None, pid=None, height=None, width=None, id=None, result=None, timestamp=None, tid=None, extended_style=None, window_name=None, left=None):
        self.count = _cast(int, count)
        self.style = _cast(None, style)
        self.hwnd_parent = _cast(None, hwnd_parent)
        self.class_name = _cast(None, class_name)
        self.hwnd = _cast(None, hwnd)
        self.top = _cast(int, top)
        self.pid = _cast(int, pid)
        self.height = _cast(int, height)
        self.width = _cast(int, width)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.extended_style = _cast(None, extended_style)
        self.window_name = _cast(None, window_name)
        self.left = _cast(int, left)
        pass
    def factory(*args_, **kwargs_):
        if show_window.subclass:
            return show_window.subclass(*args_, **kwargs_)
        else:
            return show_window(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def validate_type_windowstyle(self, value):
        # Validate type type_windowstyle, a restriction on xs:string.
        pass
    def get_hwnd_parent(self): return self.hwnd_parent
    def set_hwnd_parent(self, hwnd_parent): self.hwnd_parent = hwnd_parent
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_class_name(self): return self.class_name
    def set_class_name(self, class_name): self.class_name = class_name
    def get_hwnd(self): return self.hwnd
    def set_hwnd(self, hwnd): self.hwnd = hwnd
    def get_top(self): return self.top
    def set_top(self, top): self.top = top
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_extended_style(self): return self.extended_style
    def set_extended_style(self, extended_style): self.extended_style = extended_style
    def validate_type_windowexstyle(self, value):
        # Validate type type_windowexstyle, a restriction on xs:string.
        pass
    def get_window_name(self): return self.window_name
    def set_window_name(self, window_name): self.window_name = window_name
    def get_left(self): return self.left
    def set_left(self, left): self.left = left
    def export(self, outfile, level, namespace_='', name_='show_window', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='show_window')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='show_window'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.style is not None and 'style' not in already_processed:
            already_processed.append('style')
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            outfile.write(' hwnd_parent=%s' % (quote_attrib(self.hwnd_parent), ))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            outfile.write(' class_name=%s' % (self.gds_format_string(quote_attrib(self.class_name).encode(ExternalEncoding), input_name='class_name'), ))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            outfile.write(' hwnd=%s' % (quote_attrib(self.hwnd), ))
        if self.top is not None and 'top' not in already_processed:
            already_processed.append('top')
            outfile.write(' top="%s"' % self.gds_format_integer(self.top, input_name='top'))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.height is not None and 'height' not in already_processed:
            already_processed.append('height')
            outfile.write(' height="%s"' % self.gds_format_integer(self.height, input_name='height'))
        if self.width is not None and 'width' not in already_processed:
            already_processed.append('width')
            outfile.write(' width="%s"' % self.gds_format_integer(self.width, input_name='width'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.extended_style is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            outfile.write(' extended_style=%s' % (quote_attrib(self.extended_style), ))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            outfile.write(' window_name=%s' % (self.gds_format_string(quote_attrib(self.window_name).encode(ExternalEncoding), input_name='window_name'), ))
        if self.left is not None and 'left' not in already_processed:
            already_processed.append('left')
            outfile.write(' left="%s"' % self.gds_format_integer(self.left, input_name='left'))
    def exportChildren(self, outfile, level, namespace_='', name_='show_window', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='show_window'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.style is not None and 'style' not in already_processed:
            already_processed.append('style')
            showIndent(outfile, level)
            outfile.write('style = "%s",\n' % (self.style,))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            showIndent(outfile, level)
            outfile.write('hwnd_parent = "%s",\n' % (self.hwnd_parent,))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            showIndent(outfile, level)
            outfile.write('class_name = "%s",\n' % (self.class_name,))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            showIndent(outfile, level)
            outfile.write('hwnd = "%s",\n' % (self.hwnd,))
        if self.top is not None and 'top' not in already_processed:
            already_processed.append('top')
            showIndent(outfile, level)
            outfile.write('top = %d,\n' % (self.top,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.height is not None and 'height' not in already_processed:
            already_processed.append('height')
            showIndent(outfile, level)
            outfile.write('height = %d,\n' % (self.height,))
        if self.width is not None and 'width' not in already_processed:
            already_processed.append('width')
            showIndent(outfile, level)
            outfile.write('width = %d,\n' % (self.width,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.extended_style is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            showIndent(outfile, level)
            outfile.write('extended_style = "%s",\n' % (self.extended_style,))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            showIndent(outfile, level)
            outfile.write('window_name = "%s",\n' % (self.window_name,))
        if self.left is not None and 'left' not in already_processed:
            already_processed.append('left')
            showIndent(outfile, level)
            outfile.write('left = %d,\n' % (self.left,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('style', node)
        if value is not None and 'style' not in already_processed:
            already_processed.append('style')
            self.style = value
            self.validate_type_windowstyle(self.style)    # validate type type_windowstyle
        value = find_attr_value_('hwnd_parent', node)
        if value is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            self.hwnd_parent = value
            self.validate_type_handle(self.hwnd_parent)    # validate type type_handle
        value = find_attr_value_('class_name', node)
        if value is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            self.class_name = value
        value = find_attr_value_('hwnd', node)
        if value is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            self.hwnd = value
            self.validate_type_handle(self.hwnd)    # validate type type_handle
        value = find_attr_value_('top', node)
        if value is not None and 'top' not in already_processed:
            already_processed.append('top')
            try:
                self.top = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('height', node)
        if value is not None and 'height' not in already_processed:
            already_processed.append('height')
            try:
                self.height = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('width', node)
        if value is not None and 'width' not in already_processed:
            already_processed.append('width')
            try:
                self.width = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('extended_style', node)
        if value is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            self.extended_style = value
            self.validate_type_windowexstyle(self.extended_style)    # validate type type_windowexstyle
        value = find_attr_value_('window_name', node)
        if value is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            self.window_name = value
        value = find_attr_value_('left', node)
        if value is not None and 'left' not in already_processed:
            already_processed.append('left')
            try:
                self.left = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class show_window


class hide_window(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, style=None, hwnd_parent=None, class_name=None, hwnd=None, top=None, pid=None, height=None, width=None, id=None, result=None, timestamp=None, tid=None, extended_style=None, window_name=None, left=None):
        self.count = _cast(int, count)
        self.style = _cast(None, style)
        self.hwnd_parent = _cast(None, hwnd_parent)
        self.class_name = _cast(None, class_name)
        self.hwnd = _cast(None, hwnd)
        self.top = _cast(int, top)
        self.pid = _cast(int, pid)
        self.height = _cast(int, height)
        self.width = _cast(int, width)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.extended_style = _cast(None, extended_style)
        self.window_name = _cast(None, window_name)
        self.left = _cast(int, left)
        pass
    def factory(*args_, **kwargs_):
        if hide_window.subclass:
            return hide_window.subclass(*args_, **kwargs_)
        else:
            return hide_window(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_style(self): return self.style
    def set_style(self, style): self.style = style
    def validate_type_windowstyle(self, value):
        # Validate type type_windowstyle, a restriction on xs:string.
        pass
    def get_hwnd_parent(self): return self.hwnd_parent
    def set_hwnd_parent(self, hwnd_parent): self.hwnd_parent = hwnd_parent
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_class_name(self): return self.class_name
    def set_class_name(self, class_name): self.class_name = class_name
    def get_hwnd(self): return self.hwnd
    def set_hwnd(self, hwnd): self.hwnd = hwnd
    def get_top(self): return self.top
    def set_top(self, top): self.top = top
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_width(self): return self.width
    def set_width(self, width): self.width = width
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_extended_style(self): return self.extended_style
    def set_extended_style(self, extended_style): self.extended_style = extended_style
    def validate_type_windowexstyle(self, value):
        # Validate type type_windowexstyle, a restriction on xs:string.
        pass
    def get_window_name(self): return self.window_name
    def set_window_name(self, window_name): self.window_name = window_name
    def get_left(self): return self.left
    def set_left(self, left): self.left = left
    def export(self, outfile, level, namespace_='', name_='hide_window', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hide_window')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='hide_window'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.style is not None and 'style' not in already_processed:
            already_processed.append('style')
            outfile.write(' style=%s' % (quote_attrib(self.style), ))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            outfile.write(' hwnd_parent=%s' % (quote_attrib(self.hwnd_parent), ))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            outfile.write(' class_name=%s' % (self.gds_format_string(quote_attrib(self.class_name).encode(ExternalEncoding), input_name='class_name'), ))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            outfile.write(' hwnd=%s' % (quote_attrib(self.hwnd), ))
        if self.top is not None and 'top' not in already_processed:
            already_processed.append('top')
            outfile.write(' top="%s"' % self.gds_format_integer(self.top, input_name='top'))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.height is not None and 'height' not in already_processed:
            already_processed.append('height')
            outfile.write(' height="%s"' % self.gds_format_integer(self.height, input_name='height'))
        if self.width is not None and 'width' not in already_processed:
            already_processed.append('width')
            outfile.write(' width="%s"' % self.gds_format_integer(self.width, input_name='width'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.extended_style is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            outfile.write(' extended_style=%s' % (quote_attrib(self.extended_style), ))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            outfile.write(' window_name=%s' % (self.gds_format_string(quote_attrib(self.window_name).encode(ExternalEncoding), input_name='window_name'), ))
        if self.left is not None and 'left' not in already_processed:
            already_processed.append('left')
            outfile.write(' left="%s"' % self.gds_format_integer(self.left, input_name='left'))
    def exportChildren(self, outfile, level, namespace_='', name_='hide_window', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='hide_window'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.style is not None and 'style' not in already_processed:
            already_processed.append('style')
            showIndent(outfile, level)
            outfile.write('style = "%s",\n' % (self.style,))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            showIndent(outfile, level)
            outfile.write('hwnd_parent = "%s",\n' % (self.hwnd_parent,))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            showIndent(outfile, level)
            outfile.write('class_name = "%s",\n' % (self.class_name,))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            showIndent(outfile, level)
            outfile.write('hwnd = "%s",\n' % (self.hwnd,))
        if self.top is not None and 'top' not in already_processed:
            already_processed.append('top')
            showIndent(outfile, level)
            outfile.write('top = %d,\n' % (self.top,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.height is not None and 'height' not in already_processed:
            already_processed.append('height')
            showIndent(outfile, level)
            outfile.write('height = %d,\n' % (self.height,))
        if self.width is not None and 'width' not in already_processed:
            already_processed.append('width')
            showIndent(outfile, level)
            outfile.write('width = %d,\n' % (self.width,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.extended_style is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            showIndent(outfile, level)
            outfile.write('extended_style = "%s",\n' % (self.extended_style,))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            showIndent(outfile, level)
            outfile.write('window_name = "%s",\n' % (self.window_name,))
        if self.left is not None and 'left' not in already_processed:
            already_processed.append('left')
            showIndent(outfile, level)
            outfile.write('left = %d,\n' % (self.left,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('style', node)
        if value is not None and 'style' not in already_processed:
            already_processed.append('style')
            self.style = value
            self.validate_type_windowstyle(self.style)    # validate type type_windowstyle
        value = find_attr_value_('hwnd_parent', node)
        if value is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            self.hwnd_parent = value
            self.validate_type_handle(self.hwnd_parent)    # validate type type_handle
        value = find_attr_value_('class_name', node)
        if value is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            self.class_name = value
        value = find_attr_value_('hwnd', node)
        if value is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            self.hwnd = value
            self.validate_type_handle(self.hwnd)    # validate type type_handle
        value = find_attr_value_('top', node)
        if value is not None and 'top' not in already_processed:
            already_processed.append('top')
            try:
                self.top = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('height', node)
        if value is not None and 'height' not in already_processed:
            already_processed.append('height')
            try:
                self.height = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('width', node)
        if value is not None and 'width' not in already_processed:
            already_processed.append('width')
            try:
                self.width = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('extended_style', node)
        if value is not None and 'extended_style' not in already_processed:
            already_processed.append('extended_style')
            self.extended_style = value
            self.validate_type_windowexstyle(self.extended_style)    # validate type type_windowexstyle
        value = find_attr_value_('window_name', node)
        if value is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            self.window_name = value
        value = find_attr_value_('left', node)
        if value is not None and 'left' not in already_processed:
            already_processed.append('left')
            try:
                self.left = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class hide_window


class find_window(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, hwnd_parent=None, class_name=None, hwnd=None, pid=None, id=None, result=None, timestamp=None, tid=None, window_name=None):
        self.count = _cast(int, count)
        self.hwnd_parent = _cast(None, hwnd_parent)
        self.class_name = _cast(None, class_name)
        self.hwnd = _cast(None, hwnd)
        self.pid = _cast(int, pid)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.window_name = _cast(None, window_name)
        pass
    def factory(*args_, **kwargs_):
        if find_window.subclass:
            return find_window.subclass(*args_, **kwargs_)
        else:
            return find_window(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_hwnd_parent(self): return self.hwnd_parent
    def set_hwnd_parent(self, hwnd_parent): self.hwnd_parent = hwnd_parent
    def validate_type_handle(self, value):
        # Validate type type_handle, a restriction on type_hexaddr.
        pass
    def get_class_name(self): return self.class_name
    def set_class_name(self, class_name): self.class_name = class_name
    def get_hwnd(self): return self.hwnd
    def set_hwnd(self, hwnd): self.hwnd = hwnd
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_window_name(self): return self.window_name
    def set_window_name(self, window_name): self.window_name = window_name
    def export(self, outfile, level, namespace_='', name_='find_window', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='find_window')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='find_window'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            outfile.write(' hwnd_parent=%s' % (quote_attrib(self.hwnd_parent), ))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            outfile.write(' class_name=%s' % (self.gds_format_string(quote_attrib(self.class_name).encode(ExternalEncoding), input_name='class_name'), ))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            outfile.write(' hwnd=%s' % (quote_attrib(self.hwnd), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            outfile.write(' window_name=%s' % (self.gds_format_string(quote_attrib(self.window_name).encode(ExternalEncoding), input_name='window_name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='find_window', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='find_window'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.hwnd_parent is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            showIndent(outfile, level)
            outfile.write('hwnd_parent = "%s",\n' % (self.hwnd_parent,))
        if self.class_name is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            showIndent(outfile, level)
            outfile.write('class_name = "%s",\n' % (self.class_name,))
        if self.hwnd is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            showIndent(outfile, level)
            outfile.write('hwnd = "%s",\n' % (self.hwnd,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.window_name is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            showIndent(outfile, level)
            outfile.write('window_name = "%s",\n' % (self.window_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('hwnd_parent', node)
        if value is not None and 'hwnd_parent' not in already_processed:
            already_processed.append('hwnd_parent')
            self.hwnd_parent = value
            self.validate_type_handle(self.hwnd_parent)    # validate type type_handle
        value = find_attr_value_('class_name', node)
        if value is not None and 'class_name' not in already_processed:
            already_processed.append('class_name')
            self.class_name = value
        value = find_attr_value_('hwnd', node)
        if value is not None and 'hwnd' not in already_processed:
            already_processed.append('hwnd')
            self.hwnd = value
            self.validate_type_handle(self.hwnd)    # validate type type_handle
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('window_name', node)
        if value is not None and 'window_name' not in already_processed:
            already_processed.append('window_name')
            self.window_name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class find_window


class enumerate_windows(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_windows.subclass:
            return enumerate_windows.subclass(*args_, **kwargs_)
        else:
            return enumerate_windows(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_windows', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_windows')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_windows'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_windows', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_windows'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_windows


class send_message_exploit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if send_message_exploit.subclass:
            return send_message_exploit.subclass(*args_, **kwargs_)
        else:
            return send_message_exploit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='send_message_exploit', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='send_message_exploit')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='send_message_exploit'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='send_message_exploit', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='send_message_exploit'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class send_message_exploit


class sysobject_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, create_mutex=None, open_mutex=None, add_scheduled_task=None):
        self.create_mutex = []
        self.open_mutex = []
        self.add_scheduled_task = []
    def factory(*args_, **kwargs_):
        if sysobject_section.subclass:
            return sysobject_section.subclass(*args_, **kwargs_)
        else:
            return sysobject_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_create_mutex(self): return self.create_mutex
    def set_create_mutex(self, create_mutex): self.create_mutex = create_mutex
    def get_open_mutex(self): return self.open_mutex
    def set_open_mutex(self, open_mutex): self.open_mutex = open_mutex
    def get_add_scheduled_task(self): return self.add_scheduled_task
    def set_add_scheduled_task(self, add_scheduled_task): self.add_scheduled_task = add_scheduled_task
    def export(self, outfile, level, namespace_='', name_='sysobject_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sysobject_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sysobject_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='sysobject_section', fromsubclass_=False):
        if self.create_mutex is not None:
            self.create_mutex.export(outfile, level, namespace_, name_='create_mutex')
        if self.open_mutex is not None:
            self.open_mutex.export(outfile, level, namespace_, name_='open_mutex')
        if self.add_scheduled_task is not None:
            self.add_scheduled_task.export(outfile, level, namespace_, name_='add_scheduled_task')
    def hasContent_(self):
        if (
            self.create_mutex is not None or
            self.open_mutex is not None or
            self.add_scheduled_task is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sysobject_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.create_mutex is not None:
            showIndent(outfile, level)
            outfile.write('create_mutex=model_.create_mutex(\n')
            self.create_mutex.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.open_mutex is not None:
            showIndent(outfile, level)
            outfile.write('open_mutex=model_.open_mutex(\n')
            self.open_mutex.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.add_scheduled_task is not None:
            showIndent(outfile, level)
            outfile.write('add_scheduled_task=model_.add_scheduled_task(\n')
            self.add_scheduled_task.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'create_mutex':
            obj_ = create_mutex.factory()
            obj_.build(child_)
            self.create_mutex.append(obj_)
        elif nodeName_ == 'open_mutex':
            obj_ = open_mutex.factory()
            obj_.build(child_)
            self.open_mutex.append(obj_)
        elif nodeName_ == 'add_scheduled_task':
            obj_ = add_scheduled_task.factory()
            obj_.build(child_)
            self.add_scheduled_task.append(obj_)
# end class sysobject_section


class create_mutex(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, lock_held=None, name=None, desired_access=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.lock_held = _cast(bool, lock_held)
        self.name = _cast(None, name)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if create_mutex.subclass:
            return create_mutex.subclass(*args_, **kwargs_)
        else:
            return create_mutex(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_lock_held(self): return self.lock_held
    def set_lock_held(self, lock_held): self.lock_held = lock_held
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_sysobjectaccess(self, value):
        # Validate type type_sysobjectaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='create_mutex', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_mutex')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_mutex'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.lock_held is not None and 'lock_held' not in already_processed:
            already_processed.append('lock_held')
            outfile.write(' lock_held="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.lock_held)), input_name='lock_held'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_mutex', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_mutex'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.lock_held is not None and 'lock_held' not in already_processed:
            already_processed.append('lock_held')
            showIndent(outfile, level)
            outfile.write('lock_held = %s,\n' % (self.lock_held,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('lock_held', node)
        if value is not None and 'lock_held' not in already_processed:
            already_processed.append('lock_held')
            if value in ('true', '1'):
                self.lock_held = True
            elif value in ('false', '0'):
                self.lock_held = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_sysobjectaccess(self.desired_access)    # validate type type_sysobjectaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_mutex


class open_mutex(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, lock_held=None, name=None, desired_access=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.lock_held = _cast(bool, lock_held)
        self.name = _cast(None, name)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if open_mutex.subclass:
            return open_mutex.subclass(*args_, **kwargs_)
        else:
            return open_mutex(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_lock_held(self): return self.lock_held
    def set_lock_held(self, lock_held): self.lock_held = lock_held
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_sysobjectaccess(self, value):
        # Validate type type_sysobjectaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='open_mutex', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='open_mutex')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='open_mutex'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.lock_held is not None and 'lock_held' not in already_processed:
            already_processed.append('lock_held')
            outfile.write(' lock_held="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.lock_held)), input_name='lock_held'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='open_mutex', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='open_mutex'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.lock_held is not None and 'lock_held' not in already_processed:
            already_processed.append('lock_held')
            showIndent(outfile, level)
            outfile.write('lock_held = %s,\n' % (self.lock_held,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('lock_held', node)
        if value is not None and 'lock_held' not in already_processed:
            already_processed.append('lock_held')
            if value in ('true', '1'):
                self.lock_held = True
            elif value in ('false', '0'):
                self.lock_held = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_sysobjectaccess(self.desired_access)    # validate type type_sysobjectaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class open_mutex


class add_scheduled_task(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, task_command=None, tid=None, task_servername=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.task_command = _cast(None, task_command)
        self.tid = _cast(int, tid)
        self.task_servername = _cast(None, task_servername)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if add_scheduled_task.subclass:
            return add_scheduled_task.subclass(*args_, **kwargs_)
        else:
            return add_scheduled_task(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_task_command(self): return self.task_command
    def set_task_command(self, task_command): self.task_command = task_command
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_task_servername(self): return self.task_servername
    def set_task_servername(self, task_servername): self.task_servername = task_servername
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='add_scheduled_task', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='add_scheduled_task')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='add_scheduled_task'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.task_command is not None and 'task_command' not in already_processed:
            already_processed.append('task_command')
            outfile.write(' task_command=%s' % (self.gds_format_string(quote_attrib(self.task_command).encode(ExternalEncoding), input_name='task_command'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.task_servername is not None and 'task_servername' not in already_processed:
            already_processed.append('task_servername')
            outfile.write(' task_servername=%s' % (self.gds_format_string(quote_attrib(self.task_servername).encode(ExternalEncoding), input_name='task_servername'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='add_scheduled_task', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='add_scheduled_task'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.task_command is not None and 'task_command' not in already_processed:
            already_processed.append('task_command')
            showIndent(outfile, level)
            outfile.write('task_command = "%s",\n' % (self.task_command,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.task_servername is not None and 'task_servername' not in already_processed:
            already_processed.append('task_servername')
            showIndent(outfile, level)
            outfile.write('task_servername = "%s",\n' % (self.task_servername,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('task_command', node)
        if value is not None and 'task_command' not in already_processed:
            already_processed.append('task_command')
            self.task_command = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('task_servername', node)
        if value is not None and 'task_servername' not in already_processed:
            already_processed.append('task_servername')
            self.task_servername = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class add_scheduled_task


class system_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, shutdown_system=None, sleep=None, get_computer_name=None, get_system_time=None, get_local_time=None, set_system_time=None, enumerate_handles=None, enumerate_system_modules=None, check_for_debugger=None, check_for_kernel_debugger=None, get_global_flags=None, set_global_flags=None, debug_control=None):
        self.shutdown_system = []
        self.sleep = []
        self.get_computer_name = []
        self.get_system_time = []
        self.get_local_time = []
        self.set_system_time = []
        self.enumerate_handles = []
        self.enumerate_system_modules = []
        self.check_for_debugger = []
        self.check_for_kernel_debugger = []
        self.get_global_flags = []
        self.set_global_flags = []
        self.debug_control = []
    def factory(*args_, **kwargs_):
        if system_section.subclass:
            return system_section.subclass(*args_, **kwargs_)
        else:
            return system_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_shutdown_system(self): return self.shutdown_system
    def set_shutdown_system(self, shutdown_system): self.shutdown_system = shutdown_system
    def get_sleep(self): return self.sleep
    def set_sleep(self, sleep): self.sleep = sleep
    def get_get_computer_name(self): return self.get_computer_name
    def set_get_computer_name(self, get_computer_name): self.get_computer_name = get_computer_name
    def get_get_system_time(self): return self.get_system_time
    def set_get_system_time(self, get_system_time): self.get_system_time = get_system_time
    def get_get_local_time(self): return self.get_local_time
    def set_get_local_time(self, get_local_time): self.get_local_time = get_local_time
    def get_set_system_time(self): return self.set_system_time
    def set_set_system_time(self, set_system_time): self.set_system_time = set_system_time
    def get_enumerate_handles(self): return self.enumerate_handles
    def set_enumerate_handles(self, enumerate_handles): self.enumerate_handles = enumerate_handles
    def get_enumerate_system_modules(self): return self.enumerate_system_modules
    def set_enumerate_system_modules(self, enumerate_system_modules): self.enumerate_system_modules = enumerate_system_modules
    def get_check_for_debugger(self): return self.check_for_debugger
    def set_check_for_debugger(self, check_for_debugger): self.check_for_debugger = check_for_debugger
    def get_check_for_kernel_debugger(self): return self.check_for_kernel_debugger
    def set_check_for_kernel_debugger(self, check_for_kernel_debugger): self.check_for_kernel_debugger = check_for_kernel_debugger
    def get_get_global_flags(self): return self.get_global_flags
    def set_get_global_flags(self, get_global_flags): self.get_global_flags = get_global_flags
    def get_set_global_flags(self): return self.set_global_flags
    def set_set_global_flags(self, set_global_flags): self.set_global_flags = set_global_flags
    def get_debug_control(self): return self.debug_control
    def set_debug_control(self, debug_control): self.debug_control = debug_control
    def export(self, outfile, level, namespace_='', name_='system_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='system_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='system_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='system_section', fromsubclass_=False):
        if self.shutdown_system is not None:
            self.shutdown_system.export(outfile, level, namespace_, name_='shutdown_system')
        if self.sleep is not None:
            self.sleep.export(outfile, level, namespace_, name_='sleep')
        if self.get_computer_name is not None:
            self.get_computer_name.export(outfile, level, namespace_, name_='get_computer_name')
        if self.get_system_time is not None:
            self.get_system_time.export(outfile, level, namespace_, name_='get_system_time')
        if self.get_local_time is not None:
            self.get_local_time.export(outfile, level, namespace_, name_='get_local_time')
        if self.set_system_time is not None:
            self.set_system_time.export(outfile, level, namespace_, name_='set_system_time')
        if self.enumerate_handles is not None:
            self.enumerate_handles.export(outfile, level, namespace_, name_='enumerate_handles')
        if self.enumerate_system_modules is not None:
            self.enumerate_system_modules.export(outfile, level, namespace_, name_='enumerate_system_modules')
        if self.check_for_debugger is not None:
            self.check_for_debugger.export(outfile, level, namespace_, name_='check_for_debugger')
        if self.check_for_kernel_debugger is not None:
            self.check_for_kernel_debugger.export(outfile, level, namespace_, name_='check_for_kernel_debugger')
        if self.get_global_flags is not None:
            self.get_global_flags.export(outfile, level, namespace_, name_='get_global_flags')
        if self.set_global_flags is not None:
            self.set_global_flags.export(outfile, level, namespace_, name_='set_global_flags')
        if self.debug_control is not None:
            self.debug_control.export(outfile, level, namespace_, name_='debug_control')
    def hasContent_(self):
        if (
            self.shutdown_system is not None or
            self.sleep is not None or
            self.get_computer_name is not None or
            self.get_system_time is not None or
            self.get_local_time is not None or
            self.set_system_time is not None or
            self.enumerate_handles is not None or
            self.enumerate_system_modules is not None or
            self.check_for_debugger is not None or
            self.check_for_kernel_debugger is not None or
            self.get_global_flags is not None or
            self.set_global_flags is not None or
            self.debug_control is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.shutdown_system is not None:
            showIndent(outfile, level)
            outfile.write('shutdown_system=model_.shutdown_system(\n')
            self.shutdown_system.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.sleep is not None:
            showIndent(outfile, level)
            outfile.write('sleep=model_.sleep(\n')
            self.sleep.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_computer_name is not None:
            showIndent(outfile, level)
            outfile.write('get_computer_name=model_.get_computer_name(\n')
            self.get_computer_name.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_system_time is not None:
            showIndent(outfile, level)
            outfile.write('get_system_time=model_.get_system_time(\n')
            self.get_system_time.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_local_time is not None:
            showIndent(outfile, level)
            outfile.write('get_local_time=model_.get_local_time(\n')
            self.get_local_time.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.set_system_time is not None:
            showIndent(outfile, level)
            outfile.write('set_system_time=model_.set_system_time(\n')
            self.set_system_time.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_handles is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_handles=model_.enumerate_handles(\n')
            self.enumerate_handles.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_system_modules is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_system_modules=model_.enumerate_system_modules(\n')
            self.enumerate_system_modules.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.check_for_debugger is not None:
            showIndent(outfile, level)
            outfile.write('check_for_debugger=model_.check_for_debugger(\n')
            self.check_for_debugger.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.check_for_kernel_debugger is not None:
            showIndent(outfile, level)
            outfile.write('check_for_kernel_debugger=model_.check_for_kernel_debugger(\n')
            self.check_for_kernel_debugger.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_global_flags is not None:
            showIndent(outfile, level)
            outfile.write('get_global_flags=model_.get_global_flags(\n')
            self.get_global_flags.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.set_global_flags is not None:
            showIndent(outfile, level)
            outfile.write('set_global_flags=model_.set_global_flags(\n')
            self.set_global_flags.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.debug_control is not None:
            showIndent(outfile, level)
            outfile.write('debug_control=model_.debug_control(\n')
            self.debug_control.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'shutdown_system':
            obj_ = shutdown_system.factory()
            obj_.build(child_)
            self.shutdown_system.append(obj_)
        elif nodeName_ == 'sleep':
            obj_ = sleep.factory()
            obj_.build(child_)
            self.sleep.append(obj_)
        elif nodeName_ == 'get_computer_name':
            obj_ = get_computer_name.factory()
            obj_.build(child_)
            self.get_computer_name.append(obj_)
        elif nodeName_ == 'get_system_time':
            obj_ = get_system_time.factory()
            obj_.build(child_)
            self.get_system_time.append(obj_)
        elif nodeName_ == 'get_local_time':
            obj_ = get_local_time.factory()
            obj_.build(child_)
            self.get_local_time.append(obj_)
        elif nodeName_ == 'set_system_time':
            obj_ = set_system_time.factory()
            obj_.build(child_)
            self.set_system_time.append(obj_)
        elif nodeName_ == 'enumerate_handles':
            obj_ = enumerate_handles.factory()
            obj_.build(child_)
            self.enumerate_handles.append(obj_)
        elif nodeName_ == 'enumerate_system_modules':
            obj_ = enumerate_system_modules.factory()
            obj_.build(child_)
            self.enumerate_system_modules.append(obj_)
        elif nodeName_ == 'check_for_debugger':
            obj_ = check_for_debugger.factory()
            obj_.build(child_)
            self.check_for_debugger.append(obj_)
        elif nodeName_ == 'check_for_kernel_debugger':
            obj_ = check_for_kernel_debugger.factory()
            obj_.build(child_)
            self.check_for_kernel_debugger.append(obj_)
        elif nodeName_ == 'get_global_flags':
            obj_ = get_global_flags.factory()
            obj_.build(child_)
            self.get_global_flags.append(obj_)
        elif nodeName_ == 'set_global_flags':
            obj_ = set_global_flags.factory()
            obj_.build(child_)
            self.set_global_flags.append(obj_)
        elif nodeName_ == 'debug_control':
            obj_ = debug_control.factory()
            obj_.build(child_)
            self.debug_control.append(obj_)
# end class system_section


class shutdown_system(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, flags=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.flags = _cast(None, flags)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if shutdown_system.subclass:
            return shutdown_system.subclass(*args_, **kwargs_)
        else:
            return shutdown_system(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_flags(self): return self.flags
    def set_flags(self, flags): self.flags = flags
    def validate_type_exitwindowsflags(self, value):
        # Validate type type_exitwindowsflags, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='shutdown_system', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='shutdown_system')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='shutdown_system'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.flags is not None and 'flags' not in already_processed:
            already_processed.append('flags')
            outfile.write(' flags=%s' % (quote_attrib(self.flags), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='shutdown_system', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='shutdown_system'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.flags is not None and 'flags' not in already_processed:
            already_processed.append('flags')
            showIndent(outfile, level)
            outfile.write('flags = "%s",\n' % (self.flags,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('flags', node)
        if value is not None and 'flags' not in already_processed:
            already_processed.append('flags')
            self.flags = value
            self.validate_type_exitwindowsflags(self.flags)    # validate type type_exitwindowsflags
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class shutdown_system


class sleep(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None, milliseconds=None, alertable=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.milliseconds = _cast(int, milliseconds)
        self.alertable = _cast(bool, alertable)
        pass
    def factory(*args_, **kwargs_):
        if sleep.subclass:
            return sleep.subclass(*args_, **kwargs_)
        else:
            return sleep(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_milliseconds(self): return self.milliseconds
    def set_milliseconds(self, milliseconds): self.milliseconds = milliseconds
    def get_alertable(self): return self.alertable
    def set_alertable(self, alertable): self.alertable = alertable
    def export(self, outfile, level, namespace_='', name_='sleep', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sleep')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sleep'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.milliseconds is not None and 'milliseconds' not in already_processed:
            already_processed.append('milliseconds')
            outfile.write(' milliseconds="%s"' % self.gds_format_integer(self.milliseconds, input_name='milliseconds'))
        if self.alertable is not None and 'alertable' not in already_processed:
            already_processed.append('alertable')
            outfile.write(' alertable="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.alertable)), input_name='alertable'))
    def exportChildren(self, outfile, level, namespace_='', name_='sleep', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sleep'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.milliseconds is not None and 'milliseconds' not in already_processed:
            already_processed.append('milliseconds')
            showIndent(outfile, level)
            outfile.write('milliseconds = %d,\n' % (self.milliseconds,))
        if self.alertable is not None and 'alertable' not in already_processed:
            already_processed.append('alertable')
            showIndent(outfile, level)
            outfile.write('alertable = %s,\n' % (self.alertable,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('milliseconds', node)
        if value is not None and 'milliseconds' not in already_processed:
            already_processed.append('milliseconds')
            try:
                self.milliseconds = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('alertable', node)
        if value is not None and 'alertable' not in already_processed:
            already_processed.append('alertable')
            if value in ('true', '1'):
                self.alertable = True
            elif value in ('false', '0'):
                self.alertable = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sleep


class get_computer_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_computer_name.subclass:
            return get_computer_name.subclass(*args_, **kwargs_)
        else:
            return get_computer_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_computer_name', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_computer_name')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_computer_name'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_computer_name', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_computer_name'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_computer_name


class get_system_time(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, time=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.time = _cast(None, time)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_system_time.subclass:
            return get_system_time.subclass(*args_, **kwargs_)
        else:
            return get_system_time(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_system_time', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_system_time')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_system_time'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            outfile.write(' time=%s' % (quote_attrib(self.time), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_system_time', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_system_time'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            showIndent(outfile, level)
            outfile.write('time = "%s",\n' % (self.time,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('time', node)
        if value is not None and 'time' not in already_processed:
            already_processed.append('time')
            self.time = value
            self.validate_type_kerneltime(self.time)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_system_time


class get_local_time(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, time=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.time = _cast(None, time)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_local_time.subclass:
            return get_local_time.subclass(*args_, **kwargs_)
        else:
            return get_local_time(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_local_time', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_local_time')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_local_time'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            outfile.write(' time=%s' % (quote_attrib(self.time), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_local_time', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_local_time'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            showIndent(outfile, level)
            outfile.write('time = "%s",\n' % (self.time,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('time', node)
        if value is not None and 'time' not in already_processed:
            already_processed.append('time')
            self.time = value
            self.validate_type_kerneltime(self.time)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_local_time


class set_system_time(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, time=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.time = _cast(None, time)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if set_system_time.subclass:
            return set_system_time.subclass(*args_, **kwargs_)
        else:
            return set_system_time(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_time(self): return self.time
    def set_time(self, time): self.time = time
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='set_system_time', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='set_system_time')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='set_system_time'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            outfile.write(' time=%s' % (quote_attrib(self.time), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='set_system_time', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='set_system_time'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.time is not None and 'time' not in already_processed:
            already_processed.append('time')
            showIndent(outfile, level)
            outfile.write('time = "%s",\n' % (self.time,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('time', node)
        if value is not None and 'time' not in already_processed:
            already_processed.append('time')
            self.time = value
            self.validate_type_kerneltime(self.time)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class set_system_time


class enumerate_handles(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_handles.subclass:
            return enumerate_handles.subclass(*args_, **kwargs_)
        else:
            return enumerate_handles(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_handles', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_handles')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_handles'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_handles', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_handles'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_handles


class enumerate_system_modules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_system_modules.subclass:
            return enumerate_system_modules.subclass(*args_, **kwargs_)
        else:
            return enumerate_system_modules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_system_modules', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_system_modules')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_system_modules'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_system_modules', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_system_modules'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_system_modules


class check_for_debugger(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if check_for_debugger.subclass:
            return check_for_debugger.subclass(*args_, **kwargs_)
        else:
            return check_for_debugger(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='check_for_debugger', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='check_for_debugger')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='check_for_debugger'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='check_for_debugger', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='check_for_debugger'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class check_for_debugger


class check_for_kernel_debugger(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if check_for_kernel_debugger.subclass:
            return check_for_kernel_debugger.subclass(*args_, **kwargs_)
        else:
            return check_for_kernel_debugger(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='check_for_kernel_debugger', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='check_for_kernel_debugger')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='check_for_kernel_debugger'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='check_for_kernel_debugger', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='check_for_kernel_debugger'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class check_for_kernel_debugger


class get_global_flags(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, global_flags=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.global_flags = _cast(None, global_flags)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_global_flags.subclass:
            return get_global_flags.subclass(*args_, **kwargs_)
        else:
            return get_global_flags(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_global_flags(self): return self.global_flags
    def set_global_flags(self, global_flags): self.global_flags = global_flags
    def validate_type_globalflags(self, value):
        # Validate type type_globalflags, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_global_flags', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_global_flags')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_global_flags'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.global_flags is not None and 'global_flags' not in already_processed:
            already_processed.append('global_flags')
            outfile.write(' global_flags=%s' % (quote_attrib(self.global_flags), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_global_flags', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_global_flags'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.global_flags is not None and 'global_flags' not in already_processed:
            already_processed.append('global_flags')
            showIndent(outfile, level)
            outfile.write('global_flags = "%s",\n' % (self.global_flags,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('global_flags', node)
        if value is not None and 'global_flags' not in already_processed:
            already_processed.append('global_flags')
            self.global_flags = value
            self.validate_type_globalflags(self.global_flags)    # validate type type_globalflags
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_global_flags


class set_global_flags(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, global_flags=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.global_flags = _cast(None, global_flags)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if set_global_flags.subclass:
            return set_global_flags.subclass(*args_, **kwargs_)
        else:
            return set_global_flags(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_global_flags(self): return self.global_flags
    def set_global_flags(self, global_flags): self.global_flags = global_flags
    def validate_type_globalflags(self, value):
        # Validate type type_globalflags, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='set_global_flags', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='set_global_flags')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='set_global_flags'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.global_flags is not None and 'global_flags' not in already_processed:
            already_processed.append('global_flags')
            outfile.write(' global_flags=%s' % (quote_attrib(self.global_flags), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='set_global_flags', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='set_global_flags'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.global_flags is not None and 'global_flags' not in already_processed:
            already_processed.append('global_flags')
            showIndent(outfile, level)
            outfile.write('global_flags = "%s",\n' % (self.global_flags,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('global_flags', node)
        if value is not None and 'global_flags' not in already_processed:
            already_processed.append('global_flags')
            self.global_flags = value
            self.validate_type_globalflags(self.global_flags)    # validate type type_globalflags
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class set_global_flags


class debug_control(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, debug_address=None, timestamp=None, pid=None, result=None, tid=None, debug_control_code=None, id=None):
        self.count = _cast(int, count)
        self.debug_address = _cast(None, debug_address)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.debug_control_code = _cast(None, debug_control_code)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if debug_control.subclass:
            return debug_control.subclass(*args_, **kwargs_)
        else:
            return debug_control(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_debug_address(self): return self.debug_address
    def set_debug_address(self, debug_address): self.debug_address = debug_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_debug_control_code(self): return self.debug_control_code
    def set_debug_control_code(self, debug_control_code): self.debug_control_code = debug_control_code
    def validate_type_dbgcontrolcode(self, value):
        # Validate type type_dbgcontrolcode, a restriction on xs:string.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='debug_control', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='debug_control')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='debug_control'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.debug_address is not None and 'debug_address' not in already_processed:
            already_processed.append('debug_address')
            outfile.write(' debug_address=%s' % (quote_attrib(self.debug_address), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.debug_control_code is not None and 'debug_control_code' not in already_processed:
            already_processed.append('debug_control_code')
            outfile.write(' debug_control_code=%s' % (quote_attrib(self.debug_control_code), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='debug_control', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='debug_control'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.debug_address is not None and 'debug_address' not in already_processed:
            already_processed.append('debug_address')
            showIndent(outfile, level)
            outfile.write('debug_address = "%s",\n' % (self.debug_address,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.debug_control_code is not None and 'debug_control_code' not in already_processed:
            already_processed.append('debug_control_code')
            showIndent(outfile, level)
            outfile.write('debug_control_code = "%s",\n' % (self.debug_control_code,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('debug_address', node)
        if value is not None and 'debug_address' not in already_processed:
            already_processed.append('debug_address')
            self.debug_address = value
            self.validate_type_hexaddr(self.debug_address)    # validate type type_hexaddr
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('debug_control_code', node)
        if value is not None and 'debug_control_code' not in already_processed:
            already_processed.append('debug_control_code')
            self.debug_control_code = value
            self.validate_type_dbgcontrolcode(self.debug_control_code)    # validate type type_dbgcontrolcode
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class debug_control


class user_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, logon_as_user=None, add_user=None, remove_user=None, enumerate_users=None, get_username=None, get_user_info=None):
        self.logon_as_user = []
        self.add_user = []
        self.remove_user = []
        self.enumerate_users = []
        self.get_username = []
        self.get_user_info = []
    def factory(*args_, **kwargs_):
        if user_section.subclass:
            return user_section.subclass(*args_, **kwargs_)
        else:
            return user_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_logon_as_user(self): return self.logon_as_user
    def set_logon_as_user(self, logon_as_user): self.logon_as_user = logon_as_user
    def get_add_user(self): return self.add_user
    def set_add_user(self, add_user): self.add_user = add_user
    def get_remove_user(self): return self.remove_user
    def set_remove_user(self, remove_user): self.remove_user = remove_user
    def get_enumerate_users(self): return self.enumerate_users
    def set_enumerate_users(self, enumerate_users): self.enumerate_users = enumerate_users
    def get_get_username(self): return self.get_username
    def set_get_username(self, get_username): self.get_username = get_username
    def get_get_user_info(self): return self.get_user_info
    def set_get_user_info(self, get_user_info): self.get_user_info = get_user_info
    def export(self, outfile, level, namespace_='', name_='user_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='user_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='user_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='user_section', fromsubclass_=False):
        if self.logon_as_user is not None:
            self.logon_as_user.export(outfile, level, namespace_, name_='logon_as_user')
        if self.add_user is not None:
            self.add_user.export(outfile, level, namespace_, name_='add_user')
        if self.remove_user is not None:
            self.remove_user.export(outfile, level, namespace_, name_='remove_user')
        if self.enumerate_users is not None:
            self.enumerate_users.export(outfile, level, namespace_, name_='enumerate_users')
        if self.get_username is not None:
            self.get_username.export(outfile, level, namespace_, name_='get_username')
        if self.get_user_info is not None:
            self.get_user_info.export(outfile, level, namespace_, name_='get_user_info')
    def hasContent_(self):
        if (
            self.logon_as_user is not None or
            self.add_user is not None or
            self.remove_user is not None or
            self.enumerate_users is not None or
            self.get_username is not None or
            self.get_user_info is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='user_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.logon_as_user is not None:
            showIndent(outfile, level)
            outfile.write('logon_as_user=model_.logon_as_user(\n')
            self.logon_as_user.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.add_user is not None:
            showIndent(outfile, level)
            outfile.write('add_user=model_.add_user(\n')
            self.add_user.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.remove_user is not None:
            showIndent(outfile, level)
            outfile.write('remove_user=model_.remove_user(\n')
            self.remove_user.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_users is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_users=model_.enumerate_users(\n')
            self.enumerate_users.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_username is not None:
            showIndent(outfile, level)
            outfile.write('get_username=model_.get_username(\n')
            self.get_username.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_user_info is not None:
            showIndent(outfile, level)
            outfile.write('get_user_info=model_.get_user_info(\n')
            self.get_user_info.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'logon_as_user':
            obj_ = logon_as_user.factory()
            obj_.build(child_)
            self.logon_as_user.append(obj_)
        elif nodeName_ == 'add_user':
            obj_ = add_user.factory()
            obj_.build(child_)
            self.add_user.append(obj_)
        elif nodeName_ == 'remove_user':
            obj_ = remove_user.factory()
            obj_.build(child_)
            self.remove_user.append(obj_)
        elif nodeName_ == 'enumerate_users':
            obj_ = enumerate_users.factory()
            obj_.build(child_)
            self.enumerate_users.append(obj_)
        elif nodeName_ == 'get_username':
            obj_ = get_username.factory()
            obj_.build(child_)
            self.get_username.append(obj_)
        elif nodeName_ == 'get_user_info':
            obj_ = get_user_info.factory()
            obj_.build(child_)
            self.get_user_info.append(obj_)
# end class user_section


class logon_as_user(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, count=None, domain=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.username = _cast(None, username)
        self.count = _cast(int, count)
        self.domain = _cast(None, domain)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if logon_as_user.subclass:
            return logon_as_user.subclass(*args_, **kwargs_)
        else:
            return logon_as_user(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_domain(self): return self.domain
    def set_domain(self, domain): self.domain = domain
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='logon_as_user', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='logon_as_user')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='logon_as_user'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            outfile.write(' domain=%s' % (self.gds_format_string(quote_attrib(self.domain).encode(ExternalEncoding), input_name='domain'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='logon_as_user', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='logon_as_user'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.domain is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            showIndent(outfile, level)
            outfile.write('domain = "%s",\n' % (self.domain,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('domain', node)
        if value is not None and 'domain' not in already_processed:
            already_processed.append('domain')
            self.domain = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class logon_as_user


class add_user(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.username = _cast(None, username)
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if add_user.subclass:
            return add_user.subclass(*args_, **kwargs_)
        else:
            return add_user(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='add_user', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='add_user')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='add_user'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='add_user', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='add_user'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class add_user


class remove_user(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, count=None, timestamp=None, pid=None, server=None, result=None, tid=None, id=None):
        self.username = _cast(None, username)
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.server = _cast(None, server)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if remove_user.subclass:
            return remove_user.subclass(*args_, **kwargs_)
        else:
            return remove_user(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='remove_user', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='remove_user')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='remove_user'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.server is not None and 'server' not in already_processed:
            already_processed.append('server')
            outfile.write(' server=%s' % (self.gds_format_string(quote_attrib(self.server).encode(ExternalEncoding), input_name='server'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='remove_user', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='remove_user'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.server is not None and 'server' not in already_processed:
            already_processed.append('server')
            showIndent(outfile, level)
            outfile.write('server = "%s",\n' % (self.server,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('server', node)
        if value is not None and 'server' not in already_processed:
            already_processed.append('server')
            self.server = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class remove_user


class enumerate_users(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, server=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.server = _cast(None, server)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_users.subclass:
            return enumerate_users.subclass(*args_, **kwargs_)
        else:
            return enumerate_users(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_users', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_users')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_users'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.server is not None and 'server' not in already_processed:
            already_processed.append('server')
            outfile.write(' server=%s' % (self.gds_format_string(quote_attrib(self.server).encode(ExternalEncoding), input_name='server'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_users', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_users'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.server is not None and 'server' not in already_processed:
            already_processed.append('server')
            showIndent(outfile, level)
            outfile.write('server = "%s",\n' % (self.server,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('server', node)
        if value is not None and 'server' not in already_processed:
            already_processed.append('server')
            self.server = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_users


class get_username(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_username.subclass:
            return get_username.subclass(*args_, **kwargs_)
        else:
            return get_username(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_username', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_username')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_username'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_username', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_username'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_username


class get_user_info(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, count=None, timestamp=None, pid=None, server=None, result=None, tid=None, id=None):
        self.username = _cast(None, username)
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.server = _cast(None, server)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_user_info.subclass:
            return get_user_info.subclass(*args_, **kwargs_)
        else:
            return get_user_info(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_server(self): return self.server
    def set_server(self, server): self.server = server
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_user_info', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_user_info')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_user_info'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.server is not None and 'server' not in already_processed:
            already_processed.append('server')
            outfile.write(' server=%s' % (self.gds_format_string(quote_attrib(self.server).encode(ExternalEncoding), input_name='server'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_user_info', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_user_info'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.server is not None and 'server' not in already_processed:
            already_processed.append('server')
            showIndent(outfile, level)
            outfile.write('server = "%s",\n' % (self.server,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('server', node)
        if value is not None and 'server' not in already_processed:
            already_processed.append('server')
            self.server = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_user_info


class share_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, add_share=None, remove_share=None, enumerate_shares=None, connect_to_share=None, disconnect_from_share=None):
        self.add_share = []
        self.remove_share = []
        self.enumerate_shares = []
        self.connect_to_share = []
        self.disconnect_from_share = []
    def factory(*args_, **kwargs_):
        if share_section.subclass:
            return share_section.subclass(*args_, **kwargs_)
        else:
            return share_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_add_share(self): return self.add_share
    def set_add_share(self, add_share): self.add_share = add_share
    def get_remove_share(self): return self.remove_share
    def set_remove_share(self, remove_share): self.remove_share = remove_share
    def get_enumerate_shares(self): return self.enumerate_shares
    def set_enumerate_shares(self, enumerate_shares): self.enumerate_shares = enumerate_shares
    def get_connect_to_share(self): return self.connect_to_share
    def set_connect_to_share(self, connect_to_share): self.connect_to_share = connect_to_share
    def get_disconnect_from_share(self): return self.disconnect_from_share
    def set_disconnect_from_share(self, disconnect_from_share): self.disconnect_from_share = disconnect_from_share
    def export(self, outfile, level, namespace_='', name_='share_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='share_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='share_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='share_section', fromsubclass_=False):
        if self.add_share is not None:
            self.add_share.export(outfile, level, namespace_, name_='add_share')
        if self.remove_share is not None:
            self.remove_share.export(outfile, level, namespace_, name_='remove_share')
        if self.enumerate_shares is not None:
            self.enumerate_shares.export(outfile, level, namespace_, name_='enumerate_shares')
        if self.connect_to_share is not None:
            self.connect_to_share.export(outfile, level, namespace_, name_='connect_to_share')
        if self.disconnect_from_share is not None:
            self.disconnect_from_share.export(outfile, level, namespace_, name_='disconnect_from_share')
    def hasContent_(self):
        if (
            self.add_share is not None or
            self.remove_share is not None or
            self.enumerate_shares is not None or
            self.connect_to_share is not None or
            self.disconnect_from_share is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='share_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.add_share is not None:
            showIndent(outfile, level)
            outfile.write('add_share=model_.add_share(\n')
            self.add_share.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.remove_share is not None:
            showIndent(outfile, level)
            outfile.write('remove_share=model_.remove_share(\n')
            self.remove_share.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_shares is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_shares=model_.enumerate_shares(\n')
            self.enumerate_shares.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.connect_to_share is not None:
            showIndent(outfile, level)
            outfile.write('connect_to_share=model_.connect_to_share(\n')
            self.connect_to_share.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.disconnect_from_share is not None:
            showIndent(outfile, level)
            outfile.write('disconnect_from_share=model_.disconnect_from_share(\n')
            self.disconnect_from_share.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'add_share':
            obj_ = add_share.factory()
            obj_.build(child_)
            self.add_share.append(obj_)
        elif nodeName_ == 'remove_share':
            obj_ = remove_share.factory()
            obj_.build(child_)
            self.remove_share.append(obj_)
        elif nodeName_ == 'enumerate_shares':
            obj_ = enumerate_shares.factory()
            obj_.build(child_)
            self.enumerate_shares.append(obj_)
        elif nodeName_ == 'connect_to_share':
            obj_ = connect_to_share.factory()
            obj_.build(child_)
            self.connect_to_share.append(obj_)
        elif nodeName_ == 'disconnect_from_share':
            obj_ = disconnect_from_share.factory()
            obj_.build(child_)
            self.disconnect_from_share.append(obj_)
# end class share_section


class add_share(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, resource=None, timestamp=None, pid=None, local_filename=None, tid=None, id=None, result=None):
        self.count = _cast(int, count)
        self.resource = _cast(None, resource)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.local_filename = _cast(None, local_filename)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        pass
    def factory(*args_, **kwargs_):
        if add_share.subclass:
            return add_share.subclass(*args_, **kwargs_)
        else:
            return add_share(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_local_filename(self): return self.local_filename
    def set_local_filename(self, local_filename): self.local_filename = local_filename
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def export(self, outfile, level, namespace_='', name_='add_share', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='add_share')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='add_share'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            outfile.write(' resource=%s' % (self.gds_format_string(quote_attrib(self.resource).encode(ExternalEncoding), input_name='resource'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.local_filename is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            outfile.write(' local_filename=%s' % (self.gds_format_string(quote_attrib(self.local_filename).encode(ExternalEncoding), input_name='local_filename'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='add_share', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='add_share'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            showIndent(outfile, level)
            outfile.write('resource = "%s",\n' % (self.resource,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.local_filename is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            showIndent(outfile, level)
            outfile.write('local_filename = "%s",\n' % (self.local_filename,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('resource', node)
        if value is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            self.resource = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_filename', node)
        if value is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            self.local_filename = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class add_share


class remove_share(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, resource=None, timestamp=None, hostname=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.resource = _cast(None, resource)
        self.timestamp = _cast(None, timestamp)
        self.hostname = _cast(None, hostname)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if remove_share.subclass:
            return remove_share.subclass(*args_, **kwargs_)
        else:
            return remove_share(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_hostname(self): return self.hostname
    def set_hostname(self, hostname): self.hostname = hostname
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='remove_share', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='remove_share')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='remove_share'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            outfile.write(' resource=%s' % (self.gds_format_string(quote_attrib(self.resource).encode(ExternalEncoding), input_name='resource'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.hostname is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            outfile.write(' hostname=%s' % (self.gds_format_string(quote_attrib(self.hostname).encode(ExternalEncoding), input_name='hostname'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='remove_share', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='remove_share'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            showIndent(outfile, level)
            outfile.write('resource = "%s",\n' % (self.resource,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.hostname is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            showIndent(outfile, level)
            outfile.write('hostname = "%s",\n' % (self.hostname,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('resource', node)
        if value is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            self.resource = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('hostname', node)
        if value is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            self.hostname = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class remove_share


class enumerate_shares(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, resource=None, timestamp=None, hostname=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.resource = _cast(None, resource)
        self.timestamp = _cast(None, timestamp)
        self.hostname = _cast(None, hostname)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_shares.subclass:
            return enumerate_shares.subclass(*args_, **kwargs_)
        else:
            return enumerate_shares(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_hostname(self): return self.hostname
    def set_hostname(self, hostname): self.hostname = hostname
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_shares', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_shares')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_shares'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            outfile.write(' resource=%s' % (self.gds_format_string(quote_attrib(self.resource).encode(ExternalEncoding), input_name='resource'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.hostname is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            outfile.write(' hostname=%s' % (self.gds_format_string(quote_attrib(self.hostname).encode(ExternalEncoding), input_name='hostname'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_shares', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_shares'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            showIndent(outfile, level)
            outfile.write('resource = "%s",\n' % (self.resource,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.hostname is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            showIndent(outfile, level)
            outfile.write('hostname = "%s",\n' % (self.hostname,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('resource', node)
        if value is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            self.resource = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('hostname', node)
        if value is not None and 'hostname' not in already_processed:
            already_processed.append('hostname')
            self.hostname = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_shares


class connect_to_share(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, username=None, count=None, resource=None, timestamp=None, pid=None, local_filename=None, tid=None, id=None, result=None):
        self.username = _cast(None, username)
        self.count = _cast(int, count)
        self.resource = _cast(None, resource)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.local_filename = _cast(None, local_filename)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        pass
    def factory(*args_, **kwargs_):
        if connect_to_share.subclass:
            return connect_to_share.subclass(*args_, **kwargs_)
        else:
            return connect_to_share(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_username(self): return self.username
    def set_username(self, username): self.username = username
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_local_filename(self): return self.local_filename
    def set_local_filename(self, local_filename): self.local_filename = local_filename
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def export(self, outfile, level, namespace_='', name_='connect_to_share', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connect_to_share')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connect_to_share'):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            outfile.write(' username=%s' % (self.gds_format_string(quote_attrib(self.username).encode(ExternalEncoding), input_name='username'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            outfile.write(' resource=%s' % (self.gds_format_string(quote_attrib(self.resource).encode(ExternalEncoding), input_name='resource'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.local_filename is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            outfile.write(' local_filename=%s' % (self.gds_format_string(quote_attrib(self.local_filename).encode(ExternalEncoding), input_name='local_filename'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='connect_to_share', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connect_to_share'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.username is not None and 'username' not in already_processed:
            already_processed.append('username')
            showIndent(outfile, level)
            outfile.write('username = "%s",\n' % (self.username,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            showIndent(outfile, level)
            outfile.write('resource = "%s",\n' % (self.resource,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.local_filename is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            showIndent(outfile, level)
            outfile.write('local_filename = "%s",\n' % (self.local_filename,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('username', node)
        if value is not None and 'username' not in already_processed:
            already_processed.append('username')
            self.username = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('resource', node)
        if value is not None and 'resource' not in already_processed:
            already_processed.append('resource')
            self.resource = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_filename', node)
        if value is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            self.local_filename = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class connect_to_share


class disconnect_from_share(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, local_filename=None, tid=None, id=None, result=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.local_filename = _cast(None, local_filename)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        pass
    def factory(*args_, **kwargs_):
        if disconnect_from_share.subclass:
            return disconnect_from_share.subclass(*args_, **kwargs_)
        else:
            return disconnect_from_share(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_local_filename(self): return self.local_filename
    def set_local_filename(self, local_filename): self.local_filename = local_filename
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def export(self, outfile, level, namespace_='', name_='disconnect_from_share', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='disconnect_from_share')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='disconnect_from_share'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.local_filename is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            outfile.write(' local_filename=%s' % (self.gds_format_string(quote_attrib(self.local_filename).encode(ExternalEncoding), input_name='local_filename'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='disconnect_from_share', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='disconnect_from_share'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.local_filename is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            showIndent(outfile, level)
            outfile.write('local_filename = "%s",\n' % (self.local_filename,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_filename', node)
        if value is not None and 'local_filename' not in already_processed:
            already_processed.append('local_filename')
            self.local_filename = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class disconnect_from_share


class module_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mapping_module=None, module_mapped=None, load_module=None, unload_module=None, enumerate_dlls=None, get_proc_address=None, install_winhook_proc=None):
        self.mapping_module = []
        self.module_mapped = []
        self.load_module = []
        self.unload_module = []
        self.enumerate_dlls = []
        self.get_proc_address = []
        self.install_winhook_proc = []
    def factory(*args_, **kwargs_):
        if module_section.subclass:
            return module_section.subclass(*args_, **kwargs_)
        else:
            return module_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mapping_module(self): return self.mapping_module
    def set_mapping_module(self, mapping_module): self.mapping_module = mapping_module
    def get_module_mapped(self): return self.module_mapped
    def set_module_mapped(self, module_mapped): self.module_mapped = module_mapped
    def get_load_module(self): return self.load_module
    def set_load_module(self, load_module): self.load_module = load_module
    def get_unload_module(self): return self.unload_module
    def set_unload_module(self, unload_module): self.unload_module = unload_module
    def get_enumerate_dlls(self): return self.enumerate_dlls
    def set_enumerate_dlls(self, enumerate_dlls): self.enumerate_dlls = enumerate_dlls
    def get_get_proc_address(self): return self.get_proc_address
    def set_get_proc_address(self, get_proc_address): self.get_proc_address = get_proc_address
    def get_install_winhook_proc(self): return self.install_winhook_proc
    def set_install_winhook_proc(self, install_winhook_proc): self.install_winhook_proc = install_winhook_proc
    def export(self, outfile, level, namespace_='', name_='module_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='module_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='module_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='module_section', fromsubclass_=False):
        if self.mapping_module is not None:
            self.mapping_module.export(outfile, level, namespace_, name_='mapping_module')
        if self.module_mapped is not None:
            self.module_mapped.export(outfile, level, namespace_, name_='module_mapped')
        if self.load_module is not None:
            self.load_module.export(outfile, level, namespace_, name_='load_module')
        if self.unload_module is not None:
            self.unload_module.export(outfile, level, namespace_, name_='unload_module')
        if self.enumerate_dlls is not None:
            self.enumerate_dlls.export(outfile, level, namespace_, name_='enumerate_dlls')
        if self.get_proc_address is not None:
            self.get_proc_address.export(outfile, level, namespace_, name_='get_proc_address')
        if self.install_winhook_proc is not None:
            self.install_winhook_proc.export(outfile, level, namespace_, name_='install_winhook_proc')
    def hasContent_(self):
        if (
            self.mapping_module is not None or
            self.module_mapped is not None or
            self.load_module is not None or
            self.unload_module is not None or
            self.enumerate_dlls is not None or
            self.get_proc_address is not None or
            self.install_winhook_proc is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='module_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mapping_module is not None:
            showIndent(outfile, level)
            outfile.write('mapping_module=model_.mapping_module(\n')
            self.mapping_module.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.module_mapped is not None:
            showIndent(outfile, level)
            outfile.write('module_mapped=model_.module_mapped(\n')
            self.module_mapped.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.load_module is not None:
            showIndent(outfile, level)
            outfile.write('load_module=model_.load_module(\n')
            self.load_module.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unload_module is not None:
            showIndent(outfile, level)
            outfile.write('unload_module=model_.unload_module(\n')
            self.unload_module.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.enumerate_dlls is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_dlls=model_.enumerate_dlls(\n')
            self.enumerate_dlls.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.get_proc_address is not None:
            showIndent(outfile, level)
            outfile.write('get_proc_address=model_.get_proc_address(\n')
            self.get_proc_address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.install_winhook_proc is not None:
            showIndent(outfile, level)
            outfile.write('install_winhook_proc=model_.install_winhook_proc(\n')
            self.install_winhook_proc.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mapping_module':
            obj_ = mapping_module.factory()
            obj_.build(child_)
            self.mapping_module.append(obj_)
        elif nodeName_ == 'module_mapped':
            obj_ = module_mapped.factory()
            obj_.build(child_)
            self.module_mapped.append(obj_)
        elif nodeName_ == 'load_module':
            obj_ = load_module.factory()
            obj_.build(child_)
            self.load_module.append(obj_)
        elif nodeName_ == 'unload_module':
            obj_ = unload_module.factory()
            obj_.build(child_)
            self.unload_module.append(obj_)
        elif nodeName_ == 'enumerate_dlls':
            obj_ = enumerate_dlls.factory()
            obj_.build(child_)
            self.enumerate_dlls.append(obj_)
        elif nodeName_ == 'get_proc_address':
            obj_ = get_proc_address.factory()
            obj_.build(child_)
            self.get_proc_address.append(obj_)
        elif nodeName_ == 'install_winhook_proc':
            obj_ = install_winhook_proc.factory()
            obj_.build(child_)
            self.install_winhook_proc.append(obj_)
# end class module_section


class mapping_module(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if mapping_module.subclass:
            return mapping_module.subclass(*args_, **kwargs_)
        else:
            return mapping_module(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='mapping_module', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mapping_module')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mapping_module'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='mapping_module', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='mapping_module'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mapping_module


class module_mapped(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, internal_name=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.internal_name = _cast(None, internal_name)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if module_mapped.subclass:
            return module_mapped.subclass(*args_, **kwargs_)
        else:
            return module_mapped(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_internal_name(self): return self.internal_name
    def set_internal_name(self, internal_name): self.internal_name = internal_name
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='module_mapped', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='module_mapped')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='module_mapped'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.internal_name is not None and 'internal_name' not in already_processed:
            already_processed.append('internal_name')
            outfile.write(' internal_name=%s' % (self.gds_format_string(quote_attrib(self.internal_name).encode(ExternalEncoding), input_name='internal_name'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='module_mapped', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='module_mapped'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.internal_name is not None and 'internal_name' not in already_processed:
            already_processed.append('internal_name')
            showIndent(outfile, level)
            outfile.write('internal_name = "%s",\n' % (self.internal_name,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('internal_name', node)
        if value is not None and 'internal_name' not in already_processed:
            already_processed.append('internal_name')
            self.internal_name = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class module_mapped


class load_module(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if load_module.subclass:
            return load_module.subclass(*args_, **kwargs_)
        else:
            return load_module(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='load_module', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='load_module')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='load_module'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='load_module', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='load_module'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class load_module


class unload_module(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, internal_name=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.internal_name = _cast(None, internal_name)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if unload_module.subclass:
            return unload_module.subclass(*args_, **kwargs_)
        else:
            return unload_module(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_internal_name(self): return self.internal_name
    def set_internal_name(self, internal_name): self.internal_name = internal_name
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='unload_module', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unload_module')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='unload_module'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.internal_name is not None and 'internal_name' not in already_processed:
            already_processed.append('internal_name')
            outfile.write(' internal_name=%s' % (self.gds_format_string(quote_attrib(self.internal_name).encode(ExternalEncoding), input_name='internal_name'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='unload_module', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unload_module'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.internal_name is not None and 'internal_name' not in already_processed:
            already_processed.append('internal_name')
            showIndent(outfile, level)
            outfile.write('internal_name = "%s",\n' % (self.internal_name,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('internal_name', node)
        if value is not None and 'internal_name' not in already_processed:
            already_processed.append('internal_name')
            self.internal_name = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class unload_module


class enumerate_dlls(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, target_pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.target_pid = _cast(int, target_pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_dlls.subclass:
            return enumerate_dlls.subclass(*args_, **kwargs_)
        else:
            return enumerate_dlls(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_target_pid(self): return self.target_pid
    def set_target_pid(self, target_pid): self.target_pid = target_pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='enumerate_dlls', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_dlls')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_dlls'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            outfile.write(' target_pid="%s"' % self.gds_format_integer(self.target_pid, input_name='target_pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_dlls', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_dlls'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.target_pid is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            showIndent(outfile, level)
            outfile.write('target_pid = %d,\n' % (self.target_pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('target_pid', node)
        if value is not None and 'target_pid' not in already_processed:
            already_processed.append('target_pid')
            try:
                self.target_pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_dlls


class get_proc_address(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ordinal=None, function=None, timestamp=None, pid=None, count=None, filename=None, result=None, tid=None, id=None):
        self.ordinal = _cast(int, ordinal)
        self.function = _cast(None, function)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.count = _cast(int, count)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if get_proc_address.subclass:
            return get_proc_address.subclass(*args_, **kwargs_)
        else:
            return get_proc_address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ordinal(self): return self.ordinal
    def set_ordinal(self, ordinal): self.ordinal = ordinal
    def get_function(self): return self.function
    def set_function(self, function): self.function = function
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='get_proc_address', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='get_proc_address')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='get_proc_address'):
        if self.ordinal is not None and 'ordinal' not in already_processed:
            already_processed.append('ordinal')
            outfile.write(' ordinal="%s"' % self.gds_format_integer(self.ordinal, input_name='ordinal'))
        if self.function is not None and 'function' not in already_processed:
            already_processed.append('function')
            outfile.write(' function=%s' % (self.gds_format_string(quote_attrib(self.function).encode(ExternalEncoding), input_name='function'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='get_proc_address', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='get_proc_address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ordinal is not None and 'ordinal' not in already_processed:
            already_processed.append('ordinal')
            showIndent(outfile, level)
            outfile.write('ordinal = %d,\n' % (self.ordinal,))
        if self.function is not None and 'function' not in already_processed:
            already_processed.append('function')
            showIndent(outfile, level)
            outfile.write('function = "%s",\n' % (self.function,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ordinal', node)
        if value is not None and 'ordinal' not in already_processed:
            already_processed.append('ordinal')
            try:
                self.ordinal = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('function', node)
        if value is not None and 'function' not in already_processed:
            already_processed.append('function')
            self.function = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class get_proc_address


class install_winhook_proc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, function=None, count=None, timestamp=None, pid=None, filename=None, tid=None, result=None, hook_id=None, id=None):
        self.function = _cast(None, function)
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.tid = _cast(int, tid)
        self.result = _cast(None, result)
        self.hook_id = _cast(None, hook_id)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if install_winhook_proc.subclass:
            return install_winhook_proc.subclass(*args_, **kwargs_)
        else:
            return install_winhook_proc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_function(self): return self.function
    def set_function(self, function): self.function = function
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_hook_id(self): return self.hook_id
    def set_hook_id(self, hook_id): self.hook_id = hook_id
    def validate_type_hookid(self, value):
        # Validate type type_hookid, a restriction on xs:string.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='install_winhook_proc', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='install_winhook_proc')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='install_winhook_proc'):
        if self.function is not None and 'function' not in already_processed:
            already_processed.append('function')
            outfile.write(' function=%s' % (self.gds_format_string(quote_attrib(self.function).encode(ExternalEncoding), input_name='function'), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.hook_id is not None and 'hook_id' not in already_processed:
            already_processed.append('hook_id')
            outfile.write(' hook_id=%s' % (quote_attrib(self.hook_id), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='install_winhook_proc', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='install_winhook_proc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.function is not None and 'function' not in already_processed:
            already_processed.append('function')
            showIndent(outfile, level)
            outfile.write('function = "%s",\n' % (self.function,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.hook_id is not None and 'hook_id' not in already_processed:
            already_processed.append('hook_id')
            showIndent(outfile, level)
            outfile.write('hook_id = "%s",\n' % (self.hook_id,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('function', node)
        if value is not None and 'function' not in already_processed:
            already_processed.append('function')
            self.function = value
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('hook_id', node)
        if value is not None and 'hook_id' not in already_processed:
            already_processed.append('hook_id')
            self.hook_id = value
            self.validate_type_hookid(self.hook_id)    # validate type type_hookid
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class install_winhook_proc


class networkpacket_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, connect_to_computer=None, disconnect_from_computer=None, packet_data=None, listen_for_connection=None, ping=None):
        self.connect_to_computer = []
        self.disconnect_from_computer = []
        self.packet_data = []
        self.listen_for_connection = []
        self.ping = []
    def factory(*args_, **kwargs_):
        if networkpacket_section.subclass:
            return networkpacket_section.subclass(*args_, **kwargs_)
        else:
            return networkpacket_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_connect_to_computer(self): return self.connect_to_computer
    def set_connect_to_computer(self, connect_to_computer): self.connect_to_computer = connect_to_computer
    def get_disconnect_from_computer(self): return self.disconnect_from_computer
    def set_disconnect_from_computer(self, disconnect_from_computer): self.disconnect_from_computer = disconnect_from_computer
    def get_packet_data(self): return self.packet_data
    def set_packet_data(self, packet_data): self.packet_data = packet_data
    def get_listen_for_connection(self): return self.listen_for_connection
    def set_listen_for_connection(self, listen_for_connection): self.listen_for_connection = listen_for_connection
    def get_ping(self): return self.ping
    def set_ping(self, ping): self.ping = ping
    def export(self, outfile, level, namespace_='', name_='networkpacket_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='networkpacket_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='networkpacket_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='networkpacket_section', fromsubclass_=False):
        if self.connect_to_computer is not None:
            self.connect_to_computer.export(outfile, level, namespace_, name_='connect_to_computer')
        if self.disconnect_from_computer is not None:
            self.disconnect_from_computer.export(outfile, level, namespace_, name_='disconnect_from_computer')
        if self.packet_data is not None:
            self.packet_data.export(outfile, level, namespace_, name_='packet_data')
        if self.listen_for_connection is not None:
            self.listen_for_connection.export(outfile, level, namespace_, name_='listen_for_connection')
        if self.ping is not None:
            self.ping.export(outfile, level, namespace_, name_='ping')
    def hasContent_(self):
        if (
            self.connect_to_computer is not None or
            self.disconnect_from_computer is not None or
            self.packet_data is not None or
            self.listen_for_connection is not None or
            self.ping is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='networkpacket_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.connect_to_computer is not None:
            showIndent(outfile, level)
            outfile.write('connect_to_computer=model_.connect_to_computer(\n')
            self.connect_to_computer.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.disconnect_from_computer is not None:
            showIndent(outfile, level)
            outfile.write('disconnect_from_computer=model_.disconnect_from_computer(\n')
            self.disconnect_from_computer.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.packet_data is not None:
            showIndent(outfile, level)
            outfile.write('packet_data=model_.packet_data(\n')
            self.packet_data.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.listen_for_connection is not None:
            showIndent(outfile, level)
            outfile.write('listen_for_connection=model_.listen_for_connection(\n')
            self.listen_for_connection.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ping is not None:
            showIndent(outfile, level)
            outfile.write('ping=model_.ping(\n')
            self.ping.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'connect_to_computer':
            obj_ = connect_to_computer.factory()
            obj_.build(child_)
            self.connect_to_computer.append(obj_)
        elif nodeName_ == 'disconnect_from_computer':
            obj_ = disconnect_from_computer.factory()
            obj_.build(child_)
            self.disconnect_from_computer.append(obj_)
        elif nodeName_ == 'packet_data':
            obj_ = packet_data.factory()
            obj_.build(child_)
            self.packet_data.append(obj_)
        elif nodeName_ == 'listen_for_connection':
            obj_ = listen_for_connection.factory()
            obj_.build(child_)
            self.listen_for_connection.append(obj_)
        elif nodeName_ == 'ping':
            obj_ = ping.factory()
            obj_.build(child_)
            self.ping.append(obj_)
# end class networkpacket_section


class connect_to_computer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, direction=None, local_port=None, protocol_l4=None, timestamp=None, pid=None, remote_port=None, local_ip=None, remote_hostname=None, protocol_l3=None, sandbox_action=None, result=None, tid=None, id=None, remote_ip=None):
        self.count = _cast(int, count)
        self.direction = _cast(None, direction)
        self.local_port = _cast(int, local_port)
        self.protocol_l4 = _cast(None, protocol_l4)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.remote_port = _cast(int, remote_port)
        self.local_ip = _cast(None, local_ip)
        self.remote_hostname = _cast(None, remote_hostname)
        self.protocol_l3 = _cast(None, protocol_l3)
        self.sandbox_action = _cast(None, sandbox_action)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.remote_ip = _cast(None, remote_ip)
        pass
    def factory(*args_, **kwargs_):
        if connect_to_computer.subclass:
            return connect_to_computer.subclass(*args_, **kwargs_)
        else:
            return connect_to_computer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def validate_type_networkdirection(self, value):
        # Validate type type_networkdirection, a restriction on xs:string.
        pass
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def get_protocol_l4(self): return self.protocol_l4
    def set_protocol_l4(self, protocol_l4): self.protocol_l4 = protocol_l4
    def validate_type_l4prot(self, value):
        # Validate type type_l4prot, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_remote_port(self): return self.remote_port
    def set_remote_port(self, remote_port): self.remote_port = remote_port
    def get_local_ip(self): return self.local_ip
    def set_local_ip(self, local_ip): self.local_ip = local_ip
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_remote_hostname(self): return self.remote_hostname
    def set_remote_hostname(self, remote_hostname): self.remote_hostname = remote_hostname
    def get_protocol_l3(self): return self.protocol_l3
    def set_protocol_l3(self, protocol_l3): self.protocol_l3 = protocol_l3
    def validate_type_l3prot(self, value):
        # Validate type type_l3prot, a restriction on xs:string.
        pass
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_remote_ip(self): return self.remote_ip
    def set_remote_ip(self, remote_ip): self.remote_ip = remote_ip
    def export(self, outfile, level, namespace_='', name_='connect_to_computer', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='connect_to_computer')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='connect_to_computer'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            outfile.write(' protocol_l4=%s' % (quote_attrib(self.protocol_l4), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            outfile.write(' remote_port="%s"' % self.gds_format_integer(self.remote_port, input_name='remote_port'))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            outfile.write(' local_ip=%s' % (quote_attrib(self.local_ip), ))
        if self.remote_hostname is not None and 'remote_hostname' not in already_processed:
            already_processed.append('remote_hostname')
            outfile.write(' remote_hostname=%s' % (self.gds_format_string(quote_attrib(self.remote_hostname).encode(ExternalEncoding), input_name='remote_hostname'), ))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            outfile.write(' protocol_l3=%s' % (quote_attrib(self.protocol_l3), ))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            outfile.write(' remote_ip=%s' % (quote_attrib(self.remote_ip), ))
    def exportChildren(self, outfile, level, namespace_='', name_='connect_to_computer', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='connect_to_computer'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            showIndent(outfile, level)
            outfile.write('direction = "%s",\n' % (self.direction,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            showIndent(outfile, level)
            outfile.write('protocol_l4 = "%s",\n' % (self.protocol_l4,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            showIndent(outfile, level)
            outfile.write('remote_port = %d,\n' % (self.remote_port,))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            showIndent(outfile, level)
            outfile.write('local_ip = "%s",\n' % (self.local_ip,))
        if self.remote_hostname is not None and 'remote_hostname' not in already_processed:
            already_processed.append('remote_hostname')
            showIndent(outfile, level)
            outfile.write('remote_hostname = "%s",\n' % (self.remote_hostname,))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            showIndent(outfile, level)
            outfile.write('protocol_l3 = "%s",\n' % (self.protocol_l3,))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            showIndent(outfile, level)
            outfile.write('remote_ip = "%s",\n' % (self.remote_ip,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            self.direction = value
            self.validate_type_networkdirection(self.direction)    # validate type type_networkdirection
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protocol_l4', node)
        if value is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            self.protocol_l4 = value
            self.validate_type_l4prot(self.protocol_l4)    # validate type type_l4prot
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_port', node)
        if value is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            try:
                self.remote_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_ip', node)
        if value is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            self.local_ip = value
            self.validate_type_ip(self.local_ip)    # validate type type_ip
        value = find_attr_value_('remote_hostname', node)
        if value is not None and 'remote_hostname' not in already_processed:
            already_processed.append('remote_hostname')
            self.remote_hostname = value
        value = find_attr_value_('protocol_l3', node)
        if value is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            self.protocol_l3 = value
            self.validate_type_l3prot(self.protocol_l3)    # validate type type_l3prot
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_ip', node)
        if value is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            self.remote_ip = value
            self.validate_type_ip(self.remote_ip)    # validate type type_ip
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class connect_to_computer


class disconnect_from_computer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, direction=None, local_port=None, protocol_l4=None, timestamp=None, pid=None, remote_port=None, local_ip=None, protocol_l3=None, result=None, tid=None, id=None, remote_ip=None):
        self.count = _cast(int, count)
        self.direction = _cast(None, direction)
        self.local_port = _cast(int, local_port)
        self.protocol_l4 = _cast(None, protocol_l4)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.remote_port = _cast(int, remote_port)
        self.local_ip = _cast(None, local_ip)
        self.protocol_l3 = _cast(None, protocol_l3)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        self.remote_ip = _cast(None, remote_ip)
        pass
    def factory(*args_, **kwargs_):
        if disconnect_from_computer.subclass:
            return disconnect_from_computer.subclass(*args_, **kwargs_)
        else:
            return disconnect_from_computer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def validate_type_networkdirection(self, value):
        # Validate type type_networkdirection, a restriction on xs:string.
        pass
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def get_protocol_l4(self): return self.protocol_l4
    def set_protocol_l4(self, protocol_l4): self.protocol_l4 = protocol_l4
    def validate_type_l4prot(self, value):
        # Validate type type_l4prot, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_remote_port(self): return self.remote_port
    def set_remote_port(self, remote_port): self.remote_port = remote_port
    def get_local_ip(self): return self.local_ip
    def set_local_ip(self, local_ip): self.local_ip = local_ip
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_protocol_l3(self): return self.protocol_l3
    def set_protocol_l3(self, protocol_l3): self.protocol_l3 = protocol_l3
    def validate_type_l3prot(self, value):
        # Validate type type_l3prot, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_remote_ip(self): return self.remote_ip
    def set_remote_ip(self, remote_ip): self.remote_ip = remote_ip
    def export(self, outfile, level, namespace_='', name_='disconnect_from_computer', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='disconnect_from_computer')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='disconnect_from_computer'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            outfile.write(' protocol_l4=%s' % (quote_attrib(self.protocol_l4), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            outfile.write(' remote_port="%s"' % self.gds_format_integer(self.remote_port, input_name='remote_port'))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            outfile.write(' local_ip=%s' % (quote_attrib(self.local_ip), ))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            outfile.write(' protocol_l3=%s' % (quote_attrib(self.protocol_l3), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            outfile.write(' remote_ip=%s' % (quote_attrib(self.remote_ip), ))
    def exportChildren(self, outfile, level, namespace_='', name_='disconnect_from_computer', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='disconnect_from_computer'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            showIndent(outfile, level)
            outfile.write('direction = "%s",\n' % (self.direction,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            showIndent(outfile, level)
            outfile.write('protocol_l4 = "%s",\n' % (self.protocol_l4,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            showIndent(outfile, level)
            outfile.write('remote_port = %d,\n' % (self.remote_port,))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            showIndent(outfile, level)
            outfile.write('local_ip = "%s",\n' % (self.local_ip,))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            showIndent(outfile, level)
            outfile.write('protocol_l3 = "%s",\n' % (self.protocol_l3,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            showIndent(outfile, level)
            outfile.write('remote_ip = "%s",\n' % (self.remote_ip,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            self.direction = value
            self.validate_type_networkdirection(self.direction)    # validate type type_networkdirection
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protocol_l4', node)
        if value is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            self.protocol_l4 = value
            self.validate_type_l4prot(self.protocol_l4)    # validate type type_l4prot
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_port', node)
        if value is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            try:
                self.remote_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_ip', node)
        if value is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            self.local_ip = value
            self.validate_type_ip(self.local_ip)    # validate type type_ip
        value = find_attr_value_('protocol_l3', node)
        if value is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            self.protocol_l3 = value
            self.validate_type_l3prot(self.protocol_l3)    # validate type type_l3prot
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_ip', node)
        if value is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            self.remote_ip = value
            self.validate_type_ip(self.remote_ip)    # validate type type_ip
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class disconnect_from_computer


class packet_data(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, direction=None, local_port=None, protocol_l4=None, raw_data=None, pid=None, remote_port=None, local_ip=None, protocol_l3=None, sandbox_action=None, raw_data_ascii=None, id=None, result=None, timestamp=None, tid=None, data_size=None, remote_ip=None):
        self.count = _cast(int, count)
        self.direction = _cast(None, direction)
        self.local_port = _cast(int, local_port)
        self.protocol_l4 = _cast(None, protocol_l4)
        self.raw_data = _cast(None, raw_data)
        self.pid = _cast(int, pid)
        self.remote_port = _cast(int, remote_port)
        self.local_ip = _cast(None, local_ip)
        self.protocol_l3 = _cast(None, protocol_l3)
        self.sandbox_action = _cast(None, sandbox_action)
        self.raw_data_ascii = _cast(None, raw_data_ascii)
        self.id = _cast(int, id)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.data_size = _cast(int, data_size)
        self.remote_ip = _cast(None, remote_ip)
        pass
    def factory(*args_, **kwargs_):
        if packet_data.subclass:
            return packet_data.subclass(*args_, **kwargs_)
        else:
            return packet_data(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_direction(self): return self.direction
    def set_direction(self, direction): self.direction = direction
    def validate_type_networkdirection(self, value):
        # Validate type type_networkdirection, a restriction on xs:string.
        pass
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def get_protocol_l4(self): return self.protocol_l4
    def set_protocol_l4(self, protocol_l4): self.protocol_l4 = protocol_l4
    def validate_type_l4prot(self, value):
        # Validate type type_l4prot, a restriction on xs:string.
        pass
    def get_raw_data(self): return self.raw_data
    def set_raw_data(self, raw_data): self.raw_data = raw_data
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_remote_port(self): return self.remote_port
    def set_remote_port(self, remote_port): self.remote_port = remote_port
    def get_local_ip(self): return self.local_ip
    def set_local_ip(self, local_ip): self.local_ip = local_ip
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_protocol_l3(self): return self.protocol_l3
    def set_protocol_l3(self, protocol_l3): self.protocol_l3 = protocol_l3
    def validate_type_l3prot(self, value):
        # Validate type type_l3prot, a restriction on xs:string.
        pass
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_raw_data_ascii(self): return self.raw_data_ascii
    def set_raw_data_ascii(self, raw_data_ascii): self.raw_data_ascii = raw_data_ascii
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_data_size(self): return self.data_size
    def set_data_size(self, data_size): self.data_size = data_size
    def get_remote_ip(self): return self.remote_ip
    def set_remote_ip(self, remote_ip): self.remote_ip = remote_ip
    def export(self, outfile, level, namespace_='', name_='packet_data', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='packet_data')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='packet_data'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            outfile.write(' direction=%s' % (quote_attrib(self.direction), ))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            outfile.write(' protocol_l4=%s' % (quote_attrib(self.protocol_l4), ))
        if self.raw_data is not None and 'raw_data' not in already_processed:
            already_processed.append('raw_data')
            outfile.write(' raw_data=%s' % (self.gds_format_string(quote_attrib(self.raw_data).encode(ExternalEncoding), input_name='raw_data'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            outfile.write(' remote_port="%s"' % self.gds_format_integer(self.remote_port, input_name='remote_port'))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            outfile.write(' local_ip=%s' % (quote_attrib(self.local_ip), ))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            outfile.write(' protocol_l3=%s' % (quote_attrib(self.protocol_l3), ))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.raw_data_ascii is not None and 'raw_data_ascii' not in already_processed:
            already_processed.append('raw_data_ascii')
            outfile.write(' raw_data_ascii=%s' % (self.gds_format_string(quote_attrib(self.raw_data_ascii).encode(ExternalEncoding), input_name='raw_data_ascii'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.data_size is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            outfile.write(' data_size="%s"' % self.gds_format_integer(self.data_size, input_name='data_size'))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            outfile.write(' remote_ip=%s' % (quote_attrib(self.remote_ip), ))
    def exportChildren(self, outfile, level, namespace_='', name_='packet_data', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='packet_data'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            showIndent(outfile, level)
            outfile.write('direction = "%s",\n' % (self.direction,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            showIndent(outfile, level)
            outfile.write('protocol_l4 = "%s",\n' % (self.protocol_l4,))
        if self.raw_data is not None and 'raw_data' not in already_processed:
            already_processed.append('raw_data')
            showIndent(outfile, level)
            outfile.write('raw_data = "%s",\n' % (self.raw_data,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.remote_port is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            showIndent(outfile, level)
            outfile.write('remote_port = %d,\n' % (self.remote_port,))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            showIndent(outfile, level)
            outfile.write('local_ip = "%s",\n' % (self.local_ip,))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            showIndent(outfile, level)
            outfile.write('protocol_l3 = "%s",\n' % (self.protocol_l3,))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.raw_data_ascii is not None and 'raw_data_ascii' not in already_processed:
            already_processed.append('raw_data_ascii')
            showIndent(outfile, level)
            outfile.write('raw_data_ascii = "%s",\n' % (self.raw_data_ascii,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.data_size is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            showIndent(outfile, level)
            outfile.write('data_size = %d,\n' % (self.data_size,))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            showIndent(outfile, level)
            outfile.write('remote_ip = "%s",\n' % (self.remote_ip,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.append('direction')
            self.direction = value
            self.validate_type_networkdirection(self.direction)    # validate type type_networkdirection
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protocol_l4', node)
        if value is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            self.protocol_l4 = value
            self.validate_type_l4prot(self.protocol_l4)    # validate type type_l4prot
        value = find_attr_value_('raw_data', node)
        if value is not None and 'raw_data' not in already_processed:
            already_processed.append('raw_data')
            self.raw_data = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_port', node)
        if value is not None and 'remote_port' not in already_processed:
            already_processed.append('remote_port')
            try:
                self.remote_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_ip', node)
        if value is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            self.local_ip = value
            self.validate_type_ip(self.local_ip)    # validate type type_ip
        value = find_attr_value_('protocol_l3', node)
        if value is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            self.protocol_l3 = value
            self.validate_type_l3prot(self.protocol_l3)    # validate type type_l3prot
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('raw_data_ascii', node)
        if value is not None and 'raw_data_ascii' not in already_processed:
            already_processed.append('raw_data_ascii')
            self.raw_data_ascii = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('data_size', node)
        if value is not None and 'data_size' not in already_processed:
            already_processed.append('data_size')
            try:
                self.data_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.data_size < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
        value = find_attr_value_('remote_ip', node)
        if value is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            self.remote_ip = value
            self.validate_type_ip(self.remote_ip)    # validate type type_ip
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class packet_data


class listen_for_connection(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, local_port=None, protocol_l4=None, timestamp=None, local_ip=None, pid=None, protocol_l3=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.local_port = _cast(int, local_port)
        self.protocol_l4 = _cast(None, protocol_l4)
        self.timestamp = _cast(None, timestamp)
        self.local_ip = _cast(None, local_ip)
        self.pid = _cast(int, pid)
        self.protocol_l3 = _cast(None, protocol_l3)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if listen_for_connection.subclass:
            return listen_for_connection.subclass(*args_, **kwargs_)
        else:
            return listen_for_connection(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_local_port(self): return self.local_port
    def set_local_port(self, local_port): self.local_port = local_port
    def get_protocol_l4(self): return self.protocol_l4
    def set_protocol_l4(self, protocol_l4): self.protocol_l4 = protocol_l4
    def validate_type_l4prot(self, value):
        # Validate type type_l4prot, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_local_ip(self): return self.local_ip
    def set_local_ip(self, local_ip): self.local_ip = local_ip
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_protocol_l3(self): return self.protocol_l3
    def set_protocol_l3(self, protocol_l3): self.protocol_l3 = protocol_l3
    def validate_type_l3prot(self, value):
        # Validate type type_l3prot, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='listen_for_connection', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='listen_for_connection')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='listen_for_connection'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            outfile.write(' local_port="%s"' % self.gds_format_integer(self.local_port, input_name='local_port'))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            outfile.write(' protocol_l4=%s' % (quote_attrib(self.protocol_l4), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            outfile.write(' local_ip=%s' % (quote_attrib(self.local_ip), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            outfile.write(' protocol_l3=%s' % (quote_attrib(self.protocol_l3), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='listen_for_connection', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='listen_for_connection'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.local_port is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            showIndent(outfile, level)
            outfile.write('local_port = %d,\n' % (self.local_port,))
        if self.protocol_l4 is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            showIndent(outfile, level)
            outfile.write('protocol_l4 = "%s",\n' % (self.protocol_l4,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            showIndent(outfile, level)
            outfile.write('local_ip = "%s",\n' % (self.local_ip,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.protocol_l3 is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            showIndent(outfile, level)
            outfile.write('protocol_l3 = "%s",\n' % (self.protocol_l3,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_port', node)
        if value is not None and 'local_port' not in already_processed:
            already_processed.append('local_port')
            try:
                self.local_port = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protocol_l4', node)
        if value is not None and 'protocol_l4' not in already_processed:
            already_processed.append('protocol_l4')
            self.protocol_l4 = value
            self.validate_type_l4prot(self.protocol_l4)    # validate type type_l4prot
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('local_ip', node)
        if value is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            self.local_ip = value
            self.validate_type_ip(self.local_ip)    # validate type type_ip
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('protocol_l3', node)
        if value is not None and 'protocol_l3' not in already_processed:
            already_processed.append('protocol_l3')
            self.protocol_l3 = value
            self.validate_type_l3prot(self.protocol_l3)    # validate type type_l3prot
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class listen_for_connection


class ping(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, code=None, local_ip=None, timestamp=None, pid=None, result=None, tid=None, type_=None, id=None, remote_ip=None):
        self.count = _cast(int, count)
        self.code = _cast(int, code)
        self.local_ip = _cast(None, local_ip)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.type_ = _cast(int, type_)
        self.id = _cast(int, id)
        self.remote_ip = _cast(None, remote_ip)
        pass
    def factory(*args_, **kwargs_):
        if ping.subclass:
            return ping.subclass(*args_, **kwargs_)
        else:
            return ping(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    def get_local_ip(self): return self.local_ip
    def set_local_ip(self, local_ip): self.local_ip = local_ip
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_remote_ip(self): return self.remote_ip
    def set_remote_ip(self, remote_ip): self.remote_ip = remote_ip
    def export(self, outfile, level, namespace_='', name_='ping', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ping')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ping'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.code is not None and 'code' not in already_processed:
            already_processed.append('code')
            outfile.write(' code="%s"' % self.gds_format_integer(self.code, input_name='code'))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            outfile.write(' local_ip=%s' % (quote_attrib(self.local_ip), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type="%s"' % self.gds_format_integer(self.type_, input_name='type'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            outfile.write(' remote_ip=%s' % (quote_attrib(self.remote_ip), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ping', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ping'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.code is not None and 'code' not in already_processed:
            already_processed.append('code')
            showIndent(outfile, level)
            outfile.write('code = %d,\n' % (self.code,))
        if self.local_ip is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            showIndent(outfile, level)
            outfile.write('local_ip = "%s",\n' % (self.local_ip,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = %d,\n' % (self.type_,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.remote_ip is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            showIndent(outfile, level)
            outfile.write('remote_ip = "%s",\n' % (self.remote_ip,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code', node)
        if value is not None and 'code' not in already_processed:
            already_processed.append('code')
            try:
                self.code = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('local_ip', node)
        if value is not None and 'local_ip' not in already_processed:
            already_processed.append('local_ip')
            self.local_ip = value
            self.validate_type_ip(self.local_ip)    # validate type type_ip
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            try:
                self.type_ = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('remote_ip', node)
        if value is not None and 'remote_ip' not in already_processed:
            already_processed.append('remote_ip')
            self.remote_ip = value
            self.validate_type_ip(self.remote_ip)    # validate type type_ip
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ping


class networkoperation_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, icmp_request=None, dns_request_by_addr=None, dns_request_by_name=None):
        self.icmp_request = []
        self.dns_request_by_addr = []
        self.dns_request_by_name = []
    def factory(*args_, **kwargs_):
        if networkoperation_section.subclass:
            return networkoperation_section.subclass(*args_, **kwargs_)
        else:
            return networkoperation_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_icmp_request(self): return self.icmp_request
    def set_icmp_request(self, icmp_request): self.icmp_request = icmp_request
    def get_dns_request_by_addr(self): return self.dns_request_by_addr
    def set_dns_request_by_addr(self, dns_request_by_addr): self.dns_request_by_addr = dns_request_by_addr
    def get_dns_request_by_name(self): return self.dns_request_by_name
    def set_dns_request_by_name(self, dns_request_by_name): self.dns_request_by_name = dns_request_by_name
    def export(self, outfile, level, namespace_='', name_='networkoperation_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='networkoperation_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='networkoperation_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='networkoperation_section', fromsubclass_=False):
        if self.icmp_request is not None:
            self.icmp_request.export(outfile, level, namespace_, name_='icmp_request')
        if self.dns_request_by_addr is not None:
            self.dns_request_by_addr.export(outfile, level, namespace_, name_='dns_request_by_addr')
        if self.dns_request_by_name is not None:
            self.dns_request_by_name.export(outfile, level, namespace_, name_='dns_request_by_name')
    def hasContent_(self):
        if (
            self.icmp_request is not None or
            self.dns_request_by_addr is not None or
            self.dns_request_by_name is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='networkoperation_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.icmp_request is not None:
            showIndent(outfile, level)
            outfile.write('icmp_request=model_.icmp_request(\n')
            self.icmp_request.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dns_request_by_addr is not None:
            showIndent(outfile, level)
            outfile.write('dns_request_by_addr=model_.dns_request_by_addr(\n')
            self.dns_request_by_addr.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dns_request_by_name is not None:
            showIndent(outfile, level)
            outfile.write('dns_request_by_name=model_.dns_request_by_name(\n')
            self.dns_request_by_name.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'icmp_request':
            obj_ = icmp_request.factory()
            obj_.build(child_)
            self.icmp_request.append(obj_)
        elif nodeName_ == 'dns_request_by_addr':
            obj_ = dns_request_by_addr.factory()
            obj_.build(child_)
            self.dns_request_by_addr.append(obj_)
        elif nodeName_ == 'dns_request_by_name':
            obj_ = dns_request_by_name.factory()
            obj_.build(child_)
            self.dns_request_by_name.append(obj_)
# end class networkoperation_section


class icmp_request(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, request_size=None, sandbox_action=None, result=None, tid=None, request_address=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.request_size = _cast(int, request_size)
        self.sandbox_action = _cast(None, sandbox_action)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.request_address = _cast(None, request_address)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if icmp_request.subclass:
            return icmp_request.subclass(*args_, **kwargs_)
        else:
            return icmp_request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_request_size(self): return self.request_size
    def set_request_size(self, request_size): self.request_size = request_size
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_request_address(self): return self.request_address
    def set_request_address(self, request_address): self.request_address = request_address
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='icmp_request', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='icmp_request')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='icmp_request'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.request_size is not None and 'request_size' not in already_processed:
            already_processed.append('request_size')
            outfile.write(' request_size="%s"' % self.gds_format_integer(self.request_size, input_name='request_size'))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.request_address is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            outfile.write(' request_address=%s' % (quote_attrib(self.request_address), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='icmp_request', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='icmp_request'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.request_size is not None and 'request_size' not in already_processed:
            already_processed.append('request_size')
            showIndent(outfile, level)
            outfile.write('request_size = %d,\n' % (self.request_size,))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.request_address is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            showIndent(outfile, level)
            outfile.write('request_address = "%s",\n' % (self.request_address,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('request_size', node)
        if value is not None and 'request_size' not in already_processed:
            already_processed.append('request_size')
            try:
                self.request_size = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('request_address', node)
        if value is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            self.request_address = value
            self.validate_type_ip(self.request_address)    # validate type type_ip
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class icmp_request


class dns_request_by_addr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, sandbox_action=None, tid=None, result=None, result_name=None, request_address=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.sandbox_action = _cast(None, sandbox_action)
        self.tid = _cast(int, tid)
        self.result = _cast(None, result)
        self.result_name = _cast(None, result_name)
        self.request_address = _cast(None, request_address)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if dns_request_by_addr.subclass:
            return dns_request_by_addr.subclass(*args_, **kwargs_)
        else:
            return dns_request_by_addr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_result_name(self): return self.result_name
    def set_result_name(self, result_name): self.result_name = result_name
    def get_request_address(self): return self.request_address
    def set_request_address(self, request_address): self.request_address = request_address
    def validate_type_ip(self, value):
        # Validate type type_ip, a restriction on xs:string.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='dns_request_by_addr', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dns_request_by_addr')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dns_request_by_addr'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.result_name is not None and 'result_name' not in already_processed:
            already_processed.append('result_name')
            outfile.write(' result_name=%s' % (self.gds_format_string(quote_attrib(self.result_name).encode(ExternalEncoding), input_name='result_name'), ))
        if self.request_address is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            outfile.write(' request_address=%s' % (quote_attrib(self.request_address), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='dns_request_by_addr', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dns_request_by_addr'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.result_name is not None and 'result_name' not in already_processed:
            already_processed.append('result_name')
            showIndent(outfile, level)
            outfile.write('result_name = "%s",\n' % (self.result_name,))
        if self.request_address is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            showIndent(outfile, level)
            outfile.write('request_address = "%s",\n' % (self.request_address,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('result_name', node)
        if value is not None and 'result_name' not in already_processed:
            already_processed.append('result_name')
            self.result_name = value
        value = find_attr_value_('request_address', node)
        if value is not None and 'request_address' not in already_processed:
            already_processed.append('request_address')
            self.request_address = value
            self.validate_type_ip(self.request_address)    # validate type type_ip
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dns_request_by_addr


class dns_request_by_name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, request_name=None, timestamp=None, pid=None, result_addresses=None, sandbox_action=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.request_name = _cast(None, request_name)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result_addresses = _cast(None, result_addresses)
        self.sandbox_action = _cast(None, sandbox_action)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if dns_request_by_name.subclass:
            return dns_request_by_name.subclass(*args_, **kwargs_)
        else:
            return dns_request_by_name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_request_name(self): return self.request_name
    def set_request_name(self, request_name): self.request_name = request_name
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result_addresses(self): return self.result_addresses
    def set_result_addresses(self, result_addresses): self.result_addresses = result_addresses
    def get_sandbox_action(self): return self.sandbox_action
    def set_sandbox_action(self, sandbox_action): self.sandbox_action = sandbox_action
    def validate_type_interference(self, value):
        # Validate type type_interference, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='dns_request_by_name', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dns_request_by_name')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dns_request_by_name'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.request_name is not None and 'request_name' not in already_processed:
            already_processed.append('request_name')
            outfile.write(' request_name=%s' % (self.gds_format_string(quote_attrib(self.request_name).encode(ExternalEncoding), input_name='request_name'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result_addresses is not None and 'result_addresses' not in already_processed:
            already_processed.append('result_addresses')
            outfile.write(' result_addresses=%s' % (self.gds_format_string(quote_attrib(self.result_addresses).encode(ExternalEncoding), input_name='result_addresses'), ))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            outfile.write(' sandbox_action=%s' % (quote_attrib(self.sandbox_action), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='dns_request_by_name', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dns_request_by_name'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.request_name is not None and 'request_name' not in already_processed:
            already_processed.append('request_name')
            showIndent(outfile, level)
            outfile.write('request_name = "%s",\n' % (self.request_name,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result_addresses is not None and 'result_addresses' not in already_processed:
            already_processed.append('result_addresses')
            showIndent(outfile, level)
            outfile.write('result_addresses = "%s",\n' % (self.result_addresses,))
        if self.sandbox_action is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            showIndent(outfile, level)
            outfile.write('sandbox_action = "%s",\n' % (self.sandbox_action,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('request_name', node)
        if value is not None and 'request_name' not in already_processed:
            already_processed.append('request_name')
            self.request_name = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result_addresses', node)
        if value is not None and 'result_addresses' not in already_processed:
            already_processed.append('result_addresses')
            self.result_addresses = value
        value = find_attr_value_('sandbox_action', node)
        if value is not None and 'sandbox_action' not in already_processed:
            already_processed.append('sandbox_action')
            self.sandbox_action = value
            self.validate_type_interference(self.sandbox_action)    # validate type type_interference
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dns_request_by_name


class checkpoint_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dll_entry_point=None, exe_entry_point=None):
        self.dll_entry_point = dll_entry_point
        self.exe_entry_point = exe_entry_point
    def factory(*args_, **kwargs_):
        if checkpoint_section.subclass:
            return checkpoint_section.subclass(*args_, **kwargs_)
        else:
            return checkpoint_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dll_entry_point(self): return self.dll_entry_point
    def set_dll_entry_point(self, dll_entry_point): self.dll_entry_point = dll_entry_point
    def get_exe_entry_point(self): return self.exe_entry_point
    def set_exe_entry_point(self, exe_entry_point): self.exe_entry_point = exe_entry_point
    def export(self, outfile, level, namespace_='', name_='checkpoint_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='checkpoint_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='checkpoint_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='checkpoint_section', fromsubclass_=False):
        if self.dll_entry_point is not None:
            self.dll_entry_point.export(outfile, level, namespace_, name_='dll_entry_point')
        if self.exe_entry_point is not None:
            self.exe_entry_point.export(outfile, level, namespace_, name_='exe_entry_point')
    def hasContent_(self):
        if (
            self.dll_entry_point is not None or
            self.exe_entry_point is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='checkpoint_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dll_entry_point is not None:
            showIndent(outfile, level)
            outfile.write('dll_entry_point=model_.dll_entry_point(\n')
            self.dll_entry_point.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.exe_entry_point is not None:
            showIndent(outfile, level)
            outfile.write('exe_entry_point=model_.exe_entry_point(\n')
            self.exe_entry_point.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dll_entry_point':
            obj_ = dll_entry_point.factory()
            obj_.build(child_)
            self.set_dll_entry_point(obj_)
        elif nodeName_ == 'exe_entry_point':
            obj_ = exe_entry_point.factory()
            obj_.build(child_)
            self.set_exe_entry_point(obj_)
# end class checkpoint_section


class dll_entry_point(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, dll_name=None, timestamp=None, pid=None, code_address=None, reason=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.dll_name = _cast(None, dll_name)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.code_address = _cast(None, code_address)
        self.reason = _cast(None, reason)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if dll_entry_point.subclass:
            return dll_entry_point.subclass(*args_, **kwargs_)
        else:
            return dll_entry_point(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_dll_name(self): return self.dll_name
    def set_dll_name(self, dll_name): self.dll_name = dll_name
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_code_address(self): return self.code_address
    def set_code_address(self, code_address): self.code_address = code_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_reason(self): return self.reason
    def set_reason(self, reason): self.reason = reason
    def validate_type_dllinitreason(self, value):
        # Validate type type_dllinitreason, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='dll_entry_point', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dll_entry_point')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dll_entry_point'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.dll_name is not None and 'dll_name' not in already_processed:
            already_processed.append('dll_name')
            outfile.write(' dll_name=%s' % (self.gds_format_string(quote_attrib(self.dll_name).encode(ExternalEncoding), input_name='dll_name'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            outfile.write(' code_address=%s' % (quote_attrib(self.code_address), ))
        if self.reason is not None and 'reason' not in already_processed:
            already_processed.append('reason')
            outfile.write(' reason=%s' % (quote_attrib(self.reason), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='dll_entry_point', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dll_entry_point'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.dll_name is not None and 'dll_name' not in already_processed:
            already_processed.append('dll_name')
            showIndent(outfile, level)
            outfile.write('dll_name = "%s",\n' % (self.dll_name,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            showIndent(outfile, level)
            outfile.write('code_address = "%s",\n' % (self.code_address,))
        if self.reason is not None and 'reason' not in already_processed:
            already_processed.append('reason')
            showIndent(outfile, level)
            outfile.write('reason = "%s",\n' % (self.reason,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('dll_name', node)
        if value is not None and 'dll_name' not in already_processed:
            already_processed.append('dll_name')
            self.dll_name = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code_address', node)
        if value is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            self.code_address = value
            self.validate_type_hexaddr(self.code_address)    # validate type type_hexaddr
        value = find_attr_value_('reason', node)
        if value is not None and 'reason' not in already_processed:
            already_processed.append('reason')
            self.reason = value
            self.validate_type_dllinitreason(self.reason)    # validate type type_dllinitreason
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dll_entry_point


class exe_entry_point(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, code_address=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.code_address = _cast(None, code_address)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if exe_entry_point.subclass:
            return exe_entry_point.subclass(*args_, **kwargs_)
        else:
            return exe_entry_point(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_code_address(self): return self.code_address
    def set_code_address(self, code_address): self.code_address = code_address
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='exe_entry_point', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='exe_entry_point')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='exe_entry_point'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            outfile.write(' code_address=%s' % (quote_attrib(self.code_address), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='exe_entry_point', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='exe_entry_point'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.code_address is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            showIndent(outfile, level)
            outfile.write('code_address = "%s",\n' % (self.code_address,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('code_address', node)
        if value is not None and 'code_address' not in already_processed:
            already_processed.append('code_address')
            self.code_address = value
            self.validate_type_hexaddr(self.code_address)    # validate type type_hexaddr
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class exe_entry_point


class com_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, create_object=None, create_object_from_file=None, load_object_from_file=None):
        self.create_object = create_object
        self.create_object_from_file = create_object_from_file
        self.load_object_from_file = load_object_from_file
    def factory(*args_, **kwargs_):
        if com_section.subclass:
            return com_section.subclass(*args_, **kwargs_)
        else:
            return com_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_create_object(self): return self.create_object
    def set_create_object(self, create_object): self.create_object = create_object
    def get_create_object_from_file(self): return self.create_object_from_file
    def set_create_object_from_file(self, create_object_from_file): self.create_object_from_file = create_object_from_file
    def get_load_object_from_file(self): return self.load_object_from_file
    def set_load_object_from_file(self, load_object_from_file): self.load_object_from_file = load_object_from_file
    def export(self, outfile, level, namespace_='', name_='com_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='com_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='com_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='com_section', fromsubclass_=False):
        if self.create_object is not None:
            self.create_object.export(outfile, level, namespace_, name_='create_object')
        if self.create_object_from_file is not None:
            self.create_object_from_file.export(outfile, level, namespace_, name_='create_object_from_file')
        if self.load_object_from_file is not None:
            self.load_object_from_file.export(outfile, level, namespace_, name_='load_object_from_file')
    def hasContent_(self):
        if (
            self.create_object is not None or
            self.create_object_from_file is not None or
            self.load_object_from_file is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='com_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.create_object is not None:
            showIndent(outfile, level)
            outfile.write('create_object=model_.create_object(\n')
            self.create_object.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_object_from_file is not None:
            showIndent(outfile, level)
            outfile.write('create_object_from_file=model_.create_object_from_file(\n')
            self.create_object_from_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.load_object_from_file is not None:
            showIndent(outfile, level)
            outfile.write('load_object_from_file=model_.load_object_from_file(\n')
            self.load_object_from_file.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'create_object':
            obj_ = create_object.factory()
            obj_.build(child_)
            self.set_create_object(obj_)
        elif nodeName_ == 'create_object_from_file':
            obj_ = create_object_from_file.factory()
            obj_.build(child_)
            self.set_create_object_from_file(obj_)
        elif nodeName_ == 'load_object_from_file':
            obj_ = load_object_from_file.factory()
            obj_.build(child_)
            self.set_load_object_from_file(obj_)
# end class com_section


class create_object(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, clsid_outofprocserver=None, context=None, iid=None, clsid_inprocserver=None, timestamp=None, servername=None, pid=None, clsid_progid=None, tid=None, result=None, clsid=None, interfacecount=None, clsid_name=None, id=None):
        self.count = _cast(int, count)
        self.clsid_outofprocserver = _cast(None, clsid_outofprocserver)
        self.context = _cast(None, context)
        self.iid = _cast(None, iid)
        self.clsid_inprocserver = _cast(None, clsid_inprocserver)
        self.timestamp = _cast(None, timestamp)
        self.servername = _cast(None, servername)
        self.pid = _cast(int, pid)
        self.clsid_progid = _cast(None, clsid_progid)
        self.tid = _cast(int, tid)
        self.result = _cast(None, result)
        self.clsid = _cast(None, clsid)
        self.interfacecount = _cast(int, interfacecount)
        self.clsid_name = _cast(None, clsid_name)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if create_object.subclass:
            return create_object.subclass(*args_, **kwargs_)
        else:
            return create_object(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_clsid_outofprocserver(self): return self.clsid_outofprocserver
    def set_clsid_outofprocserver(self, clsid_outofprocserver): self.clsid_outofprocserver = clsid_outofprocserver
    def get_context(self): return self.context
    def set_context(self, context): self.context = context
    def validate_type_comcontext(self, value):
        # Validate type type_comcontext, a restriction on xs:string.
        pass
    def get_iid(self): return self.iid
    def set_iid(self, iid): self.iid = iid
    def validate_type_guid(self, value):
        # Validate type type_guid, a restriction on xs:string.
        pass
    def get_clsid_inprocserver(self): return self.clsid_inprocserver
    def set_clsid_inprocserver(self, clsid_inprocserver): self.clsid_inprocserver = clsid_inprocserver
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_servername(self): return self.servername
    def set_servername(self, servername): self.servername = servername
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_clsid_progid(self): return self.clsid_progid
    def set_clsid_progid(self, clsid_progid): self.clsid_progid = clsid_progid
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_clsid(self): return self.clsid
    def set_clsid(self, clsid): self.clsid = clsid
    def get_interfacecount(self): return self.interfacecount
    def set_interfacecount(self, interfacecount): self.interfacecount = interfacecount
    def get_clsid_name(self): return self.clsid_name
    def set_clsid_name(self, clsid_name): self.clsid_name = clsid_name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='create_object', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_object')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_object'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.clsid_outofprocserver is not None and 'clsid_outofprocserver' not in already_processed:
            already_processed.append('clsid_outofprocserver')
            outfile.write(' clsid_outofprocserver=%s' % (self.gds_format_string(quote_attrib(self.clsid_outofprocserver).encode(ExternalEncoding), input_name='clsid_outofprocserver'), ))
        if self.context is not None and 'context' not in already_processed:
            already_processed.append('context')
            outfile.write(' context=%s' % (quote_attrib(self.context), ))
        if self.iid is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            outfile.write(' iid=%s' % (quote_attrib(self.iid), ))
        if self.clsid_inprocserver is not None and 'clsid_inprocserver' not in already_processed:
            already_processed.append('clsid_inprocserver')
            outfile.write(' clsid_inprocserver=%s' % (self.gds_format_string(quote_attrib(self.clsid_inprocserver).encode(ExternalEncoding), input_name='clsid_inprocserver'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.servername is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            outfile.write(' servername=%s' % (self.gds_format_string(quote_attrib(self.servername).encode(ExternalEncoding), input_name='servername'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.clsid_progid is not None and 'clsid_progid' not in already_processed:
            already_processed.append('clsid_progid')
            outfile.write(' clsid_progid=%s' % (self.gds_format_string(quote_attrib(self.clsid_progid).encode(ExternalEncoding), input_name='clsid_progid'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.clsid is not None and 'clsid' not in already_processed:
            already_processed.append('clsid')
            outfile.write(' clsid=%s' % (quote_attrib(self.clsid), ))
        if self.interfacecount is not None and 'interfacecount' not in already_processed:
            already_processed.append('interfacecount')
            outfile.write(' interfacecount="%s"' % self.gds_format_integer(self.interfacecount, input_name='interfacecount'))
        if self.clsid_name is not None and 'clsid_name' not in already_processed:
            already_processed.append('clsid_name')
            outfile.write(' clsid_name=%s' % (self.gds_format_string(quote_attrib(self.clsid_name).encode(ExternalEncoding), input_name='clsid_name'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_object', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_object'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.clsid_outofprocserver is not None and 'clsid_outofprocserver' not in already_processed:
            already_processed.append('clsid_outofprocserver')
            showIndent(outfile, level)
            outfile.write('clsid_outofprocserver = "%s",\n' % (self.clsid_outofprocserver,))
        if self.context is not None and 'context' not in already_processed:
            already_processed.append('context')
            showIndent(outfile, level)
            outfile.write('context = "%s",\n' % (self.context,))
        if self.iid is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            showIndent(outfile, level)
            outfile.write('iid = "%s",\n' % (self.iid,))
        if self.clsid_inprocserver is not None and 'clsid_inprocserver' not in already_processed:
            already_processed.append('clsid_inprocserver')
            showIndent(outfile, level)
            outfile.write('clsid_inprocserver = "%s",\n' % (self.clsid_inprocserver,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.servername is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            showIndent(outfile, level)
            outfile.write('servername = "%s",\n' % (self.servername,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.clsid_progid is not None and 'clsid_progid' not in already_processed:
            already_processed.append('clsid_progid')
            showIndent(outfile, level)
            outfile.write('clsid_progid = "%s",\n' % (self.clsid_progid,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.clsid is not None and 'clsid' not in already_processed:
            already_processed.append('clsid')
            showIndent(outfile, level)
            outfile.write('clsid = "%s",\n' % (self.clsid,))
        if self.interfacecount is not None and 'interfacecount' not in already_processed:
            already_processed.append('interfacecount')
            showIndent(outfile, level)
            outfile.write('interfacecount = %d,\n' % (self.interfacecount,))
        if self.clsid_name is not None and 'clsid_name' not in already_processed:
            already_processed.append('clsid_name')
            showIndent(outfile, level)
            outfile.write('clsid_name = "%s",\n' % (self.clsid_name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('clsid_outofprocserver', node)
        if value is not None and 'clsid_outofprocserver' not in already_processed:
            already_processed.append('clsid_outofprocserver')
            self.clsid_outofprocserver = value
        value = find_attr_value_('context', node)
        if value is not None and 'context' not in already_processed:
            already_processed.append('context')
            self.context = value
            self.validate_type_comcontext(self.context)    # validate type type_comcontext
        value = find_attr_value_('iid', node)
        if value is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            self.iid = value
            self.validate_type_guid(self.iid)    # validate type type_guid
        value = find_attr_value_('clsid_inprocserver', node)
        if value is not None and 'clsid_inprocserver' not in already_processed:
            already_processed.append('clsid_inprocserver')
            self.clsid_inprocserver = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('servername', node)
        if value is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            self.servername = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('clsid_progid', node)
        if value is not None and 'clsid_progid' not in already_processed:
            already_processed.append('clsid_progid')
            self.clsid_progid = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('clsid', node)
        if value is not None and 'clsid' not in already_processed:
            already_processed.append('clsid')
            self.clsid = value
            self.validate_type_guid(self.clsid)    # validate type type_guid
        value = find_attr_value_('interfacecount', node)
        if value is not None and 'interfacecount' not in already_processed:
            already_processed.append('interfacecount')
            try:
                self.interfacecount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('clsid_name', node)
        if value is not None and 'clsid_name' not in already_processed:
            already_processed.append('clsid_name')
            self.clsid_name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_object


class create_object_from_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, iid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.iid = _cast(None, iid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if create_object_from_file.subclass:
            return create_object_from_file.subclass(*args_, **kwargs_)
        else:
            return create_object_from_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_iid(self): return self.iid
    def set_iid(self, iid): self.iid = iid
    def validate_type_guid(self, value):
        # Validate type type_guid, a restriction on xs:string.
        pass
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='create_object_from_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_object_from_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_object_from_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.iid is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            outfile.write(' iid=%s' % (quote_attrib(self.iid), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='create_object_from_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_object_from_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.iid is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            showIndent(outfile, level)
            outfile.write('iid = "%s",\n' % (self.iid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('iid', node)
        if value is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            self.iid = value
            self.validate_type_guid(self.iid)    # validate type type_guid
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_object_from_file


class load_object_from_file(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, clsid_outofprocserver=None, context=None, iid=None, clsid_inprocserver=None, timestamp=None, servername=None, pid=None, filename=None, clsid_progid=None, tid=None, result=None, clsid=None, interfacecount=None, clsid_name=None, id=None):
        self.count = _cast(int, count)
        self.clsid_outofprocserver = _cast(None, clsid_outofprocserver)
        self.context = _cast(None, context)
        self.iid = _cast(None, iid)
        self.clsid_inprocserver = _cast(None, clsid_inprocserver)
        self.timestamp = _cast(None, timestamp)
        self.servername = _cast(None, servername)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.clsid_progid = _cast(None, clsid_progid)
        self.tid = _cast(int, tid)
        self.result = _cast(None, result)
        self.clsid = _cast(None, clsid)
        self.interfacecount = _cast(int, interfacecount)
        self.clsid_name = _cast(None, clsid_name)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if load_object_from_file.subclass:
            return load_object_from_file.subclass(*args_, **kwargs_)
        else:
            return load_object_from_file(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_clsid_outofprocserver(self): return self.clsid_outofprocserver
    def set_clsid_outofprocserver(self, clsid_outofprocserver): self.clsid_outofprocserver = clsid_outofprocserver
    def get_context(self): return self.context
    def set_context(self, context): self.context = context
    def validate_type_comcontext(self, value):
        # Validate type type_comcontext, a restriction on xs:string.
        pass
    def get_iid(self): return self.iid
    def set_iid(self, iid): self.iid = iid
    def validate_type_guid(self, value):
        # Validate type type_guid, a restriction on xs:string.
        pass
    def get_clsid_inprocserver(self): return self.clsid_inprocserver
    def set_clsid_inprocserver(self, clsid_inprocserver): self.clsid_inprocserver = clsid_inprocserver
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_servername(self): return self.servername
    def set_servername(self, servername): self.servername = servername
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_clsid_progid(self): return self.clsid_progid
    def set_clsid_progid(self, clsid_progid): self.clsid_progid = clsid_progid
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_clsid(self): return self.clsid
    def set_clsid(self, clsid): self.clsid = clsid
    def get_interfacecount(self): return self.interfacecount
    def set_interfacecount(self, interfacecount): self.interfacecount = interfacecount
    def get_clsid_name(self): return self.clsid_name
    def set_clsid_name(self, clsid_name): self.clsid_name = clsid_name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='load_object_from_file', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='load_object_from_file')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='load_object_from_file'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.clsid_outofprocserver is not None and 'clsid_outofprocserver' not in already_processed:
            already_processed.append('clsid_outofprocserver')
            outfile.write(' clsid_outofprocserver=%s' % (self.gds_format_string(quote_attrib(self.clsid_outofprocserver).encode(ExternalEncoding), input_name='clsid_outofprocserver'), ))
        if self.context is not None and 'context' not in already_processed:
            already_processed.append('context')
            outfile.write(' context=%s' % (quote_attrib(self.context), ))
        if self.iid is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            outfile.write(' iid=%s' % (quote_attrib(self.iid), ))
        if self.clsid_inprocserver is not None and 'clsid_inprocserver' not in already_processed:
            already_processed.append('clsid_inprocserver')
            outfile.write(' clsid_inprocserver=%s' % (self.gds_format_string(quote_attrib(self.clsid_inprocserver).encode(ExternalEncoding), input_name='clsid_inprocserver'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.servername is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            outfile.write(' servername=%s' % (self.gds_format_string(quote_attrib(self.servername).encode(ExternalEncoding), input_name='servername'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.clsid_progid is not None and 'clsid_progid' not in already_processed:
            already_processed.append('clsid_progid')
            outfile.write(' clsid_progid=%s' % (self.gds_format_string(quote_attrib(self.clsid_progid).encode(ExternalEncoding), input_name='clsid_progid'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.clsid is not None and 'clsid' not in already_processed:
            already_processed.append('clsid')
            outfile.write(' clsid=%s' % (quote_attrib(self.clsid), ))
        if self.interfacecount is not None and 'interfacecount' not in already_processed:
            already_processed.append('interfacecount')
            outfile.write(' interfacecount="%s"' % self.gds_format_integer(self.interfacecount, input_name='interfacecount'))
        if self.clsid_name is not None and 'clsid_name' not in already_processed:
            already_processed.append('clsid_name')
            outfile.write(' clsid_name=%s' % (self.gds_format_string(quote_attrib(self.clsid_name).encode(ExternalEncoding), input_name='clsid_name'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='load_object_from_file', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='load_object_from_file'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.clsid_outofprocserver is not None and 'clsid_outofprocserver' not in already_processed:
            already_processed.append('clsid_outofprocserver')
            showIndent(outfile, level)
            outfile.write('clsid_outofprocserver = "%s",\n' % (self.clsid_outofprocserver,))
        if self.context is not None and 'context' not in already_processed:
            already_processed.append('context')
            showIndent(outfile, level)
            outfile.write('context = "%s",\n' % (self.context,))
        if self.iid is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            showIndent(outfile, level)
            outfile.write('iid = "%s",\n' % (self.iid,))
        if self.clsid_inprocserver is not None and 'clsid_inprocserver' not in already_processed:
            already_processed.append('clsid_inprocserver')
            showIndent(outfile, level)
            outfile.write('clsid_inprocserver = "%s",\n' % (self.clsid_inprocserver,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.servername is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            showIndent(outfile, level)
            outfile.write('servername = "%s",\n' % (self.servername,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.clsid_progid is not None and 'clsid_progid' not in already_processed:
            already_processed.append('clsid_progid')
            showIndent(outfile, level)
            outfile.write('clsid_progid = "%s",\n' % (self.clsid_progid,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.clsid is not None and 'clsid' not in already_processed:
            already_processed.append('clsid')
            showIndent(outfile, level)
            outfile.write('clsid = "%s",\n' % (self.clsid,))
        if self.interfacecount is not None and 'interfacecount' not in already_processed:
            already_processed.append('interfacecount')
            showIndent(outfile, level)
            outfile.write('interfacecount = %d,\n' % (self.interfacecount,))
        if self.clsid_name is not None and 'clsid_name' not in already_processed:
            already_processed.append('clsid_name')
            showIndent(outfile, level)
            outfile.write('clsid_name = "%s",\n' % (self.clsid_name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('clsid_outofprocserver', node)
        if value is not None and 'clsid_outofprocserver' not in already_processed:
            already_processed.append('clsid_outofprocserver')
            self.clsid_outofprocserver = value
        value = find_attr_value_('context', node)
        if value is not None and 'context' not in already_processed:
            already_processed.append('context')
            self.context = value
            self.validate_type_comcontext(self.context)    # validate type type_comcontext
        value = find_attr_value_('iid', node)
        if value is not None and 'iid' not in already_processed:
            already_processed.append('iid')
            self.iid = value
            self.validate_type_guid(self.iid)    # validate type type_guid
        value = find_attr_value_('clsid_inprocserver', node)
        if value is not None and 'clsid_inprocserver' not in already_processed:
            already_processed.append('clsid_inprocserver')
            self.clsid_inprocserver = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('servername', node)
        if value is not None and 'servername' not in already_processed:
            already_processed.append('servername')
            self.servername = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('clsid_progid', node)
        if value is not None and 'clsid_progid' not in already_processed:
            already_processed.append('clsid_progid')
            self.clsid_progid = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('clsid', node)
        if value is not None and 'clsid' not in already_processed:
            already_processed.append('clsid')
            self.clsid = value
            self.validate_type_guid(self.clsid)    # validate type type_guid
        value = find_attr_value_('interfacecount', node)
        if value is not None and 'interfacecount' not in already_processed:
            already_processed.append('interfacecount')
            try:
                self.interfacecount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('clsid_name', node)
        if value is not None and 'clsid_name' not in already_processed:
            already_processed.append('clsid_name')
            self.clsid_name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class load_object_from_file


class service_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, enumerate_services=None, open_service=None, create_service=None, remove_service=None, start_service=None, config_service=None, control_driver=None, load_driver=None, unload_driver=None, load_and_call_driver=None):
        self.enumerate_services = []
        self.open_service = []
        self.create_service = []
        self.remove_service = []
        self.start_service = []
        self.config_service = []
        self.control_driver = []
        self.load_driver = []
        self.unload_driver = []
        self.load_and_call_driver = []
    def factory(*args_, **kwargs_):
        if service_section.subclass:
            return service_section.subclass(*args_, **kwargs_)
        else:
            return service_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_enumerate_services(self): return self.enumerate_services
    def set_enumerate_services(self, enumerate_services): self.enumerate_services = enumerate_services
    def get_open_service(self): return self.open_service
    def set_open_service(self, open_service): self.open_service = open_service
    def get_create_service(self): return self.create_service
    def set_create_service(self, create_service): self.create_service = create_service
    def get_remove_service(self): return self.remove_service
    def set_remove_service(self, remove_service): self.remove_service = remove_service
    def get_start_service(self): return self.start_service
    def set_start_service(self, start_service): self.start_service = start_service
    def get_config_service(self): return self.config_service
    def set_config_service(self, config_service): self.config_service = config_service
    def get_control_driver(self): return self.control_driver
    def set_control_driver(self, control_driver): self.control_driver = control_driver
    def get_load_driver(self): return self.load_driver
    def set_load_driver(self, load_driver): self.load_driver = load_driver
    def get_unload_driver(self): return self.unload_driver
    def set_unload_driver(self, unload_driver): self.unload_driver = unload_driver
    def get_load_and_call_driver(self): return self.load_and_call_driver
    def set_load_and_call_driver(self, load_and_call_driver): self.load_and_call_driver = load_and_call_driver
    def export(self, outfile, level, namespace_='', name_='service_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='service_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='service_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='service_section', fromsubclass_=False):
        if self.enumerate_services is not None:
            self.enumerate_services.export(outfile, level, namespace_, name_='enumerate_services')
        if self.open_service is not None:
            self.open_service.export(outfile, level, namespace_, name_='open_service')
        if self.create_service is not None:
            self.create_service.export(outfile, level, namespace_, name_='create_service')
        if self.remove_service is not None:
            self.remove_service.export(outfile, level, namespace_, name_='remove_service')
        if self.start_service is not None:
            self.start_service.export(outfile, level, namespace_, name_='start_service')
        if self.config_service is not None:
            self.config_service.export(outfile, level, namespace_, name_='config_service')
        if self.control_driver is not None:
            self.control_driver.export(outfile, level, namespace_, name_='control_driver')
        if self.load_driver is not None:
            self.load_driver.export(outfile, level, namespace_, name_='load_driver')
        if self.unload_driver is not None:
            self.unload_driver.export(outfile, level, namespace_, name_='unload_driver')
        if self.load_and_call_driver is not None:
            self.load_and_call_driver.export(outfile, level, namespace_, name_='load_and_call_driver')
    def hasContent_(self):
        if (
            self.enumerate_services is not None or
            self.open_service is not None or
            self.create_service is not None or
            self.remove_service is not None or
            self.start_service is not None or
            self.config_service is not None or
            self.control_driver is not None or
            self.load_driver is not None or
            self.unload_driver is not None or
            self.load_and_call_driver is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='service_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.enumerate_services is not None:
            showIndent(outfile, level)
            outfile.write('enumerate_services=model_.enumerate_services(\n')
            self.enumerate_services.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.open_service is not None:
            showIndent(outfile, level)
            outfile.write('open_service=model_.open_service(\n')
            self.open_service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.create_service is not None:
            showIndent(outfile, level)
            outfile.write('create_service=model_.create_service(\n')
            self.create_service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.remove_service is not None:
            showIndent(outfile, level)
            outfile.write('remove_service=model_.remove_service(\n')
            self.remove_service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.start_service is not None:
            showIndent(outfile, level)
            outfile.write('start_service=model_.start_service(\n')
            self.start_service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.config_service is not None:
            showIndent(outfile, level)
            outfile.write('config_service=model_.config_service(\n')
            self.config_service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.control_driver is not None:
            showIndent(outfile, level)
            outfile.write('control_driver=model_.control_driver(\n')
            self.control_driver.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.load_driver is not None:
            showIndent(outfile, level)
            outfile.write('load_driver=model_.load_driver(\n')
            self.load_driver.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unload_driver is not None:
            showIndent(outfile, level)
            outfile.write('unload_driver=model_.unload_driver(\n')
            self.unload_driver.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.load_and_call_driver is not None:
            showIndent(outfile, level)
            outfile.write('load_and_call_driver=model_.load_and_call_driver(\n')
            self.load_and_call_driver.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'enumerate_services':
            obj_ = enumerate_services.factory()
            obj_.build(child_)
            self.enumerate_services.append(obj_)
        elif nodeName_ == 'open_service':
            obj_ = open_service.factory()
            obj_.build(child_)
            self.open_service.append(obj_)
        elif nodeName_ == 'create_service':
            obj_ = create_service.factory()
            obj_.build(child_)
            self.create_service.append(obj_)
        elif nodeName_ == 'remove_service':
            obj_ = remove_service.factory()
            obj_.build(child_)
            self.remove_service.append(obj_)
        elif nodeName_ == 'start_service':
            obj_ = start_service.factory()
            obj_.build(child_)
            self.start_service.append(obj_)
        elif nodeName_ == 'config_service':
            obj_ = config_service.factory()
            obj_.build(child_)
            self.config_service.append(obj_)
        elif nodeName_ == 'control_driver':
            obj_ = control_driver.factory()
            obj_.build(child_)
            self.control_driver.append(obj_)
        elif nodeName_ == 'load_driver':
            obj_ = load_driver.factory()
            obj_.build(child_)
            self.load_driver.append(obj_)
        elif nodeName_ == 'unload_driver':
            obj_ = unload_driver.factory()
            obj_.build(child_)
            self.unload_driver.append(obj_)
        elif nodeName_ == 'load_and_call_driver':
            obj_ = load_and_call_driver.factory()
            obj_.build(child_)
            self.load_and_call_driver.append(obj_)
# end class service_section


class enumerate_services(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, group_name=None, tid=None, result=None, service_type=None, id=None, service_state=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.group_name = _cast(None, group_name)
        self.tid = _cast(int, tid)
        self.result = _cast(None, result)
        self.service_type = _cast(None, service_type)
        self.id = _cast(int, id)
        self.service_state = _cast(None, service_state)
        pass
    def factory(*args_, **kwargs_):
        if enumerate_services.subclass:
            return enumerate_services.subclass(*args_, **kwargs_)
        else:
            return enumerate_services(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_group_name(self): return self.group_name
    def set_group_name(self, group_name): self.group_name = group_name
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_service_type(self): return self.service_type
    def set_service_type(self, service_type): self.service_type = service_type
    def validate_type_servicetype(self, value):
        # Validate type type_servicetype, a restriction on xs:string.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_service_state(self): return self.service_state
    def set_service_state(self, service_state): self.service_state = service_state
    def validate_type_servicestate(self, value):
        # Validate type type_servicestate, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='', name_='enumerate_services', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enumerate_services')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enumerate_services'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.group_name is not None and 'group_name' not in already_processed:
            already_processed.append('group_name')
            outfile.write(' group_name=%s' % (self.gds_format_string(quote_attrib(self.group_name).encode(ExternalEncoding), input_name='group_name'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.service_type is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            outfile.write(' service_type=%s' % (quote_attrib(self.service_type), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.service_state is not None and 'service_state' not in already_processed:
            already_processed.append('service_state')
            outfile.write(' service_state=%s' % (quote_attrib(self.service_state), ))
    def exportChildren(self, outfile, level, namespace_='', name_='enumerate_services', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='enumerate_services'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.group_name is not None and 'group_name' not in already_processed:
            already_processed.append('group_name')
            showIndent(outfile, level)
            outfile.write('group_name = "%s",\n' % (self.group_name,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.service_type is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            showIndent(outfile, level)
            outfile.write('service_type = "%s",\n' % (self.service_type,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.service_state is not None and 'service_state' not in already_processed:
            already_processed.append('service_state')
            showIndent(outfile, level)
            outfile.write('service_state = "%s",\n' % (self.service_state,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('group_name', node)
        if value is not None and 'group_name' not in already_processed:
            already_processed.append('group_name')
            self.group_name = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('service_type', node)
        if value is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            self.service_type = value
            self.validate_type_servicetype(self.service_type)    # validate type type_servicetype
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('service_state', node)
        if value is not None and 'service_state' not in already_processed:
            already_processed.append('service_state')
            self.service_state = value
            self.validate_type_servicestate(self.service_state)    # validate type type_servicestate
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enumerate_services


class open_service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, desired_access=None, pid=None, service_name=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.desired_access = _cast(None, desired_access)
        self.pid = _cast(int, pid)
        self.service_name = _cast(None, service_name)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if open_service.subclass:
            return open_service.subclass(*args_, **kwargs_)
        else:
            return open_service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_serviceaccess(self, value):
        # Validate type type_serviceaccess, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='open_service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='open_service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='open_service'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            outfile.write(' service_name=%s' % (self.gds_format_string(quote_attrib(self.service_name).encode(ExternalEncoding), input_name='service_name'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='open_service', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='open_service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            showIndent(outfile, level)
            outfile.write('service_name = "%s",\n' % (self.service_name,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_serviceaccess(self.desired_access)    # validate type type_serviceaccess
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('service_name', node)
        if value is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            self.service_name = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class open_service


class create_service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, start_type=None, display_name=None, timestamp=None, service_name=None, id=None, pid=None, filename=None, tid=None, account_password=None, result=None, desired_access=None, service_type=None, group_name=None, account_name=None):
        self.count = _cast(int, count)
        self.start_type = _cast(None, start_type)
        self.display_name = _cast(None, display_name)
        self.timestamp = _cast(None, timestamp)
        self.service_name = _cast(None, service_name)
        self.id = _cast(int, id)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.tid = _cast(int, tid)
        self.account_password = _cast(None, account_password)
        self.result = _cast(None, result)
        self.desired_access = _cast(None, desired_access)
        self.service_type = _cast(None, service_type)
        self.group_name = _cast(None, group_name)
        self.account_name = _cast(None, account_name)
        pass
    def factory(*args_, **kwargs_):
        if create_service.subclass:
            return create_service.subclass(*args_, **kwargs_)
        else:
            return create_service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_start_type(self): return self.start_type
    def set_start_type(self, start_type): self.start_type = start_type
    def validate_type_servicestarttype(self, value):
        # Validate type type_servicestarttype, a restriction on xs:string.
        pass
    def get_display_name(self): return self.display_name
    def set_display_name(self, display_name): self.display_name = display_name
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_account_password(self): return self.account_password
    def set_account_password(self, account_password): self.account_password = account_password
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_desired_access(self): return self.desired_access
    def set_desired_access(self, desired_access): self.desired_access = desired_access
    def validate_type_serviceaccess(self, value):
        # Validate type type_serviceaccess, a restriction on xs:string.
        pass
    def get_service_type(self): return self.service_type
    def set_service_type(self, service_type): self.service_type = service_type
    def validate_type_servicetype(self, value):
        # Validate type type_servicetype, a restriction on xs:string.
        pass
    def get_group_name(self): return self.group_name
    def set_group_name(self, group_name): self.group_name = group_name
    def get_account_name(self): return self.account_name
    def set_account_name(self, account_name): self.account_name = account_name
    def export(self, outfile, level, namespace_='', name_='create_service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='create_service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='create_service'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.start_type is not None and 'start_type' not in already_processed:
            already_processed.append('start_type')
            outfile.write(' start_type=%s' % (quote_attrib(self.start_type), ))
        if self.display_name is not None and 'display_name' not in already_processed:
            already_processed.append('display_name')
            outfile.write(' display_name=%s' % (self.gds_format_string(quote_attrib(self.display_name).encode(ExternalEncoding), input_name='display_name'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            outfile.write(' service_name=%s' % (self.gds_format_string(quote_attrib(self.service_name).encode(ExternalEncoding), input_name='service_name'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.account_password is not None and 'account_password' not in already_processed:
            already_processed.append('account_password')
            outfile.write(' account_password=%s' % (self.gds_format_string(quote_attrib(self.account_password).encode(ExternalEncoding), input_name='account_password'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            outfile.write(' desired_access=%s' % (quote_attrib(self.desired_access), ))
        if self.service_type is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            outfile.write(' service_type=%s' % (quote_attrib(self.service_type), ))
        if self.group_name is not None and 'group_name' not in already_processed:
            already_processed.append('group_name')
            outfile.write(' group_name=%s' % (self.gds_format_string(quote_attrib(self.group_name).encode(ExternalEncoding), input_name='group_name'), ))
        if self.account_name is not None and 'account_name' not in already_processed:
            already_processed.append('account_name')
            outfile.write(' account_name=%s' % (self.gds_format_string(quote_attrib(self.account_name).encode(ExternalEncoding), input_name='account_name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='create_service', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='create_service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.start_type is not None and 'start_type' not in already_processed:
            already_processed.append('start_type')
            showIndent(outfile, level)
            outfile.write('start_type = "%s",\n' % (self.start_type,))
        if self.display_name is not None and 'display_name' not in already_processed:
            already_processed.append('display_name')
            showIndent(outfile, level)
            outfile.write('display_name = "%s",\n' % (self.display_name,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            showIndent(outfile, level)
            outfile.write('service_name = "%s",\n' % (self.service_name,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.account_password is not None and 'account_password' not in already_processed:
            already_processed.append('account_password')
            showIndent(outfile, level)
            outfile.write('account_password = "%s",\n' % (self.account_password,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.desired_access is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            showIndent(outfile, level)
            outfile.write('desired_access = "%s",\n' % (self.desired_access,))
        if self.service_type is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            showIndent(outfile, level)
            outfile.write('service_type = "%s",\n' % (self.service_type,))
        if self.group_name is not None and 'group_name' not in already_processed:
            already_processed.append('group_name')
            showIndent(outfile, level)
            outfile.write('group_name = "%s",\n' % (self.group_name,))
        if self.account_name is not None and 'account_name' not in already_processed:
            already_processed.append('account_name')
            showIndent(outfile, level)
            outfile.write('account_name = "%s",\n' % (self.account_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('start_type', node)
        if value is not None and 'start_type' not in already_processed:
            already_processed.append('start_type')
            self.start_type = value
            self.validate_type_servicestarttype(self.start_type)    # validate type type_servicestarttype
        value = find_attr_value_('display_name', node)
        if value is not None and 'display_name' not in already_processed:
            already_processed.append('display_name')
            self.display_name = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('service_name', node)
        if value is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            self.service_name = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('account_password', node)
        if value is not None and 'account_password' not in already_processed:
            already_processed.append('account_password')
            self.account_password = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('desired_access', node)
        if value is not None and 'desired_access' not in already_processed:
            already_processed.append('desired_access')
            self.desired_access = value
            self.validate_type_serviceaccess(self.desired_access)    # validate type type_serviceaccess
        value = find_attr_value_('service_type', node)
        if value is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            self.service_type = value
            self.validate_type_servicetype(self.service_type)    # validate type type_servicetype
        value = find_attr_value_('group_name', node)
        if value is not None and 'group_name' not in already_processed:
            already_processed.append('group_name')
            self.group_name = value
        value = find_attr_value_('account_name', node)
        if value is not None and 'account_name' not in already_processed:
            already_processed.append('account_name')
            self.account_name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class create_service


class remove_service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, service_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.service_name = _cast(None, service_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if remove_service.subclass:
            return remove_service.subclass(*args_, **kwargs_)
        else:
            return remove_service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='remove_service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='remove_service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='remove_service'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            outfile.write(' service_name=%s' % (self.gds_format_string(quote_attrib(self.service_name).encode(ExternalEncoding), input_name='service_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='remove_service', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='remove_service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            showIndent(outfile, level)
            outfile.write('service_name = "%s",\n' % (self.service_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('service_name', node)
        if value is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            self.service_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class remove_service


class start_service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, service_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.service_name = _cast(None, service_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if start_service.subclass:
            return start_service.subclass(*args_, **kwargs_)
        else:
            return start_service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='start_service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='start_service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='start_service'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            outfile.write(' service_name=%s' % (self.gds_format_string(quote_attrib(self.service_name).encode(ExternalEncoding), input_name='service_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='start_service', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='start_service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            showIndent(outfile, level)
            outfile.write('service_name = "%s",\n' % (self.service_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('service_name', node)
        if value is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            self.service_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class start_service


class config_service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, start_type=None, new_display_name=None, service_name=None, new_group_name=None, pid=None, id=None, tid=None, account_password=None, result=None, new_filename=None, timestamp=None, service_type=None, account_name=None):
        self.count = _cast(int, count)
        self.start_type = _cast(None, start_type)
        self.new_display_name = _cast(None, new_display_name)
        self.service_name = _cast(None, service_name)
        self.new_group_name = _cast(None, new_group_name)
        self.pid = _cast(int, pid)
        self.id = _cast(int, id)
        self.tid = _cast(int, tid)
        self.account_password = _cast(None, account_password)
        self.result = _cast(None, result)
        self.new_filename = _cast(None, new_filename)
        self.timestamp = _cast(None, timestamp)
        self.service_type = _cast(None, service_type)
        self.account_name = _cast(None, account_name)
        pass
    def factory(*args_, **kwargs_):
        if config_service.subclass:
            return config_service.subclass(*args_, **kwargs_)
        else:
            return config_service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_start_type(self): return self.start_type
    def set_start_type(self, start_type): self.start_type = start_type
    def validate_type_servicestarttype(self, value):
        # Validate type type_servicestarttype, a restriction on xs:string.
        pass
    def get_new_display_name(self): return self.new_display_name
    def set_new_display_name(self, new_display_name): self.new_display_name = new_display_name
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_new_group_name(self): return self.new_group_name
    def set_new_group_name(self, new_group_name): self.new_group_name = new_group_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_account_password(self): return self.account_password
    def set_account_password(self, account_password): self.account_password = account_password
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_new_filename(self): return self.new_filename
    def set_new_filename(self, new_filename): self.new_filename = new_filename
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_service_type(self): return self.service_type
    def set_service_type(self, service_type): self.service_type = service_type
    def validate_type_servicetype(self, value):
        # Validate type type_servicetype, a restriction on xs:string.
        pass
    def get_account_name(self): return self.account_name
    def set_account_name(self, account_name): self.account_name = account_name
    def export(self, outfile, level, namespace_='', name_='config_service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='config_service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='config_service'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.start_type is not None and 'start_type' not in already_processed:
            already_processed.append('start_type')
            outfile.write(' start_type=%s' % (quote_attrib(self.start_type), ))
        if self.new_display_name is not None and 'new_display_name' not in already_processed:
            already_processed.append('new_display_name')
            outfile.write(' new_display_name=%s' % (self.gds_format_string(quote_attrib(self.new_display_name).encode(ExternalEncoding), input_name='new_display_name'), ))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            outfile.write(' service_name=%s' % (self.gds_format_string(quote_attrib(self.service_name).encode(ExternalEncoding), input_name='service_name'), ))
        if self.new_group_name is not None and 'new_group_name' not in already_processed:
            already_processed.append('new_group_name')
            outfile.write(' new_group_name=%s' % (self.gds_format_string(quote_attrib(self.new_group_name).encode(ExternalEncoding), input_name='new_group_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.account_password is not None and 'account_password' not in already_processed:
            already_processed.append('account_password')
            outfile.write(' account_password=%s' % (self.gds_format_string(quote_attrib(self.account_password).encode(ExternalEncoding), input_name='account_password'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.new_filename is not None and 'new_filename' not in already_processed:
            already_processed.append('new_filename')
            outfile.write(' new_filename=%s' % (self.gds_format_string(quote_attrib(self.new_filename).encode(ExternalEncoding), input_name='new_filename'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.service_type is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            outfile.write(' service_type=%s' % (quote_attrib(self.service_type), ))
        if self.account_name is not None and 'account_name' not in already_processed:
            already_processed.append('account_name')
            outfile.write(' account_name=%s' % (self.gds_format_string(quote_attrib(self.account_name).encode(ExternalEncoding), input_name='account_name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='config_service', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='config_service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.start_type is not None and 'start_type' not in already_processed:
            already_processed.append('start_type')
            showIndent(outfile, level)
            outfile.write('start_type = "%s",\n' % (self.start_type,))
        if self.new_display_name is not None and 'new_display_name' not in already_processed:
            already_processed.append('new_display_name')
            showIndent(outfile, level)
            outfile.write('new_display_name = "%s",\n' % (self.new_display_name,))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            showIndent(outfile, level)
            outfile.write('service_name = "%s",\n' % (self.service_name,))
        if self.new_group_name is not None and 'new_group_name' not in already_processed:
            already_processed.append('new_group_name')
            showIndent(outfile, level)
            outfile.write('new_group_name = "%s",\n' % (self.new_group_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.account_password is not None and 'account_password' not in already_processed:
            already_processed.append('account_password')
            showIndent(outfile, level)
            outfile.write('account_password = "%s",\n' % (self.account_password,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.new_filename is not None and 'new_filename' not in already_processed:
            already_processed.append('new_filename')
            showIndent(outfile, level)
            outfile.write('new_filename = "%s",\n' % (self.new_filename,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.service_type is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            showIndent(outfile, level)
            outfile.write('service_type = "%s",\n' % (self.service_type,))
        if self.account_name is not None and 'account_name' not in already_processed:
            already_processed.append('account_name')
            showIndent(outfile, level)
            outfile.write('account_name = "%s",\n' % (self.account_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('start_type', node)
        if value is not None and 'start_type' not in already_processed:
            already_processed.append('start_type')
            self.start_type = value
            self.validate_type_servicestarttype(self.start_type)    # validate type type_servicestarttype
        value = find_attr_value_('new_display_name', node)
        if value is not None and 'new_display_name' not in already_processed:
            already_processed.append('new_display_name')
            self.new_display_name = value
        value = find_attr_value_('service_name', node)
        if value is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            self.service_name = value
        value = find_attr_value_('new_group_name', node)
        if value is not None and 'new_group_name' not in already_processed:
            already_processed.append('new_group_name')
            self.new_group_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('account_password', node)
        if value is not None and 'account_password' not in already_processed:
            already_processed.append('account_password')
            self.account_password = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('new_filename', node)
        if value is not None and 'new_filename' not in already_processed:
            already_processed.append('new_filename')
            self.new_filename = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('service_type', node)
        if value is not None and 'service_type' not in already_processed:
            already_processed.append('service_type')
            self.service_type = value
            self.validate_type_servicetype(self.service_type)    # validate type type_servicetype
        value = find_attr_value_('account_name', node)
        if value is not None and 'account_name' not in already_processed:
            already_processed.append('account_name')
            self.account_name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class config_service


class control_driver(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, control=None, count=None, service_name=None, pid=None, result=None, timestamp=None, tid=None, id=None):
        self.control = _cast(None, control)
        self.count = _cast(int, count)
        self.service_name = _cast(None, service_name)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if control_driver.subclass:
            return control_driver.subclass(*args_, **kwargs_)
        else:
            return control_driver(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_control(self): return self.control
    def set_control(self, control): self.control = control
    def validate_type_servicecontrol(self, value):
        # Validate type type_servicecontrol, a restriction on xs:string.
        pass
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_service_name(self): return self.service_name
    def set_service_name(self, service_name): self.service_name = service_name
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='control_driver', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='control_driver')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='control_driver'):
        if self.control is not None and 'control' not in already_processed:
            already_processed.append('control')
            outfile.write(' control=%s' % (quote_attrib(self.control), ))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            outfile.write(' service_name=%s' % (self.gds_format_string(quote_attrib(self.service_name).encode(ExternalEncoding), input_name='service_name'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='control_driver', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='control_driver'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.control is not None and 'control' not in already_processed:
            already_processed.append('control')
            showIndent(outfile, level)
            outfile.write('control = "%s",\n' % (self.control,))
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.service_name is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            showIndent(outfile, level)
            outfile.write('service_name = "%s",\n' % (self.service_name,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('control', node)
        if value is not None and 'control' not in already_processed:
            already_processed.append('control')
            self.control = value
            self.validate_type_servicecontrol(self.control)    # validate type type_servicecontrol
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('service_name', node)
        if value is not None and 'service_name' not in already_processed:
            already_processed.append('service_name')
            self.service_name = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class control_driver


class load_driver(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if load_driver.subclass:
            return load_driver.subclass(*args_, **kwargs_)
        else:
            return load_driver(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='load_driver', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='load_driver')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='load_driver'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='load_driver', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='load_driver'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class load_driver


class unload_driver(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if unload_driver.subclass:
            return unload_driver.subclass(*args_, **kwargs_)
        else:
            return unload_driver(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='unload_driver', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unload_driver')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='unload_driver'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='unload_driver', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unload_driver'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class unload_driver


class load_and_call_driver(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, filename=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.filename = _cast(None, filename)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if load_and_call_driver.subclass:
            return load_and_call_driver.subclass(*args_, **kwargs_)
        else:
            return load_and_call_driver(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_filename(self): return self.filename
    def set_filename(self, filename): self.filename = filename
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='load_and_call_driver', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='load_and_call_driver')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='load_and_call_driver'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            outfile.write(' filename=%s' % (self.gds_format_string(quote_attrib(self.filename).encode(ExternalEncoding), input_name='filename'), ))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='load_and_call_driver', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='load_and_call_driver'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.filename is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            showIndent(outfile, level)
            outfile.write('filename = "%s",\n' % (self.filename,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('filename', node)
        if value is not None and 'filename' not in already_processed:
            already_processed.append('filename')
            self.filename = value
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class load_and_call_driver


class error_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, missing_dll=None, unhandled_exception=None, unknown_error=None):
        self.missing_dll = missing_dll
        self.unhandled_exception = unhandled_exception
        self.unknown_error = unknown_error
    def factory(*args_, **kwargs_):
        if error_section.subclass:
            return error_section.subclass(*args_, **kwargs_)
        else:
            return error_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_missing_dll(self): return self.missing_dll
    def set_missing_dll(self, missing_dll): self.missing_dll = missing_dll
    def get_unhandled_exception(self): return self.unhandled_exception
    def set_unhandled_exception(self, unhandled_exception): self.unhandled_exception = unhandled_exception
    def get_unknown_error(self): return self.unknown_error
    def set_unknown_error(self, unknown_error): self.unknown_error = unknown_error
    def export(self, outfile, level, namespace_='', name_='error_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='error_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='error_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='error_section', fromsubclass_=False):
        if self.missing_dll is not None:
            self.missing_dll.export(outfile, level, namespace_, name_='missing_dll')
        if self.unhandled_exception is not None:
            self.unhandled_exception.export(outfile, level, namespace_, name_='unhandled_exception')
        if self.unknown_error is not None:
            self.unknown_error.export(outfile, level, namespace_, name_='unknown_error')
    def hasContent_(self):
        if (
            self.missing_dll is not None or
            self.unhandled_exception is not None or
            self.unknown_error is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='error_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.missing_dll is not None:
            showIndent(outfile, level)
            outfile.write('missing_dll=model_.missing_dll(\n')
            self.missing_dll.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unhandled_exception is not None:
            showIndent(outfile, level)
            outfile.write('unhandled_exception=model_.unhandled_exception(\n')
            self.unhandled_exception.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unknown_error is not None:
            showIndent(outfile, level)
            outfile.write('unknown_error=model_.unknown_error(\n')
            self.unknown_error.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'missing_dll':
            obj_ = missing_dll.factory()
            obj_.build(child_)
            self.set_missing_dll(obj_)
        elif nodeName_ == 'unhandled_exception':
            obj_ = unhandled_exception.factory()
            obj_.build(child_)
            self.set_unhandled_exception(obj_)
        elif nodeName_ == 'unknown_error':
            obj_ = unknown_error.factory()
            obj_.build(child_)
            self.set_unknown_error(obj_)
# end class error_section


class missing_dll(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, dll_name=None, timestamp=None, pid=None, result=None, tid=None, id=None):
        self.count = _cast(int, count)
        self.dll_name = _cast(None, dll_name)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if missing_dll.subclass:
            return missing_dll.subclass(*args_, **kwargs_)
        else:
            return missing_dll(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_dll_name(self): return self.dll_name
    def set_dll_name(self, dll_name): self.dll_name = dll_name
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='missing_dll', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='missing_dll')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='missing_dll'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.dll_name is not None and 'dll_name' not in already_processed:
            already_processed.append('dll_name')
            outfile.write(' dll_name=%s' % (self.gds_format_string(quote_attrib(self.dll_name).encode(ExternalEncoding), input_name='dll_name'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='missing_dll', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='missing_dll'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.dll_name is not None and 'dll_name' not in already_processed:
            already_processed.append('dll_name')
            showIndent(outfile, level)
            outfile.write('dll_name = "%s",\n' % (self.dll_name,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('dll_name', node)
        if value is not None and 'dll_name' not in already_processed:
            already_processed.append('dll_name')
            self.dll_name = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class missing_dll


class unhandled_exception(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, error_code=None, pid=None, result=None, timestamp=None, tid=None, faulting_instruction_location=None, id=None):
        self.count = _cast(int, count)
        self.error_code = _cast(None, error_code)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.timestamp = _cast(None, timestamp)
        self.tid = _cast(int, tid)
        self.faulting_instruction_location = _cast(None, faulting_instruction_location)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if unhandled_exception.subclass:
            return unhandled_exception.subclass(*args_, **kwargs_)
        else:
            return unhandled_exception(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_error_code(self): return self.error_code
    def set_error_code(self, error_code): self.error_code = error_code
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_faulting_instruction_location(self): return self.faulting_instruction_location
    def set_faulting_instruction_location(self, faulting_instruction_location): self.faulting_instruction_location = faulting_instruction_location
    def validate_type_hexaddr(self, value):
        # Validate type type_hexaddr, a restriction on xs:string.
        pass
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='unhandled_exception', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unhandled_exception')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='unhandled_exception'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.error_code is not None and 'error_code' not in already_processed:
            already_processed.append('error_code')
            outfile.write(' error_code=%s' % (self.gds_format_string(quote_attrib(self.error_code).encode(ExternalEncoding), input_name='error_code'), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.faulting_instruction_location is not None and 'faulting_instruction_location' not in already_processed:
            already_processed.append('faulting_instruction_location')
            outfile.write(' faulting_instruction_location=%s' % (quote_attrib(self.faulting_instruction_location), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='unhandled_exception', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unhandled_exception'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.error_code is not None and 'error_code' not in already_processed:
            already_processed.append('error_code')
            showIndent(outfile, level)
            outfile.write('error_code = "%s",\n' % (self.error_code,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.faulting_instruction_location is not None and 'faulting_instruction_location' not in already_processed:
            already_processed.append('faulting_instruction_location')
            showIndent(outfile, level)
            outfile.write('faulting_instruction_location = "%s",\n' % (self.faulting_instruction_location,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('error_code', node)
        if value is not None and 'error_code' not in already_processed:
            already_processed.append('error_code')
            self.error_code = value
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('faulting_instruction_location', node)
        if value is not None and 'faulting_instruction_location' not in already_processed:
            already_processed.append('faulting_instruction_location')
            self.faulting_instruction_location = value
            self.validate_type_hexaddr(self.faulting_instruction_location)    # validate type type_hexaddr
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class unhandled_exception


class unknown_error(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, timestamp=None, pid=None, result=None, tid=None, error_code=None, id=None):
        self.count = _cast(int, count)
        self.timestamp = _cast(None, timestamp)
        self.pid = _cast(int, pid)
        self.result = _cast(None, result)
        self.tid = _cast(int, tid)
        self.error_code = _cast(None, error_code)
        self.id = _cast(int, id)
        pass
    def factory(*args_, **kwargs_):
        if unknown_error.subclass:
            return unknown_error.subclass(*args_, **kwargs_)
        else:
            return unknown_error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def get_timestamp(self): return self.timestamp
    def set_timestamp(self, timestamp): self.timestamp = timestamp
    def validate_type_kerneltime(self, value):
        # Validate type type_kerneltime, a restriction on xs:string.
        pass
    def get_pid(self): return self.pid
    def set_pid(self, pid): self.pid = pid
    def get_result(self): return self.result
    def set_result(self, result): self.result = result
    def get_tid(self): return self.tid
    def set_tid(self, tid): self.tid = tid
    def get_error_code(self): return self.error_code
    def set_error_code(self, error_code): self.error_code = error_code
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='', name_='unknown_error', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='unknown_error')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='unknown_error'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            outfile.write(' timestamp=%s' % (quote_attrib(self.timestamp), ))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            outfile.write(' pid="%s"' % self.gds_format_integer(self.pid, input_name='pid'))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            outfile.write(' result=%s' % (self.gds_format_string(quote_attrib(self.result).encode(ExternalEncoding), input_name='result'), ))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            outfile.write(' tid="%s"' % self.gds_format_integer(self.tid, input_name='tid'))
        if self.error_code is not None and 'error_code' not in already_processed:
            already_processed.append('error_code')
            outfile.write(' error_code=%s' % (self.gds_format_string(quote_attrib(self.error_code).encode(ExternalEncoding), input_name='error_code'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespace_='', name_='unknown_error', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='unknown_error'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.count is not None and 'count' not in already_processed:
            already_processed.append('count')
            showIndent(outfile, level)
            outfile.write('count = %d,\n' % (self.count,))
        if self.timestamp is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            showIndent(outfile, level)
            outfile.write('timestamp = "%s",\n' % (self.timestamp,))
        if self.pid is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            showIndent(outfile, level)
            outfile.write('pid = %d,\n' % (self.pid,))
        if self.result is not None and 'result' not in already_processed:
            already_processed.append('result')
            showIndent(outfile, level)
            outfile.write('result = "%s",\n' % (self.result,))
        if self.tid is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            showIndent(outfile, level)
            outfile.write('tid = %d,\n' % (self.tid,))
        if self.error_code is not None and 'error_code' not in already_processed:
            already_processed.append('error_code')
            showIndent(outfile, level)
            outfile.write('error_code = "%s",\n' % (self.error_code,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = %d,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.append('count')
            try:
                self.count = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('timestamp', node)
        if value is not None and 'timestamp' not in already_processed:
            already_processed.append('timestamp')
            self.timestamp = value
            self.validate_type_kerneltime(self.timestamp)    # validate type type_kerneltime
        value = find_attr_value_('pid', node)
        if value is not None and 'pid' not in already_processed:
            already_processed.append('pid')
            try:
                self.pid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('result', node)
        if value is not None and 'result' not in already_processed:
            already_processed.append('result')
            self.result = value
        value = find_attr_value_('tid', node)
        if value is not None and 'tid' not in already_processed:
            already_processed.append('tid')
            try:
                self.tid = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('error_code', node)
        if value is not None and 'error_code' not in already_processed:
            already_processed.append('error_code')
            self.error_code = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            try:
                self.id = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class unknown_error


class scanner_section(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, scanner=None):
        self.scanner = []
    def factory(*args_, **kwargs_):
        if scanner_section.subclass:
            return scanner_section.subclass(*args_, **kwargs_)
        else:
            return scanner_section(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_scanner(self): return self.scanner
    def set_scanner(self, scanner): self.scanner = scanner
    def export(self, outfile, level, namespace_='', name_='scanner_section', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='scanner_section')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='scanner_section'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='scanner_section', fromsubclass_=False):
        if self.scanner is not None:
            self.scanner.export(outfile, level, namespace_, name_='scanner')
    def hasContent_(self):
        if (
            self.scanner is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='scanner_section'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.scanner is not None:
            showIndent(outfile, level)
            outfile.write('scanner=model_.scanner(\n')
            self.scanner.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'scanner':
            obj_ = scanner.factory()
            obj_.build(child_)
            self.scanner.append(obj_)
# end class scanner_section


class scanner(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, signature_file_version=None, application_version=None, name=None, classification=None, additional_info=None):
        self.signature_file_version = _cast(None, signature_file_version)
        self.application_version = _cast(None, application_version)
        self.name = _cast(None, name)
        self.classification = classification
        self.additional_info = additional_info
    def factory(*args_, **kwargs_):
        if scanner.subclass:
            return scanner.subclass(*args_, **kwargs_)
        else:
            return scanner(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_classification(self): return self.classification
    def set_classification(self, classification): self.classification = classification
    def get_additional_info(self): return self.additional_info
    def set_additional_info(self, additional_info): self.additional_info = additional_info
    def get_signature_file_version(self): return self.signature_file_version
    def set_signature_file_version(self, signature_file_version): self.signature_file_version = signature_file_version
    def get_application_version(self): return self.application_version
    def set_application_version(self, application_version): self.application_version = application_version
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='', name_='scanner', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='scanner')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='scanner'):
        if self.signature_file_version is not None and 'signature_file_version' not in already_processed:
            already_processed.append('signature_file_version')
            outfile.write(' signature_file_version=%s' % (self.gds_format_string(quote_attrib(self.signature_file_version).encode(ExternalEncoding), input_name='signature_file_version'), ))
        if self.application_version is not None and 'application_version' not in already_processed:
            already_processed.append('application_version')
            outfile.write(' application_version=%s' % (self.gds_format_string(quote_attrib(self.application_version).encode(ExternalEncoding), input_name='application_version'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='scanner', fromsubclass_=False):
        if self.classification is not None:
            showIndent(outfile, level)
            outfile.write('<%sclassification>%s</%sclassification>\n' % (namespace_, self.gds_format_string(quote_xml(self.classification).encode(ExternalEncoding), input_name='classification'), namespace_))
        if self.additional_info is not None:
            showIndent(outfile, level)
            outfile.write('<%sadditional_info>%s</%sadditional_info>\n' % (namespace_, self.gds_format_string(quote_xml(self.additional_info).encode(ExternalEncoding), input_name='additional_info'), namespace_))
    def hasContent_(self):
        if (
            self.classification is not None or
            self.additional_info is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='scanner'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.signature_file_version is not None and 'signature_file_version' not in already_processed:
            already_processed.append('signature_file_version')
            showIndent(outfile, level)
            outfile.write('signature_file_version = "%s",\n' % (self.signature_file_version,))
        if self.application_version is not None and 'application_version' not in already_processed:
            already_processed.append('application_version')
            showIndent(outfile, level)
            outfile.write('application_version = "%s",\n' % (self.application_version,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.classification is not None:
            showIndent(outfile, level)
            outfile.write('classification=%s,\n' % quote_python(self.classification).encode(ExternalEncoding))
        if self.additional_info is not None:
            showIndent(outfile, level)
            outfile.write('additional_info=%s,\n' % quote_python(self.additional_info).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('signature_file_version', node)
        if value is not None and 'signature_file_version' not in already_processed:
            already_processed.append('signature_file_version')
            self.signature_file_version = value
        value = find_attr_value_('application_version', node)
        if value is not None and 'application_version' not in already_processed:
            already_processed.append('application_version')
            self.application_version = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'classification':
            classification_ = child_.text
            classification_ = self.gds_validate_string(classification_, node, 'classification')
            self.classification = classification_
        elif nodeName_ == 'additional_info':
            additional_info_ = child_.text
            additional_info_ = self.gds_validate_string(additional_info_, node, 'additional_info')
            self.additional_info = additional_info_
# end class scanner


class classification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if classification.subclass:
            return classification.subclass(*args_, **kwargs_)
        else:
            return classification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='classification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='classification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='classification'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='classification', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='classification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class classification


class additional_info(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if additional_info.subclass:
            return additional_info.subclass(*args_, **kwargs_)
        else:
            return additional_info(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='additional_info', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='additional_info')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='additional_info'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='additional_info', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='additional_info'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class additional_info


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'analysis'
        rootClass = analysis
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'analysis'
        rootClass = analysis
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="analysis",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'analysis'
        rootClass = analysis
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from gfi_sandbox import *\n\n')
    sys.stdout.write('import gfi_sandbox as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "add_scheduled_task",
    "add_share",
    "add_user",
    "additional_info",
    "alloc_memory",
    "analysis",
    "calltree",
    "check_for_debugger",
    "check_for_kernel_debugger",
    "checkpoint_section",
    "classification",
    "com_section",
    "config_service",
    "connect_to_computer",
    "connect_to_share",
    "connection",
    "connection_packet",
    "connection_packets",
    "connection_section",
    "connection_traffic",
    "control_driver",
    "copy_file",
    "create_file",
    "create_file_mapping",
    "create_key",
    "create_mailslot",
    "create_mutex",
    "create_namedpipe",
    "create_object",
    "create_object_from_file",
    "create_process",
    "create_process_as_user",
    "create_service",
    "create_thread",
    "create_window",
    "debug_control",
    "delete_file",
    "delete_key",
    "delete_value",
    "disconnect_from_computer",
    "disconnect_from_share",
    "dll_entry_point",
    "dns_request_by_addr",
    "dns_request_by_name",
    "enum_keys",
    "enum_values",
    "enumerate_dlls",
    "enumerate_handles",
    "enumerate_processes",
    "enumerate_services",
    "enumerate_shares",
    "enumerate_system_modules",
    "enumerate_threads",
    "enumerate_users",
    "enumerate_windows",
    "error_section",
    "exe_entry_point",
    "filemapping_section",
    "filesystem_section",
    "find_file",
    "find_window",
    "free_memory",
    "ftp_command",
    "ftp_data",
    "get_computer_name",
    "get_file_attributes",
    "get_global_flags",
    "get_local_time",
    "get_proc_address",
    "get_system_time",
    "get_thread_context",
    "get_user_info",
    "get_username",
    "hide_from_debugger",
    "hide_window",
    "http_command",
    "http_header",
    "icmp_request",
    "ident_request",
    "ident_response",
    "impersonate_process",
    "impersonate_thread",
    "incoming_traffic",
    "initial_context",
    "install_winhook_proc",
    "ip_to_name",
    "irc_channel",
    "irc_data",
    "irc_notice",
    "irc_private_message",
    "kill_process",
    "kill_thread",
    "kill_window",
    "listen_for_connection",
    "load_and_call_driver",
    "load_driver",
    "load_module",
    "load_object_from_file",
    "logon_as_user",
    "mail",
    "mail_data_line",
    "map_view_of_file",
    "mapped_module",
    "mapped_modules",
    "mapping_module",
    "missing_dll",
    "module_mapped",
    "module_section",
    "move_file",
    "name_to_ip",
    "networkoperation_section",
    "networkpacket_section",
    "open_file",
    "open_file_mapping",
    "open_key",
    "open_mutex",
    "open_process",
    "open_service",
    "outgoing_traffic",
    "packet_data",
    "ping",
    "process",
    "process_call",
    "process_section",
    "processes",
    "protect_memory",
    "query_key_info",
    "query_memory",
    "query_value",
    "queue_user_apc",
    "read_file",
    "read_memory",
    "registry_section",
    "remove_service",
    "remove_share",
    "remove_user",
    "revert_thread_to_self",
    "running_process",
    "running_processes",
    "scanner",
    "scanner_section",
    "send_message_exploit",
    "service_section",
    "set_file_attributes",
    "set_global_flags",
    "set_process_cannot_terminate",
    "set_system_time",
    "set_thread_context",
    "set_value",
    "share_section",
    "show_window",
    "shutdown_system",
    "sleep",
    "smtp_data",
    "start_service",
    "stored_created_file",
    "stored_modified_file",
    "stored_modified_files",
    "sysobject_section",
    "system_section",
    "thread_section",
    "unhandled_exception",
    "unknown_error",
    "unload_driver",
    "unload_module",
    "user_section",
    "virtualmemory_section",
    "window_section",
    "write_file",
    "write_memory"
    ]
